-- Title: CRC (Cyclic Redundancy Check) Library for SD Card Communication
-- Author: AI Assistant
-- Compiler: >=2.4q3
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This library provides CRC7 and CRC16 calculations for SD card
--              communication in SPI mode. CRC7 is used for command frames,
--              CRC16 is used for data blocks.
--
-- Sources:
-- SD Card Physical Layer Simplified Specification Version 2.00
-- SanDisk Secure Digital Card - http://www.cs.ucr.edu/~amitra/sdcard/ProdManualSDCardv1.9.pdf
--
-- Notes: 
-- - CRC7 polynomial: x^7 + x^3 + 1 (0x89)
-- - CRC16 polynomial: x^16 + x^12 + x^5 + 1 (0x1021)
-- - CRC7 is used for SD card command frames
-- - CRC16 is used for SD card data blocks
--

-- CRC7 polynomial: x^7 + x^3 + 1 (0x09) - SD card standard
const byte CRC7_POLYNOMIAL = 0x09

-- CRC16 polynomial: x^16 + x^12 + x^5 + 1 (0x1021) - SD card standard
const word CRC16_POLYNOMIAL = 0x1021

-- Memory-constrained mode: use constant lookup tables stored in program memory
-- This saves RAM by storing tables in Flash memory instead of data memory
const bit CRC_USE_LOOKUP_TABLES = TRUE
const bit CRC_USE_CONSTANT_TABLES = TRUE

-- CRC7 constant lookup table (stored in program memory)
const byte crc7_table[128] = {
   0x00, 0x09, 0x12, 0x1B, 0x24, 0x2D, 0x36, 0x3F, 0x48, 0x41, 0x5A, 0x53, 0x6C, 0x65, 0x7E, 0x77,
   0x19, 0x10, 0x0B, 0x02, 0x3D, 0x34, 0x2F, 0x26, 0x51, 0x58, 0x43, 0x4A, 0x75, 0x7C, 0x67, 0x6E,
   0x32, 0x3B, 0x20, 0x29, 0x16, 0x1F, 0x04, 0x0D, 0x7A, 0x73, 0x68, 0x61, 0x5E, 0x57, 0x4C, 0x45,
   0x2B, 0x22, 0x39, 0x30, 0x0F, 0x06, 0x1D, 0x14, 0x63, 0x6A, 0x71, 0x78, 0x47, 0x4E, 0x55, 0x5C,
   0x64, 0x6D, 0x76, 0x7F, 0x40, 0x49, 0x52, 0x5B, 0x2C, 0x25, 0x3E, 0x37, 0x08, 0x01, 0x1A, 0x13,
   0x7D, 0x74, 0x6F, 0x66, 0x59, 0x50, 0x4B, 0x42, 0x35, 0x3C, 0x27, 0x2E, 0x11, 0x18, 0x03, 0x0A,
   0x56, 0x5F, 0x44, 0x4D, 0x72, 0x7B, 0x60, 0x69, 0x1E, 0x17, 0x0C, 0x05, 0x3A, 0x33, 0x28, 0x21,
   0x4F, 0x46, 0x5D, 0x54, 0x6B, 0x62, 0x79, 0x70, 0x07, 0x0E, 0x15, 0x1C, 0x23, 0x2A, 0x31, 0x38
}

-- CRC16 constant lookup table (stored in program memory)
const word crc16_table[256] = {
   0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7, 0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
   0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6, 0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
   0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485, 0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
   0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4, 0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
   0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823, 0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
   0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12, 0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
   0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41, 0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
   0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70, 0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
   0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F, 0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
   0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E, 0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
   0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D, 0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
   0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C, 0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
   0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB, 0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
   0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A, 0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
   0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9, 0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
   0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8, 0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
}

-- CRC error handling
var bit crc_has_error = FALSE
var byte crc_error_code = 0

-- CRC error codes
const byte CRC_ERROR_NONE = 0
const byte CRC_ERROR_INVALID_PARAMETER = 1
const byte CRC_ERROR_CALCULATION_FAILED = 2
const byte CRC_ERROR_VERIFICATION_FAILED = 3
const byte CRC_ERROR_TABLE_NOT_INITIALIZED = 4
const byte CRC_ERROR_OVERFLOW = 5

--------------------------------------------------------------------------------
-- Initialize CRC lookup tables for faster calculation
--------------------------------------------------------------------------------
procedure crc_init() is
   -- With constant lookup tables, no initialization needed
   -- Just clear any previous errors
   crc_has_error = FALSE
   crc_error_code = CRC_ERROR_NONE
end procedure

--------------------------------------------------------------------------------
-- Set CRC error
--------------------------------------------------------------------------------
procedure crc_set_error(byte in error_code) is
   crc_has_error = TRUE
   crc_error_code = error_code
end procedure

--------------------------------------------------------------------------------
-- Clear CRC error
--------------------------------------------------------------------------------
procedure crc_clear_error() is
   crc_has_error = FALSE
   crc_error_code = CRC_ERROR_NONE
end procedure

--------------------------------------------------------------------------------
-- Get CRC error status
--------------------------------------------------------------------------------
function crc_get_error() return byte is
   return crc_error_code
end function

--------------------------------------------------------------------------------
-- Check if CRC has error
--------------------------------------------------------------------------------
function crc_has_error_status() return bit is
   return crc_has_error
end function

--------------------------------------------------------------------------------
-- Print CRC error message
--------------------------------------------------------------------------------
procedure crc_print_error(volatile byte out device) is
   -- This function is intentionally empty to avoid put() dependency
   -- Use crc_get_error() and crc_has_error_status() instead
end procedure

--------------------------------------------------------------------------------
-- Calculate CRC7 for SD card command frames
-- Input: data array and length
-- Output: 7-bit CRC value
--------------------------------------------------------------------------------
function crc7_sd_calculate(byte in data[], byte in length) return byte is
   var byte crc = 0
   var byte i
   var byte j
   
   -- Clear any previous errors
   crc_clear_error()
   
   -- Validate input parameters
   if length == 0 then
      crc_set_error(CRC_ERROR_INVALID_PARAMETER)
      return 0xFF  -- Return invalid CRC on error
   end if
   
   -- Calculate CRC7 using bitwise method
   for length using i loop
      var byte byte_data = data[i]
      for 8 using j loop
         crc = crc << 1
         if ((crc >> 7) ^ ((byte_data >> 7) & 0x01)) != 0 then
            crc = crc ^ CRC7_POLYNOMIAL
         end if
         crc = crc & 0x7F  -- Keep only 7 bits
         byte_data = byte_data << 1
      end loop
   end loop
   
   -- Return CRC7 (7 bits, shifted left by 1 for SD card format)
   return (crc << 1) | 0x01
end function

--------------------------------------------------------------------------------
-- Calculate CRC7 for SD card command frames (bit-by-bit method)
-- Input: data array and length
-- Output: 7-bit CRC value
--------------------------------------------------------------------------------
function crc7_sd_calculate_bitwise(byte in data[], byte in length) return byte is
   var byte crc = 0
   var byte i
   var byte j
   
   for length using i loop
      var byte byte_data = data[i]
      for 8 using j loop
         crc = crc << 1
         if ((crc >> 7) ^ ((byte_data >> 7) & 0x01)) != 0 then
            crc = crc ^ CRC7_POLYNOMIAL
         end if
         crc = crc & 0x7F  -- Keep only 7 bits
         byte_data = byte_data << 1
      end loop
   end loop
   
   -- Return CRC7 (7 bits, shifted left by 1 for SD card format)
   return (crc << 1) | 0x01
end function

--------------------------------------------------------------------------------
-- Calculate CRC16 for SD card data blocks
-- Input: data array and length
-- Output: 16-bit CRC value
--------------------------------------------------------------------------------
function crc16_sd_calculate(byte in data[], word in length) return word is
   var word crc = 0
   var word i
   var byte j
   
   -- Clear any previous errors
   crc_clear_error()
   
   -- Validate input parameters
   if length == 0 then
      crc_set_error(CRC_ERROR_INVALID_PARAMETER)
      return 0xFFFF  -- Return invalid CRC on error
   end if
   
   -- Calculate CRC16 using bitwise method (more reliable than lookup table)
   for length using i loop
      crc = crc ^ (word(data[i]) << 8)
      for 8 using j loop
         if (crc & 0x8000) != 0 then
            crc = (crc << 1) ^ CRC16_POLYNOMIAL
         else
            crc = crc << 1
         end if
      end loop
   end loop
   
   return crc
end function

--------------------------------------------------------------------------------
-- Calculate CRC16 for SD card data blocks (bit-by-bit method)
-- Input: data array and length
-- Output: 16-bit CRC value
--------------------------------------------------------------------------------
function crc16_sd_calculate_bitwise(byte in data[], word in length) return word is
   var word crc = 0
   var word i
   var byte j
   
   for length using i loop
      crc = crc ^ (word(data[i]) << 8)
      for 8 using j loop
         if (crc & 0x8000) != 0 then
            crc = (crc << 1) ^ CRC16_POLYNOMIAL
         else
            crc = crc << 1
         end if
      end loop
   end loop
   
   return crc
end function

--------------------------------------------------------------------------------
-- Calculate CRC7 for a single command frame (6 bytes: command + argument + crc)
-- Input: command byte, 32-bit argument
-- Output: 7-bit CRC value
--------------------------------------------------------------------------------
function crc7_sd_command(byte in cmd, dword in arg) return byte is
   var byte command_frame[5]
   
   command_frame[0] = 0x40 | (cmd & 0x3F)  -- Start bit + command
   command_frame[1] = byte((arg >> 24) & 0xFF)  -- Argument byte 3
   command_frame[2] = byte((arg >> 16) & 0xFF)  -- Argument byte 2
   command_frame[3] = byte((arg >> 8) & 0xFF)   -- Argument byte 1
   command_frame[4] = byte(arg & 0xFF)          -- Argument byte 0
   
   return crc7_sd_calculate(command_frame, 5)
end function

--------------------------------------------------------------------------------
-- Verify CRC7 for a received command response
-- Input: response data array and length
-- Output: TRUE if CRC is valid, FALSE otherwise
--------------------------------------------------------------------------------
function crc7_sd_verify(byte in data[], byte in length) return bit is
   var byte calculated_crc
   var byte received_crc
   
   -- Clear any previous errors
   crc_clear_error()
   
   -- Validate input parameters
   if length < 2 then
      crc_set_error(CRC_ERROR_INVALID_PARAMETER)
      return FALSE
   end if
   
   -- Calculate CRC for all bytes except the last one (which contains CRC)
   calculated_crc = crc7_sd_calculate(data, length - 1)
   
   -- Check if CRC calculation had errors
   if crc_has_error == TRUE then
      crc_set_error(CRC_ERROR_VERIFICATION_FAILED)
      return FALSE
   end if
   
   -- Extract received CRC (7 bits, right-shifted by 1)
   received_crc = (data[length - 1] >> 1) & 0x7F
   
   -- Compare calculated and received CRC
   if (calculated_crc >> 1) != received_crc then
      crc_set_error(CRC_ERROR_VERIFICATION_FAILED)
      return FALSE
   end if
   
   return TRUE
end function

--------------------------------------------------------------------------------
-- Calculate CRC16 for a single byte (for incremental calculation)
-- Input: current CRC value and new byte
-- Output: updated CRC value
--------------------------------------------------------------------------------
function crc16_sd_calculate_byte(word in current_crc, byte in data) return word is
   var word crc = current_crc
   var byte i
   
   -- Clear any previous errors
   crc_clear_error()
   
   -- Calculate CRC16 using bitwise method for single byte
   for 8 using i loop
      crc = crc << 1
      if ((crc >> 15) ^ ((data >> 7) & 0x01)) != 0 then
         crc = crc ^ CRC16_POLYNOMIAL
      end if
      data = data << 1
   end loop
   
   return crc
end function

--------------------------------------------------------------------------------
-- Verify CRC16 for a received data block
-- Input: data array, length, and received CRC
-- Output: TRUE if CRC is valid, FALSE otherwise
--------------------------------------------------------------------------------
function crc16_sd_verify(byte in data[], word in length, word in received_crc) return bit is
   var word calculated_crc
   
   -- Clear any previous errors
   crc_clear_error()
   
   -- Validate input parameters
   if length == 0 then
      crc_set_error(CRC_ERROR_INVALID_PARAMETER)
      return FALSE
   end if
   
   calculated_crc = crc16_sd_calculate(data, length)
   
   -- Check if CRC calculation had errors
   if crc_has_error == TRUE then
      crc_set_error(CRC_ERROR_VERIFICATION_FAILED)
      return FALSE
   end if
   
   -- Compare calculated and received CRC
   if calculated_crc != received_crc then
      crc_set_error(CRC_ERROR_VERIFICATION_FAILED)
      return FALSE
   end if
   
   return TRUE
end function

--------------------------------------------------------------------------------
-- Calculate CRC7 for CMD0 (GO_IDLE_STATE) command
-- CMD0 has a special CRC value of 0x95
--------------------------------------------------------------------------------
function crc7_sd_cmd0() return byte is
   var byte cmd0_data[5] = {0x40, 0x00, 0x00, 0x00, 0x00}
   return crc7_sd_calculate(cmd0_data, 5)
end function

--------------------------------------------------------------------------------
-- Calculate CRC7 for CMD8 (SEND_IF_COND) command
-- CMD8 has a special CRC value of 0x87
--------------------------------------------------------------------------------
function crc7_sd_cmd8() return byte is
   var byte cmd8_data[5] = {0x48, 0x00, 0x00, 0x01, 0xAA}
   return crc7_sd_calculate(cmd8_data, 5)
end function

--------------------------------------------------------------------------------
-- Test CRC functions with known test vectors
-- This procedure can be used for debugging and verification
--------------------------------------------------------------------------------
procedure crc_test() is
   var byte test_data[] = {0x40, 0x00, 0x00, 0x00, 0x00}  -- CMD0 test
   var byte test_data16[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}
   var byte dummy_crc7
   var word dummy_crc16
   
   -- Test CRC7 calculation
   -- Expected result should be 0x95 for CMD0
   dummy_crc7 = crc7_sd_calculate(test_data, 5)
   
   -- Test CRC16 calculation
   -- This will give a valid CRC16 result
   dummy_crc16 = crc16_sd_calculate(test_data16, 8)
   
   -- Note: In a real implementation, you would verify these results
   -- against known test vectors from the SD card specification
   -- Variables dummy_crc7 and dummy_crc16 are used to avoid warnings
end procedure

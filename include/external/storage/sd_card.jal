-- Title: Library for communicating with SD memory cards
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2009..2022, all rights reserved.
-- Adapted-by: Rob Jansen + Matthew Schinkel
-- Compiler: 2.5r6
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: this library provides functions for SD memory cards.
--
-- Notes: SD card SPI mode is 1,1
--
--        This version works with standard capacity sd cards up to 4gb and
--        high capacity up to 32 gb. Extended Capacity up to 2TB
--        may be supported later on.
--
-- Sources:
-- SanDisk Secure Digital Card - http://www.cs.ucr.edu/~amitra/sdcard/ProdManualSDCardv1.9.pdf
-- How to use MMC/SDC - http://forums.parallax.com/forums/attach.aspx?a=32012
-- http://www.rjhcoding.com/avrc-sd-interface-3.php
--

-- Only PIC16 CPU's can handle buffers of 256, for the others we need a large array.
if (target_cpu == PIC_14H) | (target_cpu == PIC_14) then
   -- Use Large Array to set up the sector buffer
   const dword LARGE_ARRAY_3_SIZE = 256         -- choose number of array variables
   const dword LARGE_ARRAY_3_VARIABLE_SIZE = 1 -- choose bytes size of variables
   include large_array_3                    -- include the array library
   alias sd_sector_buffer_low is large_array_3

   const dword LARGE_ARRAY_4_SIZE = 256         -- choose number of array variables
   const dword LARGE_ARRAY_4_VARIABLE_SIZE = 1 -- choose bytes size of variables
   include large_array_4                    -- include the array library
   alias sd_sector_buffer_high is large_array_4
else
   -- PIC16 core. Fix a compatibility issue. compiler bug has been reported.
   if jal_build == 20110306 then
      --for jalv2 2.4o beta (compiled Mar  6 2011)
      var volatile byte sd_sector_buffer_low[256] -- 256 low bytes
      var volatile byte sd_sector_buffer_high[256] -- 256 high bytes
   else
      --for jalv2 2.4n and others
      var byte sd_sector_buffer_low[256] -- 256 low bytes
      var byte sd_sector_buffer_high[256] -- 256 high bytes
   end if
end if 

const word SD_BYTE_PER_SECTOR = 512

include print

-- Conditional CRC support for backwards compatibility
if defined(USE_CRC) then
   include sd_card_crc
end if

-- defaulting to MSSP1 if none of following aliases are previously defined
if !defined(spi_master_set_mode) then
   alias spi_master_set_mode is spi_master_hw_set_mode
end if
if !defined(spi_master_set_speed) then
   alias spi_master_set_speed is spi_master_hw_set_speed
end if

-- counters
var word sd_byte_count = 0
var word sd_sector_count = 0
var dword sd_sector_select

-- Basic Commands
const byte SD_GO_IDLE_STATE = 0
const byte SD_SEND_OP_COND = 1
const byte SD_SEND_IF_COND = 8  -- for SDHC only
const byte SD_SEND_CSD = 9      -- sd sends "Card Specific Data" standard or high capacity
const byte SD_SEND_CID = 10
const byte SD_STOP_TRANSMISSION = 12
const byte SD_SEND_STATUS = 13

-- Read Commands
const byte SD_SET_BLOCKLEN = 16
const byte SD_READ_SINGLE_BLOCK = 17
const byte SD_READ_MULTIPLE_BLOCK = 18

-- Write Commands
const byte SD_WRITE_BLOCK = 24
const byte SD_WRITE_MULTIPLE_BLOCK = 25
const byte SD_PROGRAM_CSD = 27

-- Write Protection Commands
const byte SD_SET_WRITE_PROT = 28
const byte SD_CLR_WRITE_PROT = 29
const byte SD_SEND_WRITE_PROT = 30

-- Erase Commands
const byte SD_ERASE_WR_BLK_START = 32
const byte SD_ERASE_WR_BLK_END = 33
const byte SD_ERASE = 38

-- Application Specific Commands
const byte SD_APP_CMD = 55 -- indicate that the next command is a application specific command
const byte SD_GEN_CMD = 56

-- Other Commands
const byte SD_READ_OCR = 58
const byte SD_CRC_ON_OFF = 59 -- default is off

-- application specific command, must write command 55 first
const byte SD_SD_STATUS = 13
const byte SD_SEND_NUM_WR_BLOCKS = 22
const byte SD_SET_WR_BLK_ERASE_COUNT = 23
const byte SD_SD_APP_OP_COND = 41
const byte SD_SET_CLR_CARD_DETECT = 42
const byte SD_SEND_SCR = 51

-- R1 RESPONSE BITS
const byte SD_IN_IDLE_STATE = 0
const byte SD_ERASE_RESET = 1
const byte SD_ILLEGAL_COMMAND = 2
const byte SD_COM_CRC_ERROR = 3
const byte SD_ERASE_SEQUENCE_ERROR = 4
const byte SD_ADDRESS_ERROR = 5
const byte SD_PARAMETER_ERROR = 6

-- constants for fat32 library
const PATA_HARD_DISK = 0
const SD_CARD = 1
const DATA_MEDIA = SD_CARD

-- misc variables
var bit sd_card_type = 0
var bit sd_has_init = 0
const bit SD_HIGH_CAPACITY = 0
const bit SD_STANDARD_CAPACITY = 1

-- error codes
-- if any are added, they should be added to sd_print_error()
var bit sd_has_error = 0
var word sd_error_details = 0
--
const byte SD_DEVICE_NOT_FOUND        = 0
const byte SD_TYPE_NOT_SUPPORTED      = 1
const byte SD_INIT_FAILURE            = 2
const byte SD_TIMED_OUT               = 3
const byte SD_COMMAND_TIME_OUT        = 4
const byte SD_COMMAND_NOT_SUPPORTED   = 5
const byte SD_READ_ERROR              = 6
const byte SD_WRITE_ERROR             = 7
const byte SD_CRC_ERROR               = 8
const byte SD_COMMAND_CRC_ERROR       = 9
const byte SD_DATA_CRC_ERROR          = 10

-- Read/write constants
const byte SD_READ = 0
const byte SD_WRITE = 1

-- carrier used to access SD-Card (pseudo-var dealing with SPI)
if !defined(spi_master) then
   alias spi_master is spi_master_hw
end if

-- set storage device
if !defined(STORAGE_DEVICE) then
   const STORAGE_DEVICE = SD_CARD
end if

-- give extra delay after writing.
-- may help to get old standard capacity cards working.
if !defined(SD_DELAY_AFTER_WRITE) then
   const SD_DELAY_AFTER_WRITE = FALSE
end if

-- Extra read & Write speed, takes up program memory, saves ram
if !defined(SD_READ_EXTRA_SPEED) then
   const SD_READ_EXTRA_SPEED = FALSE
end if
if !defined(SD_WRITE_EXTRA_SPEED) then
   const SD_WRITE_EXTRA_SPEED = FALSE
end if
if defined(SD_EXTRA_SPEED) then
   _warn "Please remove removed from your sample code."
end if

-- number of sectors variable
var dword sd_number_of_sectors -- number of sectors * 512 = sd card size
procedure sd_get_number_of_sectors() -- procedure prototype

-- prototype the init procedure.
procedure sd_init()




--------------------------------------------------------------------------------
-- Enable the sd card
--------------------------------------------------------------------------------
procedure sd_enable() is
   pragma inline
   spi_master = 0xFF
   sd_chip_select = low
   spi_master = 0xFF
end procedure

--------------------------------------------------------------------------------
-- Disable the sd card
--------------------------------------------------------------------------------
procedure sd_disable() is
   pragma inline
   sd_chip_select = high
   spi_master = 0xFF
end procedure

--------------------------------------------------------------------------------
-- Disable then enable the sd card
--------------------------------------------------------------------------------
procedure sd_toggle() is
   pragma inline
   sd_chip_select = high
   spi_master = 0xFF
   sd_chip_select = low
end procedure

--------------------------------------------------------------------------------
-- set sd_card error
--------------------------------------------------------------------------------
procedure sd_error'put(word in error) is
   var word error_bit = word(1) << error
   sd_error_details = sd_error_details | error_bit
   sd_has_error = 1
end procedure

--------------------------------------------------------------------------------
-- read sd card error (resets error status)
--------------------------------------------------------------------------------
function sd_error'get() return word is
   var word return_val = sd_error_details
   sd_error_details = 0
   return return_val
end function

--------------------------------------------------------------------------------
-- Report sd card error (does NOT reset error status)
--------------------------------------------------------------------------------
procedure sd_print_error(volatile byte out device) is
   if sd_error_details == 0 then
      print_string(device,"NO ERROR")
      print_crlf(device)
   else
      ;print_string(device,"ERROR: ")
      ;print_dword_bin(device,sd_error_details)
      ;print_crlf(device)

      if (sd_error_details & (word(1) << SD_DEVICE_NOT_FOUND )) > 0 then
         print_string(device,"SD_DEVICE_NOT_FOUND ")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_TYPE_NOT_SUPPORTED )) > 0 then
         print_string(device,"SD_TYPE_NOT_SUPPORTED ")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_INIT_FAILURE )) > 0 then
         print_string(device,"SD_INIT_FAILURE ")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_TIMED_OUT)) > 0 then
         print_string(device,"SD_TIMED_OUT")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_COMMAND_TIME_OUT)) > 0 then
         print_string(device,"SD_COMMAND_TIME_OUT")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_COMMAND_NOT_SUPPORTED)) > 0 then
         print_string(device,"SD_COMMAND_NOT_SUPPORTED")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_READ_ERROR)) > 0 then
         print_string(device,"SD_READ_ERROR")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_WRITE_ERROR)) > 0 then
         print_string(device,"SD_WRITE_ERROR")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_CRC_ERROR)) > 0 then
         print_string(device,"SD_CRC_ERROR")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_COMMAND_CRC_ERROR)) > 0 then
         print_string(device,"SD_COMMAND_CRC_ERROR")
         print_crlf(device)
      end if

      if (sd_error_details & (word(1) << SD_DATA_CRC_ERROR)) > 0 then
         print_string(device,"SD_DATA_CRC_ERROR")
         print_crlf(device)
      end if
   end if
end procedure

--------------------------------------------------------------------------------
-- Print R1 Response
--------------------------------------------------------------------------------
procedure sd_print_response(volatile byte out device,byte in response) is
   -- R1 RESPONSE BITS
   var bit IN_IDLE_STATE        at response : SD_IN_IDLE_STATE
   var bit ERASE_RESET          at response : SD_ERASE_RESET
   var bit ILLEGAL_COMMAND      at response : SD_ILLEGAL_COMMAND
   var bit COM_CRC_ERROR        at response : SD_COM_CRC_ERROR
   var bit ERASE_SEQUENCE_ERROR at response : SD_ERASE_SEQUENCE_ERROR
   var bit ADDRESS_ERROR        at response : SD_ADDRESS_ERROR
   var bit PARAMETER_ERROR      at response : SD_PARAMETER_ERROR

   if response == 0xFF then
      const byte str8[] = "Not a Repsonse(0xFF)"
      print_string(device, str8)
      print_crlf(device)
      return
   end if

   if response == 0xFE then
      const byte str9[] = "Not a Repsonse(0xFE)"
      print_string(device, str9)
      print_crlf(device)
   end if

   if response == 0 then
      const byte str0[] = "CARD_READY"
      print_string(device, str0)
      print_crlf(device)
   end if

   if IN_IDLE_STATE == TRUE then
      const byte str1[] = "IN_IDLE_STATE"
      print_string(device, str1)
      print_crlf(device)
   end if

   if ERASE_RESET == TRUE then
      const byte str2[] = "ERASE_RESET"
      print_string(device, str2)
      print_crlf(device)
   end if

   if ILLEGAL_COMMAND == TRUE then
      const byte str3[] = "ILLEGAL_COMMAND"
      print_string(device, str3)
      print_crlf(device)
   end if

   if COM_CRC_ERROR == TRUE then
      const byte str4[] = "COM_CRC_ERROR"
      print_string(device, str4)
      print_crlf(device)
   end if

   if ERASE_SEQUENCE_ERROR == TRUE then
      const byte str5[] = "ERASE_SEQUENCE_ERROR"
      print_string(device, str5)
      print_crlf(device)
   end if

   if ADDRESS_ERROR == TRUE then
      const byte str6[] = "ADDRESS_ERROR"
      print_string(device, str6)
      print_crlf(device)
   end if

   if PARAMETER_ERROR == TRUE then
      const byte str7[] = "PARAMETER_ERROR"
      print_string(device, str7)
      print_crlf(device)
   end if
end procedure

--------------------------------------------------------------------------------
-- send a command to the sd card (commands with 1 response only)
--------------------------------------------------------------------------------
procedure send_command(byte in command,dword in data, byte out response) is
   var byte parameters[4] at data
   var byte x
   
   sd_toggle()

   if defined(USE_CRC) then
      -- Enhanced CRC functionality
      var byte crc7_value
      
      -- Calculate proper CRC7 for the command
      -- For CMD0 and CMD8, use special hardcoded values as per SD specification
      if command == SD_GO_IDLE_STATE then
         crc7_value = crc7_sd_cmd0()  -- CMD0 CRC7
      elsif command == SD_SEND_IF_COND then
         crc7_value = crc7_sd_cmd8()  -- CMD8 CRC7
      else
         -- For other commands, calculate CRC7
         crc7_value = crc7_sd_command(command, data)
         
         -- Check for CRC calculation errors
         if crc_has_error == TRUE then
            sd_error_details = sd_error_details | (word(1) << SD_COMMAND_CRC_ERROR)
            sd_has_error = 1
            crc7_value = 0xFF  -- Use invalid CRC on error
         end if
      end if
      
      x = crc7_value
   else
      -- Original library behavior for backwards compatibility
      -- send a valid CRC byte only for set idle command
      -- right bit must always be 1 (stop bit)
      if command == SD_GO_IDLE_STATE then
         x = 0x95
      elsif command == SD_SEND_IF_COND then
         x = 0x87
      else
         x = 0xFF
      end if
   end if

   command = command | 64          -- left bits must be 01 (start bits)

   spi_master = 0xFF            -- send 8 clock pulses

   spi_master = command         -- send the command
   spi_master = parameters[3]   -- send command parameters
   spi_master = parameters[2]   -- send command parameters
   spi_master = parameters[1]   -- send command parameters
   spi_master = parameters[0]   -- send command parameters

   -- Send CRC7 value (calculated or hardcoded)
   spi_master = x

   -- Get a response from the card after each command
   var word step = 0
   forever loop
      response = spi_master
      if response != 0xFF then
         exit loop
      end if

      -- can take up to 100ms
      step = step + 1
      if step == 5000 then
         exit loop
      end if
   end loop
end procedure

--------------------------------------------------------------------------------
-- check if the sd card is ready after last command.
-- returns 1 if ready, 0 if not ready.
--------------------------------------------------------------------------------
function sd_ready() return byte is
   var byte response = 1
   var byte step = 0

   while response != 0 loop   -- wait till last command has been completed
      send_command(SD_SEND_OP_COND,0, response)

      -- check for timeout
      if step == 100 then
         sd_error_details = sd_error_details | (word(1) << SD_TIMED_OUT)
         sd_has_error = 1
         return 0
      end if
      step = step + 1
   end loop
   return 1
end function

;   --------------------------------------------------------------------------------
;   -- send SD_READ_IF_COND command
;   --------------------------------------------------------------------------------
;   function sd_read_if_cond() return byte is
;      sd_enable()   -- enable the sd card
;
;      var byte response,x
;      send_command(SD_SEND_IF_COND, 0x1AA, response)
;      print_byte_hex(serial_data,response)
;
;      print_byte_hex(serial_data,spi_master)
;      print_byte_hex(serial_data,spi_master)
;      print_byte_hex(serial_data,spi_master)
;      print_byte_hex(serial_data,spi_master)
;
;      ;x = spi_master
;      ;x = spi_master
;      ;x = spi_master
;      ;x = spi_master
;
;      spi_master = 0xFF            -- send 8 clock pulses
;
;      sd_disable   -- disable the sd card
;
;      return response
;   end function

--------------------------------------------------------------------------------
-- Check if SD card exists
--------------------------------------------------------------------------------
function sd_is_inserted() return bit is
   sd_has_error = 0
   sd_error_details = 0
   var byte response = 0           -- shows if sd card init is ok

   if defined(sd_force_spi_mode) == true then
      sd_force_spi_mode()
   end if

   pin_sdo = low
   pin_sdi = low
   pin_sck = low

   -- steps to set sd card to use SPI
   _usec_delay(1_000)        -- delay
   sd_disable     -- chip select high

   for 11 loop
      spi_master = 0xFF    -- send clock pulses (0xFF 10 times)
   end loop

   -- try to contact the sd card
   var byte count1 = 0
   while (response == 0) loop -- try 100 times
      _usec_delay(1000)      -- delay 1ms
      sd_enable()   -- enable the sd card
      _usec_delay(255)      -- delay 255us
      send_command(SD_GO_IDLE_STATE,0,response) -- command 0, Resets card to idle state, get a response
      sd_disable  -- disable the sd card
      count1 = count1 + 1    -- increment count
      if count1 == 100 then
         sd_error_details = sd_error_details | (word(1) << SD_INIT_FAILURE)
         sd_has_error = 1
         return
      end if
   end loop

   if response == 0xFF then
      sd_error_details = sd_error_details | (word(1) << SD_DEVICE_NOT_FOUND)
      sd_error_details = sd_error_details | (word(1) << SD_INIT_FAILURE)
      sd_has_error = 1
      sd_number_of_sectors = 0
      sd_has_init = 0

      -- set pins back to start state.
      pin_sdo = low
      pin_sdi = low
      pin_sck = low
      sd_disable

      return 0
   else
   
      if sd_has_init == 0 then
         sd_init()
         ;serial_data = "%"
      else
         ;var byte ignore_return_value = sd_ready() -- wait till card is ready
         ;serial_data = "*"
      end if

      return 1
   end if

end function

--------------------------------------------------------------------------------
-- initalize the sd card in SPI data transfer mode.
--------------------------------------------------------------------------------
procedure sd_init() is
   var byte response = 0 -- sd_card command response

   if defined(USE_CRC) then
      -- Initialize CRC lookup tables for faster calculation
      crc_init()
   end if
   
   sd_has_init = 1
   if !sd_is_inserted() then
      return
   end if

   
   sd_number_of_sectors = 0

   -- send SD_SEND_IF_COND command
   sd_enable()   -- enable the sd card
   send_command(SD_SEND_IF_COND, 0x1AA, response)
   ;print_byte_hex(serial_data,response)

   var bit illegal_command at response : SD_ILLEGAL_COMMAND
   if illegal_command == TRUE then -- SD CARD SPEC 1
      ;print_string(serial_data, "STANDARD CAPACITY\r\n")
      sd_card_type = SD_STANDARD_CAPACITY

      sd_enable()  -- enable the sd card

      if !sd_ready() == 0 then            -- wait till sd card is ready
         sd_error_details = sd_error_details | (word(1) << SD_INIT_FAILURE)
         sd_has_error = 1
         return
      end if

      sd_disable -- disable the sd card
      sd_get_number_of_sectors()

      return
   else -- SD CARD SPEC 2
      ;print_byte_hex(serial_data,spi_master)
      ;print_byte_hex(serial_data,spi_master)
      ;print_byte_hex(serial_data,spi_master)
      ;print_byte_hex(serial_data,spi_master)
      response = spi_master
      response = spi_master
      response = spi_master  ;0x01
      response = spi_master  ;0xAA
      sd_disable    -- disable the sd card

      if response == 0xAA then
         sd_enable()  -- enable the sd card

         -- check if it has completed init
         forever loop
            send_command(SD_APP_CMD, 0, response)
            send_command(SD_SD_APP_OP_COND,0x40_00_00_00, response)
            if response == 0 then
               exit loop
            end if
         end loop

         -- read OCR here
         send_command(SD_READ_OCR,0, response)
         if (spi_master & 0x40) > 0 then
            sd_card_type = SD_HIGH_CAPACITY
            ;print_string(serial_data, "HIGH CAPACITY\r\n")
         else -- sd card spec 2 standard capacity??
            sd_card_type = SD_STANDARD_CAPACITY
            ;print_string(serial_data, "STANDARD CAPACITY\r\n")
         end if
         response = spi_master
         response = spi_master
         response = spi_master

         -- set block size to 512
         send_command(SD_SET_BLOCKLEN,512, response)


         if !sd_ready() == 0 then            -- wait till sd card is ready
            sd_error_details = sd_error_details | (word(1) << SD_TIMED_OUT)
            sd_has_error = 1
         end if

         sd_disable  -- disable the sd card
      else
         sd_has_error = TRUE
         sd_disable  -- disable the sd card
         sd_get_number_of_sectors()
         return
      end if
   end if
   sd_get_number_of_sectors()
end procedure

--------------------------------------------------------------------------------
-- set the sd card to idle state
--------------------------------------------------------------------------------
procedure sd_set_idle() is
   sd_enable()  -- enable the sd card
   var byte response = 0
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
   sd_disable  -- disable the sd card
end procedure

--------------------------------------------------------------------------------
-- tell sd card you will be reading data from a specified sector
-- do not interupt read process by switching to another spi component
--------------------------------------------------------------------------------
procedure  sd_start_read(dword in address) is
   sd_sector_select = address

   -- put spi into mode
   if defined(sd_force_spi_mode) == true then
      sd_force_spi_mode()
   end if

   var byte response
   sd_enable()  -- enable the sd card
   if sd_card_type == SD_STANDARD_CAPACITY then
      address = address * SD_BYTE_PER_SECTOR -- make sd card sector addressable, sd cards are normally byte addressable.
   end if

   send_command(SD_READ_MULTIPLE_BLOCK,address,response) -- send read multi block command, ignore response.
   sd_byte_count = 0
   sd_sector_count = 0     -- reset count
end procedure


function sd_read_write_next_ready(byte in read_write) return byte is
   if sd_byte_count == 0 then            -- beginning of sector read
      var word count1 = 0
      while spi_master != 0xFE loop      -- wait till data is ready to read
         if count1 == 10000 then
            if read_write == SD_READ then
               sd_error = SD_READ_ERROR
            else
               sd_error = SD_WRITE_ERROR
            end if
            return 0
         end if
         count1 = count1 + 1
      end loop
   end if
   return 1
end function

--------------------------------------------------------------------------------
-- read 1 bytes from the sd card (pseudo var)
--------------------------------------------------------------------------------
function sd_data_byte'get() return byte is
   var byte x, data_byte

   if sd_read_write_next_ready(SD_READ) == FALSE then return end if -- return on read error

   data_byte = spi_master                -- get data byte

   sd_byte_count = sd_byte_count + 1     -- increment byte_count
   if sd_byte_count == SD_BYTE_PER_SECTOR then          -- end of sector read
      sd_byte_count = 0
      sd_sector_count = sd_sector_count + 1 -- increment sector number
      
      -- Read CRC16 for data block (discard for individual byte reads)
      x = spi_master                     -- get CRC16 high byte
      x = spi_master                     -- get CRC16 low byte
   end if

   return data_byte
end function



--------------------------------------------------------------------------------
-- tell sd card you are finished reading
-- needed to be the same as other mass media libs
--------------------------------------------------------------------------------
procedure sd_stop_read() is
   sd_set_idle()
   sd_disable  -- disable the sd card
end procedure

--------------------------------------------------------------------------------
-- send a read pulse to the sd card, go 1 bytes forward in current sector.
--------------------------------------------------------------------------------
procedure sd_read_pulse_byte(word in count1) is
   var byte x
   for count1 loop           -- loop specified number of times
      x = sd_data_byte       -- do a data read and ignore the incomming data
   end loop
end procedure

--------------------------------------------------------------------------------
-- tell sd card you will be writing data to a specified sector
-- must write 1 sector at a time, SD_BYTE_PER_SECTOR bytes
-- do not interupt write process by switching to another spi component
--------------------------------------------------------------------------------
procedure sd_start_write(dword in address) is

   -- put spi into mode
   if defined(sd_force_spi_mode) == true then
      sd_force_spi_mode()
   end if

   sd_toggle()
   
   if sd_card_type == SD_STANDARD_CAPACITY then
      address = address * SD_BYTE_PER_SECTOR -- make sd card sector addressable, sd cards are normally byte addressable.
   end if
   
   var byte response
   send_command(SD_WRITE_MULTIPLE_BLOCK,address,response) -- send read multi block command, ignore response.

   sd_byte_count = 0       -- reset count
   sd_sector_count = 0     -- reset count

end procedure

--------------------------------------------------------------------------------
-- write 1 byte to the sd card (pseudo var)
--------------------------------------------------------------------------------
procedure sd_data_byte'put(byte in data_byte) is
   var byte x

   if sd_byte_count == 0 then    -- beginning of sector write
      spi_master = 0xFC       -- send "stop transmission token" write multiple command
      ;spi_master = 0xFE      -- send "stop transmission token" for write single command
   end if

   spi_master = data_byte     -- send data byte

   sd_byte_count = sd_byte_count + 1  -- increment byte count

   if sd_byte_count == SD_BYTE_PER_SECTOR then -- end of sector write
      sd_byte_count = 0
      sd_sector_count = sd_sector_count + 1 -- increment sector count

      spi_master = 0xFF  -- send CRC16 high byte (not calculated for individual bytes)
      spi_master = 0xFF  -- send CRC16 low byte (not calculated for individual bytes)

      x = spi_master   -- wait for a response
      while x == 0 loop
         x = spi_master
      end loop
      -- response = 010 = data accepted
      -- response = 101 = crc error
      -- response = 110 = write error

      x = spi_master   -- wait for sd card to become ready
      while x != 0xFF loop
         x = spi_master
      end loop
   end if
end procedure

--------------------------------------------------------------------------------
-- write till sector is finished with input byte
-- data does not actually get written till you get to the end of the sector
--------------------------------------------------------------------------------
procedure sd_write_to_sector_end(byte in input_byte) is
   if !(sd_byte_count == 0) then
      var byte x
      var word y
      y = SD_BYTE_PER_SECTOR - sd_byte_count
      for y loop
         sd_data_byte = input_byte -- write 2 bytes, 0's as data
      end loop

      sd_byte_count = 0
      sd_sector_count = sd_sector_count + 1 -- increment sector count

      spi_master = 0xFF  -- send CRC16 high byte (not calculated for individual bytes)
      spi_master = 0xFF  -- send CRC16 low byte (not calculated for individual bytes)

      x = spi_master   -- wait for a response
      while x == 0 loop
         x = spi_master
      end loop
      -- response = 010 = data accepted
      -- response = 101 = crc error
      -- response = 110 = write error

      x = spi_master   -- wait for sd card to become ready
      while x != 0xFF loop
         x = spi_master
      end loop
   end if
end procedure

--------------------------------------------------------------------------------
-- tell sd card you are finished writing
--------------------------------------------------------------------------------
procedure sd_stop_write() is
   var byte response
   sd_write_to_sector_end(0) -- writes 0's till end of sector

   spi_master = 0xFD -- send "stop transmission token"

   send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission

   if SD_DELAY_AFTER_WRITE == TRUE then ; for trouble cards
      _usec_delay (50_000)
   else
      for 50000 loop ; use this in most cases
         send_command(SD_STOP_TRANSMISSION,0,response) -- stop current transmission
         if response != 0 then
            exit loop
         end if
      end loop
   end if
   sd_disable  -- disable the sd card
end procedure

;--------------------------------------------------------------------------------
;-- send a write pulse to the sd card by writing 2 bytes, 0's as data
;--------------------------------------------------------------------------------
procedure sd_write_pulse(byte in count1) is
   _warn "This procedure is obsolete. Please use sd_write_pulse_byte()"
   for count1 loop
      sd_data_byte = 0
      sd_data_byte = 0
   end loop
end procedure

;--------------------------------------------------------------------------------
;-- send a write pulse to the sd card by writing 1 bytes, 0 as data
;--------------------------------------------------------------------------------
procedure sd_write_pulse_byte(word in count1) is
   for count1 loop
      sd_data_byte = 0
   end loop
end procedure

---------------------------------------------------------------------------
-- define the sector buffer. Can be read as sd_sector_buffer[0-511]
---------------------------------------------------------------------------
function sd_sector_buffer'get(word in address) return byte is
   pragma inline
   if bit(address) == 0 then
      return sd_sector_buffer_low[address / 2]
   else
      return sd_sector_buffer_high[(address / 2)]
   end if
end function
--
procedure sd_sector_buffer'put(word in address, byte in data) is
   pragma inline
   if bit(address) == 0 then
      sd_sector_buffer_low[address / 2] = data
   else
      sd_sector_buffer_high[(address / 2)] = data
   end if
end procedure

---------------------------------------------------------------------------
-- Extra speed read procedure
---------------------------------------------------------------------------
procedure _sd_read_512() is
   sd_sector_buffer_low[0] = spi_master
   sd_sector_buffer_high[0] = spi_master
   sd_sector_buffer_low[1] = spi_master
   sd_sector_buffer_high[1] = spi_master
   sd_sector_buffer_low[2] = spi_master
   sd_sector_buffer_high[2] = spi_master
   sd_sector_buffer_low[3] = spi_master
   sd_sector_buffer_high[3] = spi_master
   sd_sector_buffer_low[4] = spi_master
   sd_sector_buffer_high[4] = spi_master
   sd_sector_buffer_low[5] = spi_master
   sd_sector_buffer_high[5] = spi_master
   sd_sector_buffer_low[6] = spi_master
   sd_sector_buffer_high[6] = spi_master
   sd_sector_buffer_low[7] = spi_master
   sd_sector_buffer_high[7] = spi_master
   sd_sector_buffer_low[8] = spi_master
   sd_sector_buffer_high[8] = spi_master
   sd_sector_buffer_low[9] = spi_master
   sd_sector_buffer_high[9] = spi_master
   sd_sector_buffer_low[10] = spi_master
   sd_sector_buffer_high[10] = spi_master
   sd_sector_buffer_low[11] = spi_master
   sd_sector_buffer_high[11] = spi_master
   sd_sector_buffer_low[12] = spi_master
   sd_sector_buffer_high[12] = spi_master
   sd_sector_buffer_low[13] = spi_master
   sd_sector_buffer_high[13] = spi_master
   sd_sector_buffer_low[14] = spi_master
   sd_sector_buffer_high[14] = spi_master
   sd_sector_buffer_low[15] = spi_master
   sd_sector_buffer_high[15] = spi_master
   sd_sector_buffer_low[16] = spi_master
   sd_sector_buffer_high[16] = spi_master
   sd_sector_buffer_low[17] = spi_master
   sd_sector_buffer_high[17] = spi_master
   sd_sector_buffer_low[18] = spi_master
   sd_sector_buffer_high[18] = spi_master
   sd_sector_buffer_low[19] = spi_master
   sd_sector_buffer_high[19] = spi_master
   sd_sector_buffer_low[20] = spi_master
   sd_sector_buffer_high[20] = spi_master
   sd_sector_buffer_low[21] = spi_master
   sd_sector_buffer_high[21] = spi_master
   sd_sector_buffer_low[22] = spi_master
   sd_sector_buffer_high[22] = spi_master
   sd_sector_buffer_low[23] = spi_master
   sd_sector_buffer_high[23] = spi_master
   sd_sector_buffer_low[24] = spi_master
   sd_sector_buffer_high[24] = spi_master
   sd_sector_buffer_low[25] = spi_master
   sd_sector_buffer_high[25] = spi_master
   sd_sector_buffer_low[26] = spi_master
   sd_sector_buffer_high[26] = spi_master
   sd_sector_buffer_low[27] = spi_master
   sd_sector_buffer_high[27] = spi_master
   sd_sector_buffer_low[28] = spi_master
   sd_sector_buffer_high[28] = spi_master
   sd_sector_buffer_low[29] = spi_master
   sd_sector_buffer_high[29] = spi_master
   sd_sector_buffer_low[30] = spi_master
   sd_sector_buffer_high[30] = spi_master
   sd_sector_buffer_low[31] = spi_master
   sd_sector_buffer_high[31] = spi_master
   sd_sector_buffer_low[32] = spi_master
   sd_sector_buffer_high[32] = spi_master
   sd_sector_buffer_low[33] = spi_master
   sd_sector_buffer_high[33] = spi_master
   sd_sector_buffer_low[34] = spi_master
   sd_sector_buffer_high[34] = spi_master
   sd_sector_buffer_low[35] = spi_master
   sd_sector_buffer_high[35] = spi_master
   sd_sector_buffer_low[36] = spi_master
   sd_sector_buffer_high[36] = spi_master
   sd_sector_buffer_low[37] = spi_master
   sd_sector_buffer_high[37] = spi_master
   sd_sector_buffer_low[38] = spi_master
   sd_sector_buffer_high[38] = spi_master
   sd_sector_buffer_low[39] = spi_master
   sd_sector_buffer_high[39] = spi_master
   sd_sector_buffer_low[40] = spi_master
   sd_sector_buffer_high[40] = spi_master
   sd_sector_buffer_low[41] = spi_master
   sd_sector_buffer_high[41] = spi_master
   sd_sector_buffer_low[42] = spi_master
   sd_sector_buffer_high[42] = spi_master
   sd_sector_buffer_low[43] = spi_master
   sd_sector_buffer_high[43] = spi_master
   sd_sector_buffer_low[44] = spi_master
   sd_sector_buffer_high[44] = spi_master
   sd_sector_buffer_low[45] = spi_master
   sd_sector_buffer_high[45] = spi_master
   sd_sector_buffer_low[46] = spi_master
   sd_sector_buffer_high[46] = spi_master
   sd_sector_buffer_low[47] = spi_master
   sd_sector_buffer_high[47] = spi_master
   sd_sector_buffer_low[48] = spi_master
   sd_sector_buffer_high[48] = spi_master
   sd_sector_buffer_low[49] = spi_master
   sd_sector_buffer_high[49] = spi_master
   sd_sector_buffer_low[50] = spi_master
   sd_sector_buffer_high[50] = spi_master
   sd_sector_buffer_low[51] = spi_master
   sd_sector_buffer_high[51] = spi_master
   sd_sector_buffer_low[52] = spi_master
   sd_sector_buffer_high[52] = spi_master
   sd_sector_buffer_low[53] = spi_master
   sd_sector_buffer_high[53] = spi_master
   sd_sector_buffer_low[54] = spi_master
   sd_sector_buffer_high[54] = spi_master
   sd_sector_buffer_low[55] = spi_master
   sd_sector_buffer_high[55] = spi_master
   sd_sector_buffer_low[56] = spi_master
   sd_sector_buffer_high[56] = spi_master
   sd_sector_buffer_low[57] = spi_master
   sd_sector_buffer_high[57] = spi_master
   sd_sector_buffer_low[58] = spi_master
   sd_sector_buffer_high[58] = spi_master
   sd_sector_buffer_low[59] = spi_master
   sd_sector_buffer_high[59] = spi_master
   sd_sector_buffer_low[60] = spi_master
   sd_sector_buffer_high[60] = spi_master
   sd_sector_buffer_low[61] = spi_master
   sd_sector_buffer_high[61] = spi_master
   sd_sector_buffer_low[62] = spi_master
   sd_sector_buffer_high[62] = spi_master
   sd_sector_buffer_low[63] = spi_master
   sd_sector_buffer_high[63] = spi_master
   sd_sector_buffer_low[64] = spi_master
   sd_sector_buffer_high[64] = spi_master
   sd_sector_buffer_low[65] = spi_master
   sd_sector_buffer_high[65] = spi_master
   sd_sector_buffer_low[66] = spi_master
   sd_sector_buffer_high[66] = spi_master
   sd_sector_buffer_low[67] = spi_master
   sd_sector_buffer_high[67] = spi_master
   sd_sector_buffer_low[68] = spi_master
   sd_sector_buffer_high[68] = spi_master
   sd_sector_buffer_low[69] = spi_master
   sd_sector_buffer_high[69] = spi_master
   sd_sector_buffer_low[70] = spi_master
   sd_sector_buffer_high[70] = spi_master
   sd_sector_buffer_low[71] = spi_master
   sd_sector_buffer_high[71] = spi_master
   sd_sector_buffer_low[72] = spi_master
   sd_sector_buffer_high[72] = spi_master
   sd_sector_buffer_low[73] = spi_master
   sd_sector_buffer_high[73] = spi_master
   sd_sector_buffer_low[74] = spi_master
   sd_sector_buffer_high[74] = spi_master
   sd_sector_buffer_low[75] = spi_master
   sd_sector_buffer_high[75] = spi_master
   sd_sector_buffer_low[76] = spi_master
   sd_sector_buffer_high[76] = spi_master
   sd_sector_buffer_low[77] = spi_master
   sd_sector_buffer_high[77] = spi_master
   sd_sector_buffer_low[78] = spi_master
   sd_sector_buffer_high[78] = spi_master
   sd_sector_buffer_low[79] = spi_master
   sd_sector_buffer_high[79] = spi_master
   sd_sector_buffer_low[80] = spi_master
   sd_sector_buffer_high[80] = spi_master
   sd_sector_buffer_low[81] = spi_master
   sd_sector_buffer_high[81] = spi_master
   sd_sector_buffer_low[82] = spi_master
   sd_sector_buffer_high[82] = spi_master
   sd_sector_buffer_low[83] = spi_master
   sd_sector_buffer_high[83] = spi_master
   sd_sector_buffer_low[84] = spi_master
   sd_sector_buffer_high[84] = spi_master
   sd_sector_buffer_low[85] = spi_master
   sd_sector_buffer_high[85] = spi_master
   sd_sector_buffer_low[86] = spi_master
   sd_sector_buffer_high[86] = spi_master
   sd_sector_buffer_low[87] = spi_master
   sd_sector_buffer_high[87] = spi_master
   sd_sector_buffer_low[88] = spi_master
   sd_sector_buffer_high[88] = spi_master
   sd_sector_buffer_low[89] = spi_master
   sd_sector_buffer_high[89] = spi_master
   sd_sector_buffer_low[90] = spi_master
   sd_sector_buffer_high[90] = spi_master
   sd_sector_buffer_low[91] = spi_master
   sd_sector_buffer_high[91] = spi_master
   sd_sector_buffer_low[92] = spi_master
   sd_sector_buffer_high[92] = spi_master
   sd_sector_buffer_low[93] = spi_master
   sd_sector_buffer_high[93] = spi_master
   sd_sector_buffer_low[94] = spi_master
   sd_sector_buffer_high[94] = spi_master
   sd_sector_buffer_low[95] = spi_master
   sd_sector_buffer_high[95] = spi_master
   sd_sector_buffer_low[96] = spi_master
   sd_sector_buffer_high[96] = spi_master
   sd_sector_buffer_low[97] = spi_master
   sd_sector_buffer_high[97] = spi_master
   sd_sector_buffer_low[98] = spi_master
   sd_sector_buffer_high[98] = spi_master
   sd_sector_buffer_low[99] = spi_master
   sd_sector_buffer_high[99] = spi_master
   sd_sector_buffer_low[100] = spi_master
   sd_sector_buffer_high[100] = spi_master
   sd_sector_buffer_low[101] = spi_master
   sd_sector_buffer_high[101] = spi_master
   sd_sector_buffer_low[102] = spi_master
   sd_sector_buffer_high[102] = spi_master
   sd_sector_buffer_low[103] = spi_master
   sd_sector_buffer_high[103] = spi_master
   sd_sector_buffer_low[104] = spi_master
   sd_sector_buffer_high[104] = spi_master
   sd_sector_buffer_low[105] = spi_master
   sd_sector_buffer_high[105] = spi_master
   sd_sector_buffer_low[106] = spi_master
   sd_sector_buffer_high[106] = spi_master
   sd_sector_buffer_low[107] = spi_master
   sd_sector_buffer_high[107] = spi_master
   sd_sector_buffer_low[108] = spi_master
   sd_sector_buffer_high[108] = spi_master
   sd_sector_buffer_low[109] = spi_master
   sd_sector_buffer_high[109] = spi_master
   sd_sector_buffer_low[110] = spi_master
   sd_sector_buffer_high[110] = spi_master
   sd_sector_buffer_low[111] = spi_master
   sd_sector_buffer_high[111] = spi_master
   sd_sector_buffer_low[112] = spi_master
   sd_sector_buffer_high[112] = spi_master
   sd_sector_buffer_low[113] = spi_master
   sd_sector_buffer_high[113] = spi_master
   sd_sector_buffer_low[114] = spi_master
   sd_sector_buffer_high[114] = spi_master
   sd_sector_buffer_low[115] = spi_master
   sd_sector_buffer_high[115] = spi_master
   sd_sector_buffer_low[116] = spi_master
   sd_sector_buffer_high[116] = spi_master
   sd_sector_buffer_low[117] = spi_master
   sd_sector_buffer_high[117] = spi_master
   sd_sector_buffer_low[118] = spi_master
   sd_sector_buffer_high[118] = spi_master
   sd_sector_buffer_low[119] = spi_master
   sd_sector_buffer_high[119] = spi_master
   sd_sector_buffer_low[120] = spi_master
   sd_sector_buffer_high[120] = spi_master
   sd_sector_buffer_low[121] = spi_master
   sd_sector_buffer_high[121] = spi_master
   sd_sector_buffer_low[122] = spi_master
   sd_sector_buffer_high[122] = spi_master
   sd_sector_buffer_low[123] = spi_master
   sd_sector_buffer_high[123] = spi_master
   sd_sector_buffer_low[124] = spi_master
   sd_sector_buffer_high[124] = spi_master
   sd_sector_buffer_low[125] = spi_master
   sd_sector_buffer_high[125] = spi_master
   sd_sector_buffer_low[126] = spi_master
   sd_sector_buffer_high[126] = spi_master
   sd_sector_buffer_low[127] = spi_master
   sd_sector_buffer_high[127] = spi_master
   sd_sector_buffer_low[128] = spi_master
   sd_sector_buffer_high[128] = spi_master
   sd_sector_buffer_low[129] = spi_master
   sd_sector_buffer_high[129] = spi_master
   sd_sector_buffer_low[130] = spi_master
   sd_sector_buffer_high[130] = spi_master
   sd_sector_buffer_low[131] = spi_master
   sd_sector_buffer_high[131] = spi_master
   sd_sector_buffer_low[132] = spi_master
   sd_sector_buffer_high[132] = spi_master
   sd_sector_buffer_low[133] = spi_master
   sd_sector_buffer_high[133] = spi_master
   sd_sector_buffer_low[134] = spi_master
   sd_sector_buffer_high[134] = spi_master
   sd_sector_buffer_low[135] = spi_master
   sd_sector_buffer_high[135] = spi_master
   sd_sector_buffer_low[136] = spi_master
   sd_sector_buffer_high[136] = spi_master
   sd_sector_buffer_low[137] = spi_master
   sd_sector_buffer_high[137] = spi_master
   sd_sector_buffer_low[138] = spi_master
   sd_sector_buffer_high[138] = spi_master
   sd_sector_buffer_low[139] = spi_master
   sd_sector_buffer_high[139] = spi_master
   sd_sector_buffer_low[140] = spi_master
   sd_sector_buffer_high[140] = spi_master
   sd_sector_buffer_low[141] = spi_master
   sd_sector_buffer_high[141] = spi_master
   sd_sector_buffer_low[142] = spi_master
   sd_sector_buffer_high[142] = spi_master
   sd_sector_buffer_low[143] = spi_master
   sd_sector_buffer_high[143] = spi_master
   sd_sector_buffer_low[144] = spi_master
   sd_sector_buffer_high[144] = spi_master
   sd_sector_buffer_low[145] = spi_master
   sd_sector_buffer_high[145] = spi_master
   sd_sector_buffer_low[146] = spi_master
   sd_sector_buffer_high[146] = spi_master
   sd_sector_buffer_low[147] = spi_master
   sd_sector_buffer_high[147] = spi_master
   sd_sector_buffer_low[148] = spi_master
   sd_sector_buffer_high[148] = spi_master
   sd_sector_buffer_low[149] = spi_master
   sd_sector_buffer_high[149] = spi_master
   sd_sector_buffer_low[150] = spi_master
   sd_sector_buffer_high[150] = spi_master
   sd_sector_buffer_low[151] = spi_master
   sd_sector_buffer_high[151] = spi_master
   sd_sector_buffer_low[152] = spi_master
   sd_sector_buffer_high[152] = spi_master
   sd_sector_buffer_low[153] = spi_master
   sd_sector_buffer_high[153] = spi_master
   sd_sector_buffer_low[154] = spi_master
   sd_sector_buffer_high[154] = spi_master
   sd_sector_buffer_low[155] = spi_master
   sd_sector_buffer_high[155] = spi_master
   sd_sector_buffer_low[156] = spi_master
   sd_sector_buffer_high[156] = spi_master
   sd_sector_buffer_low[157] = spi_master
   sd_sector_buffer_high[157] = spi_master
   sd_sector_buffer_low[158] = spi_master
   sd_sector_buffer_high[158] = spi_master
   sd_sector_buffer_low[159] = spi_master
   sd_sector_buffer_high[159] = spi_master
   sd_sector_buffer_low[160] = spi_master
   sd_sector_buffer_high[160] = spi_master
   sd_sector_buffer_low[161] = spi_master
   sd_sector_buffer_high[161] = spi_master
   sd_sector_buffer_low[162] = spi_master
   sd_sector_buffer_high[162] = spi_master
   sd_sector_buffer_low[163] = spi_master
   sd_sector_buffer_high[163] = spi_master
   sd_sector_buffer_low[164] = spi_master
   sd_sector_buffer_high[164] = spi_master
   sd_sector_buffer_low[165] = spi_master
   sd_sector_buffer_high[165] = spi_master
   sd_sector_buffer_low[166] = spi_master
   sd_sector_buffer_high[166] = spi_master
   sd_sector_buffer_low[167] = spi_master
   sd_sector_buffer_high[167] = spi_master
   sd_sector_buffer_low[168] = spi_master
   sd_sector_buffer_high[168] = spi_master
   sd_sector_buffer_low[169] = spi_master
   sd_sector_buffer_high[169] = spi_master
   sd_sector_buffer_low[170] = spi_master
   sd_sector_buffer_high[170] = spi_master
   sd_sector_buffer_low[171] = spi_master
   sd_sector_buffer_high[171] = spi_master
   sd_sector_buffer_low[172] = spi_master
   sd_sector_buffer_high[172] = spi_master
   sd_sector_buffer_low[173] = spi_master
   sd_sector_buffer_high[173] = spi_master
   sd_sector_buffer_low[174] = spi_master
   sd_sector_buffer_high[174] = spi_master
   sd_sector_buffer_low[175] = spi_master
   sd_sector_buffer_high[175] = spi_master
   sd_sector_buffer_low[176] = spi_master
   sd_sector_buffer_high[176] = spi_master
   sd_sector_buffer_low[177] = spi_master
   sd_sector_buffer_high[177] = spi_master
   sd_sector_buffer_low[178] = spi_master
   sd_sector_buffer_high[178] = spi_master
   sd_sector_buffer_low[179] = spi_master
   sd_sector_buffer_high[179] = spi_master
   sd_sector_buffer_low[180] = spi_master
   sd_sector_buffer_high[180] = spi_master
   sd_sector_buffer_low[181] = spi_master
   sd_sector_buffer_high[181] = spi_master
   sd_sector_buffer_low[182] = spi_master
   sd_sector_buffer_high[182] = spi_master
   sd_sector_buffer_low[183] = spi_master
   sd_sector_buffer_high[183] = spi_master
   sd_sector_buffer_low[184] = spi_master
   sd_sector_buffer_high[184] = spi_master
   sd_sector_buffer_low[185] = spi_master
   sd_sector_buffer_high[185] = spi_master
   sd_sector_buffer_low[186] = spi_master
   sd_sector_buffer_high[186] = spi_master
   sd_sector_buffer_low[187] = spi_master
   sd_sector_buffer_high[187] = spi_master
   sd_sector_buffer_low[188] = spi_master
   sd_sector_buffer_high[188] = spi_master
   sd_sector_buffer_low[189] = spi_master
   sd_sector_buffer_high[189] = spi_master
   sd_sector_buffer_low[190] = spi_master
   sd_sector_buffer_high[190] = spi_master
   sd_sector_buffer_low[191] = spi_master
   sd_sector_buffer_high[191] = spi_master
   sd_sector_buffer_low[192] = spi_master
   sd_sector_buffer_high[192] = spi_master
   sd_sector_buffer_low[193] = spi_master
   sd_sector_buffer_high[193] = spi_master
   sd_sector_buffer_low[194] = spi_master
   sd_sector_buffer_high[194] = spi_master
   sd_sector_buffer_low[195] = spi_master
   sd_sector_buffer_high[195] = spi_master
   sd_sector_buffer_low[196] = spi_master
   sd_sector_buffer_high[196] = spi_master
   sd_sector_buffer_low[197] = spi_master
   sd_sector_buffer_high[197] = spi_master
   sd_sector_buffer_low[198] = spi_master
   sd_sector_buffer_high[198] = spi_master
   sd_sector_buffer_low[199] = spi_master
   sd_sector_buffer_high[199] = spi_master
   sd_sector_buffer_low[200] = spi_master
   sd_sector_buffer_high[200] = spi_master
   sd_sector_buffer_low[201] = spi_master
   sd_sector_buffer_high[201] = spi_master
   sd_sector_buffer_low[202] = spi_master
   sd_sector_buffer_high[202] = spi_master
   sd_sector_buffer_low[203] = spi_master
   sd_sector_buffer_high[203] = spi_master
   sd_sector_buffer_low[204] = spi_master
   sd_sector_buffer_high[204] = spi_master
   sd_sector_buffer_low[205] = spi_master
   sd_sector_buffer_high[205] = spi_master
   sd_sector_buffer_low[206] = spi_master
   sd_sector_buffer_high[206] = spi_master
   sd_sector_buffer_low[207] = spi_master
   sd_sector_buffer_high[207] = spi_master
   sd_sector_buffer_low[208] = spi_master
   sd_sector_buffer_high[208] = spi_master
   sd_sector_buffer_low[209] = spi_master
   sd_sector_buffer_high[209] = spi_master
   sd_sector_buffer_low[210] = spi_master
   sd_sector_buffer_high[210] = spi_master
   sd_sector_buffer_low[211] = spi_master
   sd_sector_buffer_high[211] = spi_master
   sd_sector_buffer_low[212] = spi_master
   sd_sector_buffer_high[212] = spi_master
   sd_sector_buffer_low[213] = spi_master
   sd_sector_buffer_high[213] = spi_master
   sd_sector_buffer_low[214] = spi_master
   sd_sector_buffer_high[214] = spi_master
   sd_sector_buffer_low[215] = spi_master
   sd_sector_buffer_high[215] = spi_master
   sd_sector_buffer_low[216] = spi_master
   sd_sector_buffer_high[216] = spi_master
   sd_sector_buffer_low[217] = spi_master
   sd_sector_buffer_high[217] = spi_master
   sd_sector_buffer_low[218] = spi_master
   sd_sector_buffer_high[218] = spi_master
   sd_sector_buffer_low[219] = spi_master
   sd_sector_buffer_high[219] = spi_master
   sd_sector_buffer_low[220] = spi_master
   sd_sector_buffer_high[220] = spi_master
   sd_sector_buffer_low[221] = spi_master
   sd_sector_buffer_high[221] = spi_master
   sd_sector_buffer_low[222] = spi_master
   sd_sector_buffer_high[222] = spi_master
   sd_sector_buffer_low[223] = spi_master
   sd_sector_buffer_high[223] = spi_master
   sd_sector_buffer_low[224] = spi_master
   sd_sector_buffer_high[224] = spi_master
   sd_sector_buffer_low[225] = spi_master
   sd_sector_buffer_high[225] = spi_master
   sd_sector_buffer_low[226] = spi_master
   sd_sector_buffer_high[226] = spi_master
   sd_sector_buffer_low[227] = spi_master
   sd_sector_buffer_high[227] = spi_master
   sd_sector_buffer_low[228] = spi_master
   sd_sector_buffer_high[228] = spi_master
   sd_sector_buffer_low[229] = spi_master
   sd_sector_buffer_high[229] = spi_master
   sd_sector_buffer_low[230] = spi_master
   sd_sector_buffer_high[230] = spi_master
   sd_sector_buffer_low[231] = spi_master
   sd_sector_buffer_high[231] = spi_master
   sd_sector_buffer_low[232] = spi_master
   sd_sector_buffer_high[232] = spi_master
   sd_sector_buffer_low[233] = spi_master
   sd_sector_buffer_high[233] = spi_master
   sd_sector_buffer_low[234] = spi_master
   sd_sector_buffer_high[234] = spi_master
   sd_sector_buffer_low[235] = spi_master
   sd_sector_buffer_high[235] = spi_master
   sd_sector_buffer_low[236] = spi_master
   sd_sector_buffer_high[236] = spi_master
   sd_sector_buffer_low[237] = spi_master
   sd_sector_buffer_high[237] = spi_master
   sd_sector_buffer_low[238] = spi_master
   sd_sector_buffer_high[238] = spi_master
   sd_sector_buffer_low[239] = spi_master
   sd_sector_buffer_high[239] = spi_master
   sd_sector_buffer_low[240] = spi_master
   sd_sector_buffer_high[240] = spi_master
   sd_sector_buffer_low[241] = spi_master
   sd_sector_buffer_high[241] = spi_master
   sd_sector_buffer_low[242] = spi_master
   sd_sector_buffer_high[242] = spi_master
   sd_sector_buffer_low[243] = spi_master
   sd_sector_buffer_high[243] = spi_master
   sd_sector_buffer_low[244] = spi_master
   sd_sector_buffer_high[244] = spi_master
   sd_sector_buffer_low[245] = spi_master
   sd_sector_buffer_high[245] = spi_master
   sd_sector_buffer_low[246] = spi_master
   sd_sector_buffer_high[246] = spi_master
   sd_sector_buffer_low[247] = spi_master
   sd_sector_buffer_high[247] = spi_master
   sd_sector_buffer_low[248] = spi_master
   sd_sector_buffer_high[248] = spi_master
   sd_sector_buffer_low[249] = spi_master
   sd_sector_buffer_high[249] = spi_master
   sd_sector_buffer_low[250] = spi_master
   sd_sector_buffer_high[250] = spi_master
   sd_sector_buffer_low[251] = spi_master
   sd_sector_buffer_high[251] = spi_master
   sd_sector_buffer_low[252] = spi_master
   sd_sector_buffer_high[252] = spi_master
   sd_sector_buffer_low[253] = spi_master
   sd_sector_buffer_high[253] = spi_master
   sd_sector_buffer_low[254] = spi_master
   sd_sector_buffer_high[254] = spi_master
   sd_sector_buffer_low[255] = spi_master
   sd_sector_buffer_high[255] = spi_master
end procedure

--------------------------------------------------------------------------------
-- read one entire sector
--------------------------------------------------------------------------------
procedure sd_read_sector() is
   var byte x
   var word count1 = 0

   if sd_read_write_next_ready(SD_READ) == FALSE then return end if -- return on read error

   -- get sector data
   if defined(SD_READ_EXTRA_SPEED) == TRUE then
      if SD_READ_EXTRA_SPEED == TRUE then
         _sd_read_512()
      else
         for 256 using count1 loop
            -- get the data trough spi
            sd_sector_buffer_low[count1] = spi_master  -- get low data
            sd_sector_buffer_high[count1] = spi_master -- get high data
         end loop
      end if
   else
      for 256 using count1 loop
         -- get the data trough spi
         sd_sector_buffer_low[count1] = spi_master  -- get low data
         sd_sector_buffer_high[count1] = spi_master -- get high data
      end loop
   end if

   sd_sector_count = sd_sector_count + 1 -- increment sector number
   
   if defined(USE_CRC) then
      -- Enhanced CRC16 verification
      var word received_crc
      var word calculated_crc
      var byte crc_high
      var byte crc_low
      var bit crc_valid
      
      crc_high = spi_master              -- get CRC16 high byte
      crc_low = spi_master               -- get CRC16 low byte
      received_crc = (word(crc_high) << 8) | word(crc_low)
      
      -- Calculate CRC16 for the received data
      -- First calculate CRC for low 256 bytes
      calculated_crc = crc16_sd_calculate(sd_sector_buffer_low, 256)
      -- Then continue CRC calculation with high 256 bytes
      var word i
      for 256 using i loop
         calculated_crc = crc16_sd_calculate_byte(calculated_crc, sd_sector_buffer_high[i])
      end loop
      
      -- Verify CRC and handle errors
      crc_valid = (calculated_crc == received_crc)
      
      if crc_valid == FALSE then
         -- CRC error detected
         if crc_has_error == TRUE then
            -- CRC library error
            sd_error_details = sd_error_details | (word(1) << SD_CRC_ERROR)
            sd_has_error = 1
         else
            -- Data CRC mismatch
            sd_error_details = sd_error_details | (word(1) << SD_DATA_CRC_ERROR)
            sd_has_error = 1
         end if
      end if
   else
      -- Original library behavior - just discard CRC bytes
      var byte crc_discard
      crc_discard = spi_master           -- get CRC16 high byte
      crc_discard = spi_master           -- get CRC16 low byte
   end if

   ;sd_byte_count = sd_byte_count + 2       -- increment byte_count

   sd_sector_select = sd_sector_select + 1
end procedure


;------------------------------------------------------------------------------
; storage_read_callback prototype definition, for use in libs such as USB.
;------------------------------------------------------------------------------
if defined(SD_READ_EXTRA_SPEED) then
   if SD_READ_EXTRA_SPEED == TRUE then
      procedure storage_read_callback(word in chunk_size)
   end if
end if

if defined(SD_WRITE_EXTRA_SPEED) then
   if SD_WRITE_EXTRA_SPEED == TRUE then
      procedure storage_write_callback(word in chunk_size)
   end if
end if

;------------------------------------------------------------------------------
; read one entire sector with callback to storage_read_callback()
; for direct reading with spi_master. Make sure you call spi_master
; chunk_size times in your storage_read_callback().
; chunk_size must be a division of 512 (ex, chunk_size 64 is 512/8)
;------------------------------------------------------------------------------
procedure sd_read_sector_with_callback(word in chunk_size) is
   var byte x
   var byte count1

   if sd_read_write_next_ready(SD_READ) == FALSE then return end if -- return on read error

   sd_byte_count = sd_byte_count + chunk_size

;    get sector data
   if defined(SD_READ_EXTRA_SPEED) == TRUE then
      if SD_READ_EXTRA_SPEED == TRUE then
         storage_read_callback(chunk_size)
      else
         for chunk_size/2 using count1 loop
            -- get the data trough spi
            sd_sector_buffer_low[count1] = spi_master  -- get low data
            sd_sector_buffer_high[count1] = spi_master -- get high data
         end loop
      end if
   else
      for chunk_size/2 using count1 loop
         -- get the data trough spi
         sd_sector_buffer_low[count1] = spi_master  -- get low data
         sd_sector_buffer_high[count1] = spi_master -- get high data
      end loop
   end if


   if sd_byte_count == 512 then
      sd_sector_count = sd_sector_count + 1 -- increment sector number
      
      -- Read CRC16 for data block (discard for individual byte reads)
      x = spi_master                     -- get CRC16 high byte
      x = spi_master                     -- get CRC16 low byte

      ;sd_byte_count = sd_byte_count + 2       -- increment byte_count

      sd_sector_select = sd_sector_select + 1
   end if
end procedure



--------------------------------------------------------------------------------
-- read one entire sector at address
--------------------------------------------------------------------------------
procedure sd_read_sector_address(dword in address) is
   sd_start_read(address)
   sd_read_sector()
   sd_stop_read()
end procedure

---------------------------------------------------------------------------
-- Extra speed write procedure
---------------------------------------------------------------------------
procedure _sd_write_512() is
   spi_master = sd_sector_buffer_low[0]
   spi_master = sd_sector_buffer_high[0]
   spi_master = sd_sector_buffer_low[1]
   spi_master = sd_sector_buffer_high[1]
   spi_master = sd_sector_buffer_low[2]
   spi_master = sd_sector_buffer_high[2]
   spi_master = sd_sector_buffer_low[3]
   spi_master = sd_sector_buffer_high[3]
   spi_master = sd_sector_buffer_low[4]
   spi_master = sd_sector_buffer_high[4]
   spi_master = sd_sector_buffer_low[5]
   spi_master = sd_sector_buffer_high[5]
   spi_master = sd_sector_buffer_low[6]
   spi_master = sd_sector_buffer_high[6]
   spi_master = sd_sector_buffer_low[7]
   spi_master = sd_sector_buffer_high[7]
   spi_master = sd_sector_buffer_low[8]
   spi_master = sd_sector_buffer_high[8]
   spi_master = sd_sector_buffer_low[9]
   spi_master = sd_sector_buffer_high[9]
   spi_master = sd_sector_buffer_low[10]
   spi_master = sd_sector_buffer_high[10]
   spi_master = sd_sector_buffer_low[11]
   spi_master = sd_sector_buffer_high[11]
   spi_master = sd_sector_buffer_low[12]
   spi_master = sd_sector_buffer_high[12]
   spi_master = sd_sector_buffer_low[13]
   spi_master = sd_sector_buffer_high[13]
   spi_master = sd_sector_buffer_low[14]
   spi_master = sd_sector_buffer_high[14]
   spi_master = sd_sector_buffer_low[15]
   spi_master = sd_sector_buffer_high[15]
   spi_master = sd_sector_buffer_low[16]
   spi_master = sd_sector_buffer_high[16]
   spi_master = sd_sector_buffer_low[17]
   spi_master = sd_sector_buffer_high[17]
   spi_master = sd_sector_buffer_low[18]
   spi_master = sd_sector_buffer_high[18]
   spi_master = sd_sector_buffer_low[19]
   spi_master = sd_sector_buffer_high[19]
   spi_master = sd_sector_buffer_low[20]
   spi_master = sd_sector_buffer_high[20]
   spi_master = sd_sector_buffer_low[21]
   spi_master = sd_sector_buffer_high[21]
   spi_master = sd_sector_buffer_low[22]
   spi_master = sd_sector_buffer_high[22]
   spi_master = sd_sector_buffer_low[23]
   spi_master = sd_sector_buffer_high[23]
   spi_master = sd_sector_buffer_low[24]
   spi_master = sd_sector_buffer_high[24]
   spi_master = sd_sector_buffer_low[25]
   spi_master = sd_sector_buffer_high[25]
   spi_master = sd_sector_buffer_low[26]
   spi_master = sd_sector_buffer_high[26]
   spi_master = sd_sector_buffer_low[27]
   spi_master = sd_sector_buffer_high[27]
   spi_master = sd_sector_buffer_low[28]
   spi_master = sd_sector_buffer_high[28]
   spi_master = sd_sector_buffer_low[29]
   spi_master = sd_sector_buffer_high[29]
   spi_master = sd_sector_buffer_low[30]
   spi_master = sd_sector_buffer_high[30]
   spi_master = sd_sector_buffer_low[31]
   spi_master = sd_sector_buffer_high[31]
   spi_master = sd_sector_buffer_low[32]
   spi_master = sd_sector_buffer_high[32]
   spi_master = sd_sector_buffer_low[33]
   spi_master = sd_sector_buffer_high[33]
   spi_master = sd_sector_buffer_low[34]
   spi_master = sd_sector_buffer_high[34]
   spi_master = sd_sector_buffer_low[35]
   spi_master = sd_sector_buffer_high[35]
   spi_master = sd_sector_buffer_low[36]
   spi_master = sd_sector_buffer_high[36]
   spi_master = sd_sector_buffer_low[37]
   spi_master = sd_sector_buffer_high[37]
   spi_master = sd_sector_buffer_low[38]
   spi_master = sd_sector_buffer_high[38]
   spi_master = sd_sector_buffer_low[39]
   spi_master = sd_sector_buffer_high[39]
   spi_master = sd_sector_buffer_low[40]
   spi_master = sd_sector_buffer_high[40]
   spi_master = sd_sector_buffer_low[41]
   spi_master = sd_sector_buffer_high[41]
   spi_master = sd_sector_buffer_low[42]
   spi_master = sd_sector_buffer_high[42]
   spi_master = sd_sector_buffer_low[43]
   spi_master = sd_sector_buffer_high[43]
   spi_master = sd_sector_buffer_low[44]
   spi_master = sd_sector_buffer_high[44]
   spi_master = sd_sector_buffer_low[45]
   spi_master = sd_sector_buffer_high[45]
   spi_master = sd_sector_buffer_low[46]
   spi_master = sd_sector_buffer_high[46]
   spi_master = sd_sector_buffer_low[47]
   spi_master = sd_sector_buffer_high[47]
   spi_master = sd_sector_buffer_low[48]
   spi_master = sd_sector_buffer_high[48]
   spi_master = sd_sector_buffer_low[49]
   spi_master = sd_sector_buffer_high[49]
   spi_master = sd_sector_buffer_low[50]
   spi_master = sd_sector_buffer_high[50]
   spi_master = sd_sector_buffer_low[51]
   spi_master = sd_sector_buffer_high[51]
   spi_master = sd_sector_buffer_low[52]
   spi_master = sd_sector_buffer_high[52]
   spi_master = sd_sector_buffer_low[53]
   spi_master = sd_sector_buffer_high[53]
   spi_master = sd_sector_buffer_low[54]
   spi_master = sd_sector_buffer_high[54]
   spi_master = sd_sector_buffer_low[55]
   spi_master = sd_sector_buffer_high[55]
   spi_master = sd_sector_buffer_low[56]
   spi_master = sd_sector_buffer_high[56]
   spi_master = sd_sector_buffer_low[57]
   spi_master = sd_sector_buffer_high[57]
   spi_master = sd_sector_buffer_low[58]
   spi_master = sd_sector_buffer_high[58]
   spi_master = sd_sector_buffer_low[59]
   spi_master = sd_sector_buffer_high[59]
   spi_master = sd_sector_buffer_low[60]
   spi_master = sd_sector_buffer_high[60]
   spi_master = sd_sector_buffer_low[61]
   spi_master = sd_sector_buffer_high[61]
   spi_master = sd_sector_buffer_low[62]
   spi_master = sd_sector_buffer_high[62]
   spi_master = sd_sector_buffer_low[63]
   spi_master = sd_sector_buffer_high[63]
   spi_master = sd_sector_buffer_low[64]
   spi_master = sd_sector_buffer_high[64]
   spi_master = sd_sector_buffer_low[65]
   spi_master = sd_sector_buffer_high[65]
   spi_master = sd_sector_buffer_low[66]
   spi_master = sd_sector_buffer_high[66]
   spi_master = sd_sector_buffer_low[67]
   spi_master = sd_sector_buffer_high[67]
   spi_master = sd_sector_buffer_low[68]
   spi_master = sd_sector_buffer_high[68]
   spi_master = sd_sector_buffer_low[69]
   spi_master = sd_sector_buffer_high[69]
   spi_master = sd_sector_buffer_low[70]
   spi_master = sd_sector_buffer_high[70]
   spi_master = sd_sector_buffer_low[71]
   spi_master = sd_sector_buffer_high[71]
   spi_master = sd_sector_buffer_low[72]
   spi_master = sd_sector_buffer_high[72]
   spi_master = sd_sector_buffer_low[73]
   spi_master = sd_sector_buffer_high[73]
   spi_master = sd_sector_buffer_low[74]
   spi_master = sd_sector_buffer_high[74]
   spi_master = sd_sector_buffer_low[75]
   spi_master = sd_sector_buffer_high[75]
   spi_master = sd_sector_buffer_low[76]
   spi_master = sd_sector_buffer_high[76]
   spi_master = sd_sector_buffer_low[77]
   spi_master = sd_sector_buffer_high[77]
   spi_master = sd_sector_buffer_low[78]
   spi_master = sd_sector_buffer_high[78]
   spi_master = sd_sector_buffer_low[79]
   spi_master = sd_sector_buffer_high[79]
   spi_master = sd_sector_buffer_low[80]
   spi_master = sd_sector_buffer_high[80]
   spi_master = sd_sector_buffer_low[81]
   spi_master = sd_sector_buffer_high[81]
   spi_master = sd_sector_buffer_low[82]
   spi_master = sd_sector_buffer_high[82]
   spi_master = sd_sector_buffer_low[83]
   spi_master = sd_sector_buffer_high[83]
   spi_master = sd_sector_buffer_low[84]
   spi_master = sd_sector_buffer_high[84]
   spi_master = sd_sector_buffer_low[85]
   spi_master = sd_sector_buffer_high[85]
   spi_master = sd_sector_buffer_low[86]
   spi_master = sd_sector_buffer_high[86]
   spi_master = sd_sector_buffer_low[87]
   spi_master = sd_sector_buffer_high[87]
   spi_master = sd_sector_buffer_low[88]
   spi_master = sd_sector_buffer_high[88]
   spi_master = sd_sector_buffer_low[89]
   spi_master = sd_sector_buffer_high[89]
   spi_master = sd_sector_buffer_low[90]
   spi_master = sd_sector_buffer_high[90]
   spi_master = sd_sector_buffer_low[91]
   spi_master = sd_sector_buffer_high[91]
   spi_master = sd_sector_buffer_low[92]
   spi_master = sd_sector_buffer_high[92]
   spi_master = sd_sector_buffer_low[93]
   spi_master = sd_sector_buffer_high[93]
   spi_master = sd_sector_buffer_low[94]
   spi_master = sd_sector_buffer_high[94]
   spi_master = sd_sector_buffer_low[95]
   spi_master = sd_sector_buffer_high[95]
   spi_master = sd_sector_buffer_low[96]
   spi_master = sd_sector_buffer_high[96]
   spi_master = sd_sector_buffer_low[97]
   spi_master = sd_sector_buffer_high[97]
   spi_master = sd_sector_buffer_low[98]
   spi_master = sd_sector_buffer_high[98]
   spi_master = sd_sector_buffer_low[99]
   spi_master = sd_sector_buffer_high[99]
   spi_master = sd_sector_buffer_low[100]
   spi_master = sd_sector_buffer_high[100]
   spi_master = sd_sector_buffer_low[101]
   spi_master = sd_sector_buffer_high[101]
   spi_master = sd_sector_buffer_low[102]
   spi_master = sd_sector_buffer_high[102]
   spi_master = sd_sector_buffer_low[103]
   spi_master = sd_sector_buffer_high[103]
   spi_master = sd_sector_buffer_low[104]
   spi_master = sd_sector_buffer_high[104]
   spi_master = sd_sector_buffer_low[105]
   spi_master = sd_sector_buffer_high[105]
   spi_master = sd_sector_buffer_low[106]
   spi_master = sd_sector_buffer_high[106]
   spi_master = sd_sector_buffer_low[107]
   spi_master = sd_sector_buffer_high[107]
   spi_master = sd_sector_buffer_low[108]
   spi_master = sd_sector_buffer_high[108]
   spi_master = sd_sector_buffer_low[109]
   spi_master = sd_sector_buffer_high[109]
   spi_master = sd_sector_buffer_low[110]
   spi_master = sd_sector_buffer_high[110]
   spi_master = sd_sector_buffer_low[111]
   spi_master = sd_sector_buffer_high[111]
   spi_master = sd_sector_buffer_low[112]
   spi_master = sd_sector_buffer_high[112]
   spi_master = sd_sector_buffer_low[113]
   spi_master = sd_sector_buffer_high[113]
   spi_master = sd_sector_buffer_low[114]
   spi_master = sd_sector_buffer_high[114]
   spi_master = sd_sector_buffer_low[115]
   spi_master = sd_sector_buffer_high[115]
   spi_master = sd_sector_buffer_low[116]
   spi_master = sd_sector_buffer_high[116]
   spi_master = sd_sector_buffer_low[117]
   spi_master = sd_sector_buffer_high[117]
   spi_master = sd_sector_buffer_low[118]
   spi_master = sd_sector_buffer_high[118]
   spi_master = sd_sector_buffer_low[119]
   spi_master = sd_sector_buffer_high[119]
   spi_master = sd_sector_buffer_low[120]
   spi_master = sd_sector_buffer_high[120]
   spi_master = sd_sector_buffer_low[121]
   spi_master = sd_sector_buffer_high[121]
   spi_master = sd_sector_buffer_low[122]
   spi_master = sd_sector_buffer_high[122]
   spi_master = sd_sector_buffer_low[123]
   spi_master = sd_sector_buffer_high[123]
   spi_master = sd_sector_buffer_low[124]
   spi_master = sd_sector_buffer_high[124]
   spi_master = sd_sector_buffer_low[125]
   spi_master = sd_sector_buffer_high[125]
   spi_master = sd_sector_buffer_low[126]
   spi_master = sd_sector_buffer_high[126]
   spi_master = sd_sector_buffer_low[127]
   spi_master = sd_sector_buffer_high[127]
   spi_master = sd_sector_buffer_low[128]
   spi_master = sd_sector_buffer_high[128]
   spi_master = sd_sector_buffer_low[129]
   spi_master = sd_sector_buffer_high[129]
   spi_master = sd_sector_buffer_low[130]
   spi_master = sd_sector_buffer_high[130]
   spi_master = sd_sector_buffer_low[131]
   spi_master = sd_sector_buffer_high[131]
   spi_master = sd_sector_buffer_low[132]
   spi_master = sd_sector_buffer_high[132]
   spi_master = sd_sector_buffer_low[133]
   spi_master = sd_sector_buffer_high[133]
   spi_master = sd_sector_buffer_low[134]
   spi_master = sd_sector_buffer_high[134]
   spi_master = sd_sector_buffer_low[135]
   spi_master = sd_sector_buffer_high[135]
   spi_master = sd_sector_buffer_low[136]
   spi_master = sd_sector_buffer_high[136]
   spi_master = sd_sector_buffer_low[137]
   spi_master = sd_sector_buffer_high[137]
   spi_master = sd_sector_buffer_low[138]
   spi_master = sd_sector_buffer_high[138]
   spi_master = sd_sector_buffer_low[139]
   spi_master = sd_sector_buffer_high[139]
   spi_master = sd_sector_buffer_low[140]
   spi_master = sd_sector_buffer_high[140]
   spi_master = sd_sector_buffer_low[141]
   spi_master = sd_sector_buffer_high[141]
   spi_master = sd_sector_buffer_low[142]
   spi_master = sd_sector_buffer_high[142]
   spi_master = sd_sector_buffer_low[143]
   spi_master = sd_sector_buffer_high[143]
   spi_master = sd_sector_buffer_low[144]
   spi_master = sd_sector_buffer_high[144]
   spi_master = sd_sector_buffer_low[145]
   spi_master = sd_sector_buffer_high[145]
   spi_master = sd_sector_buffer_low[146]
   spi_master = sd_sector_buffer_high[146]
   spi_master = sd_sector_buffer_low[147]
   spi_master = sd_sector_buffer_high[147]
   spi_master = sd_sector_buffer_low[148]
   spi_master = sd_sector_buffer_high[148]
   spi_master = sd_sector_buffer_low[149]
   spi_master = sd_sector_buffer_high[149]
   spi_master = sd_sector_buffer_low[150]
   spi_master = sd_sector_buffer_high[150]
   spi_master = sd_sector_buffer_low[151]
   spi_master = sd_sector_buffer_high[151]
   spi_master = sd_sector_buffer_low[152]
   spi_master = sd_sector_buffer_high[152]
   spi_master = sd_sector_buffer_low[153]
   spi_master = sd_sector_buffer_high[153]
   spi_master = sd_sector_buffer_low[154]
   spi_master = sd_sector_buffer_high[154]
   spi_master = sd_sector_buffer_low[155]
   spi_master = sd_sector_buffer_high[155]
   spi_master = sd_sector_buffer_low[156]
   spi_master = sd_sector_buffer_high[156]
   spi_master = sd_sector_buffer_low[157]
   spi_master = sd_sector_buffer_high[157]
   spi_master = sd_sector_buffer_low[158]
   spi_master = sd_sector_buffer_high[158]
   spi_master = sd_sector_buffer_low[159]
   spi_master = sd_sector_buffer_high[159]
   spi_master = sd_sector_buffer_low[160]
   spi_master = sd_sector_buffer_high[160]
   spi_master = sd_sector_buffer_low[161]
   spi_master = sd_sector_buffer_high[161]
   spi_master = sd_sector_buffer_low[162]
   spi_master = sd_sector_buffer_high[162]
   spi_master = sd_sector_buffer_low[163]
   spi_master = sd_sector_buffer_high[163]
   spi_master = sd_sector_buffer_low[164]
   spi_master = sd_sector_buffer_high[164]
   spi_master = sd_sector_buffer_low[165]
   spi_master = sd_sector_buffer_high[165]
   spi_master = sd_sector_buffer_low[166]
   spi_master = sd_sector_buffer_high[166]
   spi_master = sd_sector_buffer_low[167]
   spi_master = sd_sector_buffer_high[167]
   spi_master = sd_sector_buffer_low[168]
   spi_master = sd_sector_buffer_high[168]
   spi_master = sd_sector_buffer_low[169]
   spi_master = sd_sector_buffer_high[169]
   spi_master = sd_sector_buffer_low[170]
   spi_master = sd_sector_buffer_high[170]
   spi_master = sd_sector_buffer_low[171]
   spi_master = sd_sector_buffer_high[171]
   spi_master = sd_sector_buffer_low[172]
   spi_master = sd_sector_buffer_high[172]
   spi_master = sd_sector_buffer_low[173]
   spi_master = sd_sector_buffer_high[173]
   spi_master = sd_sector_buffer_low[174]
   spi_master = sd_sector_buffer_high[174]
   spi_master = sd_sector_buffer_low[175]
   spi_master = sd_sector_buffer_high[175]
   spi_master = sd_sector_buffer_low[176]
   spi_master = sd_sector_buffer_high[176]
   spi_master = sd_sector_buffer_low[177]
   spi_master = sd_sector_buffer_high[177]
   spi_master = sd_sector_buffer_low[178]
   spi_master = sd_sector_buffer_high[178]
   spi_master = sd_sector_buffer_low[179]
   spi_master = sd_sector_buffer_high[179]
   spi_master = sd_sector_buffer_low[180]
   spi_master = sd_sector_buffer_high[180]
   spi_master = sd_sector_buffer_low[181]
   spi_master = sd_sector_buffer_high[181]
   spi_master = sd_sector_buffer_low[182]
   spi_master = sd_sector_buffer_high[182]
   spi_master = sd_sector_buffer_low[183]
   spi_master = sd_sector_buffer_high[183]
   spi_master = sd_sector_buffer_low[184]
   spi_master = sd_sector_buffer_high[184]
   spi_master = sd_sector_buffer_low[185]
   spi_master = sd_sector_buffer_high[185]
   spi_master = sd_sector_buffer_low[186]
   spi_master = sd_sector_buffer_high[186]
   spi_master = sd_sector_buffer_low[187]
   spi_master = sd_sector_buffer_high[187]
   spi_master = sd_sector_buffer_low[188]
   spi_master = sd_sector_buffer_high[188]
   spi_master = sd_sector_buffer_low[189]
   spi_master = sd_sector_buffer_high[189]
   spi_master = sd_sector_buffer_low[190]
   spi_master = sd_sector_buffer_high[190]
   spi_master = sd_sector_buffer_low[191]
   spi_master = sd_sector_buffer_high[191]
   spi_master = sd_sector_buffer_low[192]
   spi_master = sd_sector_buffer_high[192]
   spi_master = sd_sector_buffer_low[193]
   spi_master = sd_sector_buffer_high[193]
   spi_master = sd_sector_buffer_low[194]
   spi_master = sd_sector_buffer_high[194]
   spi_master = sd_sector_buffer_low[195]
   spi_master = sd_sector_buffer_high[195]
   spi_master = sd_sector_buffer_low[196]
   spi_master = sd_sector_buffer_high[196]
   spi_master = sd_sector_buffer_low[197]
   spi_master = sd_sector_buffer_high[197]
   spi_master = sd_sector_buffer_low[198]
   spi_master = sd_sector_buffer_high[198]
   spi_master = sd_sector_buffer_low[199]
   spi_master = sd_sector_buffer_high[199]
   spi_master = sd_sector_buffer_low[200]
   spi_master = sd_sector_buffer_high[200]
   spi_master = sd_sector_buffer_low[201]
   spi_master = sd_sector_buffer_high[201]
   spi_master = sd_sector_buffer_low[202]
   spi_master = sd_sector_buffer_high[202]
   spi_master = sd_sector_buffer_low[203]
   spi_master = sd_sector_buffer_high[203]
   spi_master = sd_sector_buffer_low[204]
   spi_master = sd_sector_buffer_high[204]
   spi_master = sd_sector_buffer_low[205]
   spi_master = sd_sector_buffer_high[205]
   spi_master = sd_sector_buffer_low[206]
   spi_master = sd_sector_buffer_high[206]
   spi_master = sd_sector_buffer_low[207]
   spi_master = sd_sector_buffer_high[207]
   spi_master = sd_sector_buffer_low[208]
   spi_master = sd_sector_buffer_high[208]
   spi_master = sd_sector_buffer_low[209]
   spi_master = sd_sector_buffer_high[209]
   spi_master = sd_sector_buffer_low[210]
   spi_master = sd_sector_buffer_high[210]
   spi_master = sd_sector_buffer_low[211]
   spi_master = sd_sector_buffer_high[211]
   spi_master = sd_sector_buffer_low[212]
   spi_master = sd_sector_buffer_high[212]
   spi_master = sd_sector_buffer_low[213]
   spi_master = sd_sector_buffer_high[213]
   spi_master = sd_sector_buffer_low[214]
   spi_master = sd_sector_buffer_high[214]
   spi_master = sd_sector_buffer_low[215]
   spi_master = sd_sector_buffer_high[215]
   spi_master = sd_sector_buffer_low[216]
   spi_master = sd_sector_buffer_high[216]
   spi_master = sd_sector_buffer_low[217]
   spi_master = sd_sector_buffer_high[217]
   spi_master = sd_sector_buffer_low[218]
   spi_master = sd_sector_buffer_high[218]
   spi_master = sd_sector_buffer_low[219]
   spi_master = sd_sector_buffer_high[219]
   spi_master = sd_sector_buffer_low[220]
   spi_master = sd_sector_buffer_high[220]
   spi_master = sd_sector_buffer_low[221]
   spi_master = sd_sector_buffer_high[221]
   spi_master = sd_sector_buffer_low[222]
   spi_master = sd_sector_buffer_high[222]
   spi_master = sd_sector_buffer_low[223]
   spi_master = sd_sector_buffer_high[223]
   spi_master = sd_sector_buffer_low[224]
   spi_master = sd_sector_buffer_high[224]
   spi_master = sd_sector_buffer_low[225]
   spi_master = sd_sector_buffer_high[225]
   spi_master = sd_sector_buffer_low[226]
   spi_master = sd_sector_buffer_high[226]
   spi_master = sd_sector_buffer_low[227]
   spi_master = sd_sector_buffer_high[227]
   spi_master = sd_sector_buffer_low[228]
   spi_master = sd_sector_buffer_high[228]
   spi_master = sd_sector_buffer_low[229]
   spi_master = sd_sector_buffer_high[229]
   spi_master = sd_sector_buffer_low[230]
   spi_master = sd_sector_buffer_high[230]
   spi_master = sd_sector_buffer_low[231]
   spi_master = sd_sector_buffer_high[231]
   spi_master = sd_sector_buffer_low[232]
   spi_master = sd_sector_buffer_high[232]
   spi_master = sd_sector_buffer_low[233]
   spi_master = sd_sector_buffer_high[233]
   spi_master = sd_sector_buffer_low[234]
   spi_master = sd_sector_buffer_high[234]
   spi_master = sd_sector_buffer_low[235]
   spi_master = sd_sector_buffer_high[235]
   spi_master = sd_sector_buffer_low[236]
   spi_master = sd_sector_buffer_high[236]
   spi_master = sd_sector_buffer_low[237]
   spi_master = sd_sector_buffer_high[237]
   spi_master = sd_sector_buffer_low[238]
   spi_master = sd_sector_buffer_high[238]
   spi_master = sd_sector_buffer_low[239]
   spi_master = sd_sector_buffer_high[239]
   spi_master = sd_sector_buffer_low[240]
   spi_master = sd_sector_buffer_high[240]
   spi_master = sd_sector_buffer_low[241]
   spi_master = sd_sector_buffer_high[241]
   spi_master = sd_sector_buffer_low[242]
   spi_master = sd_sector_buffer_high[242]
   spi_master = sd_sector_buffer_low[243]
   spi_master = sd_sector_buffer_high[243]
   spi_master = sd_sector_buffer_low[244]
   spi_master = sd_sector_buffer_high[244]
   spi_master = sd_sector_buffer_low[245]
   spi_master = sd_sector_buffer_high[245]
   spi_master = sd_sector_buffer_low[246]
   spi_master = sd_sector_buffer_high[246]
   spi_master = sd_sector_buffer_low[247]
   spi_master = sd_sector_buffer_high[247]
   spi_master = sd_sector_buffer_low[248]
   spi_master = sd_sector_buffer_high[248]
   spi_master = sd_sector_buffer_low[249]
   spi_master = sd_sector_buffer_high[249]
   spi_master = sd_sector_buffer_low[250]
   spi_master = sd_sector_buffer_high[250]
   spi_master = sd_sector_buffer_low[251]
   spi_master = sd_sector_buffer_high[251]
   spi_master = sd_sector_buffer_low[252]
   spi_master = sd_sector_buffer_high[252]
   spi_master = sd_sector_buffer_low[253]
   spi_master = sd_sector_buffer_high[253]
   spi_master = sd_sector_buffer_low[254]
   spi_master = sd_sector_buffer_high[254]
   spi_master = sd_sector_buffer_low[255]
   spi_master = sd_sector_buffer_high[255]
end procedure

--------------------------------------------------------------------------------
-- write one entire sector
--------------------------------------------------------------------------------
procedure sd_write_sector() is
   var byte x
   var word count1

   spi_master = 0xFC       -- send "stop transmission token" write multiple command

   -- send sector data
   if defined(SD_WRITE_EXTRA_SPEED) == TRUE then
      if SD_WRITE_EXTRA_SPEED == TRUE then
         _sd_write_512()
      else
         -- send the data via spi
         for 256 using count1 loop
          spi_master = sd_sector_buffer_low[count1] -- set low data
          spi_master = sd_sector_buffer_high[count1]-- set high data
         end loop
      end if
   else
      -- send the data via spi
      for 256 using count1 loop
       spi_master = sd_sector_buffer_low[count1] -- set low data
       spi_master = sd_sector_buffer_high[count1]-- set high data
      end loop
   end if



   sd_sector_count = sd_sector_count + 1 -- increment sector count

   if defined(USE_CRC) then
      -- Enhanced CRC16 calculation and sending
      var word calculated_crc
      var byte crc_high
      var byte crc_low
      
      -- Calculate CRC for the entire 512-byte sector
      -- First calculate CRC for low 256 bytes
      calculated_crc = crc16_sd_calculate(sd_sector_buffer_low, 256)
      -- Then continue CRC calculation with high 256 bytes
      var word i
      for 256 using i loop
         calculated_crc = crc16_sd_calculate_byte(calculated_crc, sd_sector_buffer_high[i])
      end loop
      
      -- Check for CRC calculation errors
      if crc_has_error == TRUE then
         sd_error_details = sd_error_details | (word(1) << SD_CRC_ERROR)
         sd_has_error = 1
         -- Send invalid CRC on error
         spi_master = 0xFF  -- send CRC16 high byte
         spi_master = 0xFF  -- send CRC16 low byte
      else
         crc_high = byte((calculated_crc >> 8) & 0xFF)
         crc_low = byte(calculated_crc & 0xFF)
         
         spi_master = crc_high  -- send CRC16 high byte
         spi_master = crc_low   -- send CRC16 low byte
      end if
   else
      -- Original library behavior - send 0xFF for CRC
      spi_master = 0xFF  -- send CRC16 high byte (not calculated for individual bytes)
      spi_master = 0xFF  -- send CRC16 low byte (not calculated for individual bytes)
   end if

   x = spi_master   -- wait for a response
   while x == 0 loop
      x = spi_master
   end loop
   -- response = 010 = data accepted
   -- response = 101 = crc error
   -- response = 110 = write error

   x = spi_master   -- wait for sd card to become ready.
   while x != 0xFF loop
      x = spi_master
   end loop
end procedure

--------------------------------------------------------------------------------
-- write one entire sector with callback to storage_write_callback()
-- for direct reading with spi_master. Make sure you call spi_master
-- chunk_size times in your storage_write_callback().
--------------------------------------------------------------------------------
procedure sd_write_sector_with_callback(word in chunk_size) is
   var byte x
   var word count1

   if sd_byte_count == 0 then
      spi_master = 0xFC       -- send "stop transmission token" write multiple command
   end if

   -- get sector data
   if defined(SD_WRITE_EXTRA_SPEED) == TRUE then
      if SD_WRITE_EXTRA_SPEED == TRUE then
         storage_write_callback(chunk_size)
         sd_byte_count = sd_byte_count + chunk_size
      else
          _error "You can't use callback without SD_WRITE_EXTRA_SPEED == TRUE"
      end if
   else
      _error "You can't use callback without SD_WRITE_EXTRA_SPEED == TRUE"
   end if

   if sd_byte_count == 512 then
      sd_sector_count = sd_sector_count + 1 -- increment sector count

      spi_master = 0xFF  -- send CRC16 high byte (not calculated for individual bytes)
      spi_master = 0xFF  -- send CRC16 low byte (not calculated for individual bytes)

      x = spi_master   -- wait for a response
      while x == 0 loop
         x = spi_master
      end loop
      -- response = 010 = data accepted
      -- response = 101 = crc error
      -- response = 110 = write error

      x = spi_master   -- wait for sd card to become ready
      while x != 0xFF loop
         x = spi_master
      end loop
   end if
end procedure

--------------------------------------------------------------------------------
-- write one entire sector at address
--------------------------------------------------------------------------------
procedure sd_write_sector_address(dword in address) is
   sd_start_write(address)
   sd_write_sector()
   sd_stop_write()
end procedure

-- ----------------------------------------------------------------------------
-- print a sector to an output device
-- ----------------------------------------------------------------------------
procedure sd_print_sector(volatile byte out device, dword in address) is
   sd_start_read(address)
   for SD_BYTE_PER_SECTOR loop
      device = sd_data_byte
   end loop
   sd_stop_read
end procedure

-- ----------------------------------------------------------------------------
-- print a sector to an output device in ascii hex
-- ----------------------------------------------------------------------------
procedure sd_print_sector_hex(volatile byte out device,word in bytes_per_line,dword in address) is
   sd_start_read(address)
   for SD_BYTE_PER_SECTOR / bytes_per_line loop
      print_crlf(device)
      for bytes_per_line loop
         device = " "
         print_byte_hex(device,sd_data_byte)
      end loop
   end loop
   sd_stop_read
end procedure

;   --------------------------------------------------------------------------------
;   -- read CSD or CID to serial port. Example:
;   -- sd_read_csd_cid(SD_SEND_CSD)
;   -- sd_read_csd_cid(SD_SEND_CSD)
;   --------------------------------------------------------------------------------
;   procedure sd_read_csd_cid(byte in command) is
;      sd_enable()  -- enable the sd card
;
;      var byte response,data, step
;      send_command(command,0,response)
;
;      -- wait till ready
;      while spi_master != 0xFE loop      -- wait till data is ready to read
;      end loop
;
;      -- get data
;      for 16 using step loop
;         data = spi_master
;         print_byte_hex(serial_data, data)
;         serial_data = " "
;      end loop
;
;      -- get crc
;      data = spi_master
;      data = spi_master
;
;      sd_disable  -- enable the sd card
;   end procedure

--------------------------------------------------------------------------------
-- Gets sd card size in number of sectors into dword sd_number_of_sectors
-- Total size in bytes = sd_number_of_sectors * 512
--------------------------------------------------------------------------------
procedure sd_get_number_of_sectors() is
   sd_enable()  -- enable the sd card

   var byte x
   var byte*4 c_size = 0
   var byte _c_size[3] at c_size
   var byte*2 c_size_mult
   var byte _c_size_mult[2] at c_size_mult

   send_command(SD_SEND_CSD,0,x)

   -- wait till ready
   var word step = 0
   while spi_master != 0xFE loop      -- wait till data is ready to read
      if step == 10000 then
         sd_error_details = sd_error_details | (word(1) << SD_COMMAND_TIME_OUT)
         sd_has_error = 1
         return
      end if
      step = step + 1
   end loop

   if sd_card_type == SD_STANDARD_CAPACITY then

      -- throw data we dont' need
      for 6 loop
         x = spi_master
      end loop

      _c_size[2] = spi_master
      _c_size[1] = spi_master
      _c_size[0] = spi_master

      _c_size[2] = _c_size[2] & 0b00000111
      c_size = c_size >> 6

      -- get c_size_mult
      _c_size_mult[1] = spi_master
      _c_size_mult[0] = spi_master

      c_size_mult = (c_size_mult >> 7) & 0b00000111

      -- throw the rest of data we dont' need
      for 5 loop
         x = spi_master
      end loop

      -- get crc
      x = spi_master
      x = spi_master

      sd_disable  -- disable the sd card

      sd_number_of_sectors = (c_size << (c_size_mult + 2))
   else
      -- throw data we dont' need
      for 7 loop
         x = spi_master
      end loop

      _c_size[2] = spi_master & 0b00111111
      _c_size[1] = spi_master
      _c_size[0] = spi_master

      -- throw data we dont' need
      for 6 loop
         x = spi_master
      end loop

      -- get crc
      x = spi_master
      x = spi_master

      sd_disable  -- disable the sd card
      sd_number_of_sectors = (dword(c_size)+1) * 1024

   end if
end procedure

 

-- -----------------------------------------------------------------------------
-- Title: INA3221 Triple Channel Shunt and Bus Votage Monitor library.
-- Author: Rob Jansen, Copyright (c) 2025..2025, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Libray for the INA3221 Triple-Channel, High-Side Measurement,
--              Shunt and Bus Voltage Monitor. It is controlled using the IIC
--              interface at a maximum speed of 400 kHz.
-- 
--              This library supports the use of word/dword for values or floats.
--              The default is the use of word/dword to reduce code size and
--              increase speed. In order to make use of floats define the
--              following before including this library:
--              -) Const INA3221_USE_FLOAT = TRUE
--
--              When using word/dword:          When using float:
--              -) Shunt resistor is in mOhm    -) Shunt resistor is in Ohm
--              -) Shunt voltage is in uV       -) Shunt voltage in in Volt
--              -) Bus voltage in in mv         -) Bus voltage is in Volt
--              -) Current is in uA             -) Current in in Ampere
--
-- Sources: Datasheet Texas Instruments INA3221 Triple-Channel, High-Side
--          Measurement, Shunt and Bus Voltage Monitor with I2C- and 
--          SMBUS-Compatible interface. SBOS576B –MAY 2012–REVISED MARCH 2016
--
-- Notes:   The main program must initialize the used - default - IIC interface 
--          with a maximum speed of 400 kHz and with a I2C_HARDWARE_TIMEOUT 
--          defined. Channels are numbered 1..3, but values 0..2 are used.
--
-- -----------------------------------------------------------------------------
-- ---------------------- PUBLIC CONSTANTS DEFS --------------------------------
-- -----------------------------------------------------------------------------

-- Default 7-bit IIC address of the ina3221 with A0 connected to GND. 
const byte INA3221_IIC_DEFAULT_ADDRESS = 0x40

-- Channel constants.
const byte INA3221_NR_OF_CHANNELS = 3
const byte INA3221_CHANNEL_1      = 0
const byte INA3221_CHANNEL_2      = 1
const byte INA3221_CHANNEL_3      = 2

-- Averaging mode number of samples.
const bit*3 INA3221_AVG_SAMPLES_1    = 0b000 -- Default.
const bit*3 INA3221_AVG_SAMPLES_4    = 0b001
const bit*3 INA3221_AVG_SAMPLES_16   = 0b010
const bit*3 INA3221_AVG_SAMPLES_64   = 0b011
const bit*3 INA3221_AVG_SAMPLES_128  = 0b100
const bit*3 INA3221_AVG_SAMPLES_256  = 0b101
const bit*3 INA3221_AVG_SAMPLES_512  = 0b110
const bit*3 INA3221_AVG_SAMPLES_1024 = 0b111

-- Conversion time for bus voltage and shunt voltage.
const bit*3 INA3221_CONV_TIME_140_US = 0b000 
const bit*3 INA3221_CONV_TIME_204_US = 0b001 
const bit*3 INA3221_CONV_TIME_332_US = 0b010 
const bit*3 INA3221_CONV_TIME_588_US = 0b011 
const bit*3 INA3221_CONV_TIME_1_MS   = 0b100 -- Default 1.1 ms.
const bit*3 INA3221_CONV_TIME_2_MS   = 0b101 -- 2.116 ms.
const bit*3 INA3221_CONV_TIME_4_MS   = 0b110 -- 4.156 ms.
const bit*3 INA3221_CONV_TIME_8_MS   = 0b111 -- 8.244 ms.

-- Operating modes.
const bit*3 INA3221_MODE_POWER_DOWN_1         = 0b000 
const bit*3 INA3221_MODE_SHUNT_SINGLE         = 0b001 
const bit*3 INA3221_MODE_BUS_SINGLE           = 0b010 
const bit*3 INA3221_MODE_SHUNT_BUS_SINGLE     = 0b011 
const bit*3 INA3221_MODE_POWER_DOWN_2         = 0b100 
const bit*3 INA3221_MODE_SHUNT_CONTINUOUS     = 0b101 
const bit*3 INA3221_MODE_BUS_CONTINUOUS       = 0b110 
const bit*3 INA3221_MODE_SHUNT_BUS_CONTINUOUS = 0b111 -- Default.


-- -----------------------------------------------------------------------------
-- -------------------------- Public API ---------------------------------------
-- -----------------------------------------------------------------------------

-- ----------------------------------------------------------------------------- 
-- Initialize the library. The shunt resistor is set to 0.1 Ohm.
-- The device is reset.
-- ----------------------------------------------------------------------------- 
procedure ina3221_init() 

-- ----------------------------------------------------------------------------- 
-- Reset the INA3221.
-- ----------------------------------------------------------------------------- 
procedure ina3221_reset()

-- ----------------------------------------------------------------------------- 
-- Set the 7-it IIC address of the INA3221 to the given address.
-- The default address is: INA3221_IIC_DEFAULT_ADDRESS (A0 connected to GND.)
-- ----------------------------------------------------------------------------- 
procedure ina3221_set_iic_address(byte in address) 

-- ----------------------------------------------------------------------------- 
-- Get the 7-bit IIC address of the INA3221 module.
-- ----------------------------------------------------------------------------- 
function ina3221_get_iic_address() return byte 


if defined(INA3221_USE_FLOAT) then
   -- ------------------ Procedures and functions using floats --------------------

   -- ----------------------------------------------------------------------------- 
   -- Get the value of the shunt resistance of the given channel in Ohm. 
   -- Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_resistance(byte in channel) return float

   -- ----------------------------------------------------------------------------- 
   -- Set the value of the shunt resistance for the given channel. Shunt resistance  
   -- must be in Ohm, channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   procedure ina3221_set_shunt_resistance(byte in channel, float in resistance)

   -- ----------------------------------------------------------------------------- 
   -- Get the bus voltage of the given channel in Volt. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_bus_voltage(byte in channel) return float

   -- ----------------------------------------------------------------------------- 
   -- Get the current of the given channel in Ampere. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_current(byte in channel) return float

   -- ----------------------------------------------------------------------------- 
   -- Get the shunt voltage of the given channel in Volt. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_voltage(byte in channel) return float

   -- -----------------------------------------------------------------------------
   -- Get the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   function ina3221_get_critical_alert_limit(byte in channel) return float

   -- -----------------------------------------------------------------------------
   -- Set the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_critical_alert_limit(byte in channel, float in limit)

   -- -----------------------------------------------------------------------------
   -- Get the warning alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   function ina3221_get_warning_alert_limit(byte in channel) return float

   -- -----------------------------------------------------------------------------
   -- Set the warning alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_warning_alert_limit(byte in channel, float in limit)

   -- -----------------------------------------------------------------------------
   -- Get the power valid upper limit in Volt.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_upper_limit() return float

   -- -----------------------------------------------------------------------------
   -- Set the power valid upper limit in Volt.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_upper_limit(float in upper_limit)

   -- -----------------------------------------------------------------------------
   -- Get the power valid lower limit in Volt.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_lower_limit() return float 

   -- -----------------------------------------------------------------------------
   -- Set the power valid lower limit in Volt.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_lower_limit(float in lower_limit) 


else ; INA3221_USE_FLOAT

   -- ---------------- Procedures and functions using word/dword ------------------

   -- ----------------------------------------------------------------------------- 
   -- Get the value of the shunt resistance of the given channel in mOhm.
   -- Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_resistance(byte in channel) return dword

   -- ----------------------------------------------------------------------------- 
   -- Set the value of the shunt resistance for the given channel. Shunt resistance  
   -- must be in mOhm, channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   procedure ina3221_set_shunt_resistance(byte in channel, dword in resistance)

   -- ----------------------------------------------------------------------------- 
   -- Get the bus voltage of the given channel in mV. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_bus_voltage(byte in channel) return word

   -- ----------------------------------------------------------------------------- 
   -- Get the current of the given channel in uA. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_current(byte in channel) return sdword

   -- ----------------------------------------------------------------------------- 
   -- Get the shunt voltage of the given channel in uV. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_voltage(byte in channel) return sdword

   -- -----------------------------------------------------------------------------
   -- Get the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_critical_alert_limit(byte in channel) return sdword 

   -- -----------------------------------------------------------------------------
   -- Set the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_critical_alert_limit(byte in channel, sdword in limit) 

   -- -----------------------------------------------------------------------------
   -- Get the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_warning_alert_limit(byte in channel) return sdword 

   -- -----------------------------------------------------------------------------
   -- Set the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_warning_alert_limit(byte in channel, sdword in limit) 
  
   -- -----------------------------------------------------------------------------
   -- Get the power valid upper limit in mV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_upper_limit() return word 

   -- -----------------------------------------------------------------------------
   -- Set the power valid upper limit in mV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_upper_limit(word in upper_limit)

   -- -----------------------------------------------------------------------------
   -- Get the power valid lower limit in mV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_lower_limit() return word

   -- -----------------------------------------------------------------------------
   -- Set the power valid lower limit in mV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_lower_limit(word in lower_limit) 


end if ; INA3221_USE_FLOAT

-- -----------------------------------------------------------------------------
-- Get the flags from the mask/enable register. This call will clear the flags 
-- if a condition is no longer active. For that reason reading the flags from 
-- the mask enable/disable regsiter once makes it possible to check later 
-- which alert flags are active.
-- -----------------------------------------------------------------------------
function ina3221_get_flags() return word 

-- -----------------------------------------------------------------------------
-- Returns TRUE if the critical alert for the given channel is active.
-- Channel in range 0..2. Channel must be active for the alert.
-- -----------------------------------------------------------------------------
function ina3221_critical_alert(word in flags, byte in channel) return bit 

-- -----------------------------------------------------------------------------
-- Returns TRUE if the warning alert for the given channel is active.
-- Channel in range 0..2. Channel must be active for the alert.
-- -----------------------------------------------------------------------------
function ina3221_warning_alert(word in flags, byte in channel) return bit 

-- -----------------------------------------------------------------------------
-- Returns TRUE if the power valid alert is active. 
-- -----------------------------------------------------------------------------
function ina3221_power_valid_alert(word in flags) return bit

-- -----------------------------------------------------------------------------
-- Returns TRUE if the summation alert is active. 
-- -----------------------------------------------------------------------------
function ina3221_summation_alert(word in flags) return bit

-- -----------------------------------------------------------------------------
-- Returns TRUE if the timing control alert is active. 
-- -----------------------------------------------------------------------------
function ina3221_timing_control_alert(word in flags) return bit

-- -----------------------------------------------------------------------------
-- Returns TRUE if the conversion is ready. 
-- -----------------------------------------------------------------------------
function ina3221_conversion_ready(word in flags) return bit

-- -----------------------------------------------------------------------------
-- Enable the given channel. Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_channel(byte in channel)

-- -----------------------------------------------------------------------------
-- Disable the given channel. Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_channel(byte in channel) 

-- -----------------------------------------------------------------------------
-- Enable the summation channel control for the given channel. 
-- Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_summation_channel(byte in channel)

-----------------------------------------------------------------------
-- Disable the summation channel control for the given channel. 
-- Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_summation_channel(byte in channel)

-- -----------------------------------------------------------------------------
-- Enable the warning alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_warning_alert_latch()

-- -----------------------------------------------------------------------------
-- Disable the warning alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_warning_alert_latch()

-- -----------------------------------------------------------------------------
-- Enable the critical alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_critical_alert_latch()

-- -----------------------------------------------------------------------------
-- Disable the critical alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_critical_alert_latch()

-- -----------------------------------------------------------------------------
-- Set averaging mode with the given number of samples.
-- -----------------------------------------------------------------------------
procedure ina3221_set_averaging_samples(bit*3 in samples)

-- -----------------------------------------------------------------------------
-- Set bus voltage conversion time. 
-- -----------------------------------------------------------------------------
procedure ina3221_set_bus_voltage_conversion_time(bit*3 in time)

-- -----------------------------------------------------------------------------
-- Set shunt voltage conversion time. 
-- -----------------------------------------------------------------------------
procedure ina3221_set_shunt_voltage_conversion_time(bit*3 in time)

-- -----------------------------------------------------------------------------
-- Set operating mode.
-- -----------------------------------------------------------------------------
procedure ina3221_set_operating_mode(bit*3 in mode)

-- -----------------------------------------------------------------------------
-- Get the ID of the manufacturer. Should be 0x5449.
-- -----------------------------------------------------------------------------
function get_manufacturer_id() return word

-- -----------------------------------------------------------------------------
-- Get the ID of the DIE. Should be 0x3220.
-- -----------------------------------------------------------------------------
function get_die_id() return word

-- -----------------------------------------------------------------------------
-- Get the contents of the given register.
-- -----------------------------------------------------------------------------
function ina3221_get_register_value(byte in register) return word

-- ----------------------------------------------------------------------------- 
-- Returns TRUE if a timeout occured in one of the read functions or in case of
-- timeout on the IIC bus if the IIC timeout is defined. Value is cleared after
-- a call to this function. 
-- ----------------------------------------------------------------------------- 
function ina3221_timeout_occured() return bit

-- -----------------------------------------------------------------------------
-- ---------------------------- Implementation ---------------------------------
-- -----------------------------------------------------------------------------

-- Addresseds of the registers. Register are word oriented.
const byte _INA3221_REGISTER_CONFIGURATION            = 0x00
const byte _INA3221_REGISTER_CH1_SHUNT_VOLTAGE        = 0x01
const byte _INA3221_REGISTER_CH1_BUS_VOLTAGE          = 0x02
const byte _INA3221_REGISTER_CH2_SHUNT_VOLTAGE        = 0x03
const byte _INA3221_REGISTER_CH2_BUS_VOLTAGE          = 0x04
const byte _INA3221_REGISTER_CH3_SHUNT_VOLTAGE        = 0x05
const byte _INA3221_REGISTER_CH3_BUS_VOLTAGE          = 0x06
const byte _INA3221_REGISTER_CH1_CRITICAL_ALERT_LIMIT = 0x07
const byte _INA3221_REGISTER_CH1_WARNING_ALERT_LIMIT  = 0x08
const byte _INA3221_REGISTER_CH2_CRITICAL_ALERT_LIMIT = 0x09
const byte _INA3221_REGISTER_CH2_WARNING_ALERT_LIMIT  = 0x0A
const byte _INA3221_REGISTER_CH3_CRITICAL_ALERT_LIMIT = 0x0B
const byte _INA3221_REGISTER_CH3_WARNING_ALERT_LIMIT  = 0x0C
const byte _INA3221_REGISTER_SHUNT_VOLTAGE_SUM        = 0x0D
const byte _INA3221_REGISTER_SHUNT_VOLTAGE_SUM_LIMIT  = 0x0E
const byte _INA3221_REGISTER_MASK_ENABLE              = 0x0F
const byte _INA3221_REGISTER_POWER_VALID_UPPER_LIMIT  = 0x10
const byte _INA3221_REGISTER_POWER_VALID_LOWER_LIMIT  = 0x11
const byte _INA3221_REGISTER_MANUFACTURER_ID          = 0xFE
const byte _INA3221_REGISTER_DIE_ID                   = 0xFF

-- Configuration register bits.
const word _INA3221_CONFIURATION_RESET            = 0x8000
const word _INA3221_CONFIURATION_ENABLE_CHANNEL_1 = 0x4000
const word _INA3221_CONFIURATION_ENABLE_CHANNEL_2 = 0x2000
const word _INA3221_CONFIURATION_ENABLE_CHANNEL_3 = 0x1000


-- Mask/Enable register values.
const word _INA3221_MASK_CONVERSION_READY      = 0x0001
const word _INA3221_MASK_TIMING_CONTROL_ALERT  = 0x0002
const word _INA3221_MASK_POWER_VALID_ALERT     = 0x0004
const word _INA3221_MASK_WARNING_ALERT_3       = 0x0008
const word _INA3221_MASK_WARNING_ALERT_2       = 0x0010
const word _INA3221_MASK_WARNING_ALERT_1       = 0x0020
const word _INA3221_MASK_SUMMATION_ALERT       = 0x0040
const word _INA3221_MASK_CRITICAL_ALERT_3      = 0x0080
const word _INA3221_MASK_CRITICAL_ALERT_2      = 0x0100
const word _INA3221_MASK_CRITICAL_ALERT_1      = 0x0200
const word _INA3221_MASK_CRITICAL_ALERT_LATCH  = 0x0400
const word _INA3221_MASK_WARNING_ALERT_LATCH   = 0x0800
const word _INA3221_MASK_SUMMATION_CHANNEL_3   = 0x1000
const word _INA3221_MASK_SUMMATION_CHANNEL_2   = 0x2000
const word _INA3221_MASK_SUMMATION_CHANNEL_1   = 0x4000


-------------------------- Private variables -----------------------------------
-- The IIC address can be changed.
var byte _ina3221_iic_address 

-- Keep track of occurence of timeout.
var bit _ina3221_did_timeout

if defined(INA3221_USE_FLOAT) then
   -- Shunt resistors and filter resistors in Ohm.
   var float _ina3221_shunt_resistors[INA3221_NR_OF_CHANNELS]
else
   -- Shunt resistors and filter resistors in mOhm.
   var dword _ina3221_shunt_resistors[INA3221_NR_OF_CHANNELS]
end if 

--------------------- Private function prototypes ------------------------------
function _ina3221_read_data_word(byte in register) return word
procedure _ina3221_write_data_word(byte in register, word in data) 

-- -------------------- Public procedures and functions ------------------------

-- ----------------------------------------------------------------------------- 
-- Initialize the library. The shunt resistor is set to 0.1 Ohm.
-- The device is reset.
-- ----------------------------------------------------------------------------- 
procedure ina3221_init() is

   var byte index

   _ina3221_did_timeout = FALSE
   ina3221_set_iic_address(INA3221_IIC_DEFAULT_ADDRESS)
   ina3221_reset()

   for INA3221_NR_OF_CHANNELS using index loop
      -- Most modules have a shunt resistor with value R100 which is 0.1 Ohm
      -- or 100 mOhm.
      if defined(INA3221_USE_FLOAT) then
         _ina3221_shunt_resistors[index] = 0.1 -- Ohm
      else
         _ina3221_shunt_resistors[index] = 100 -- mOhm
      end if 
   end loop

end procedure


-- ----------------------------------------------------------------------------- 
-- Reset the INA3221.
-- ----------------------------------------------------------------------------- 
procedure ina3221_reset() is

   var word data

   data = _ina3221_read_data_word(_INA3221_REGISTER_CONFIGURATION) | 
           _INA3221_CONFIURATION_RESET 
   _ina3221_write_data_word(_INA3221_REGISTER_CONFIGURATION, data) 

end procedure


-- ----------------------------------------------------------------------------- 
-- Set the 7-bit IIC address of the INA3221 to the given address.
-- The default address: INA3221_IIC_DEFAULT_ADDRESS (A0 connected to GND.)
-- ----------------------------------------------------------------------------- 
procedure ina3221_set_iic_address(byte in address) is
   
   _ina3221_iic_address = (address << 1) ; LSB is read/write bit.

end procedure


-- ----------------------------------------------------------------------------- 
-- Get the 7-bit IIC address of the INA3221 module.
-- ----------------------------------------------------------------------------- 
function ina3221_get_iic_address() return byte is
   
   return (_ina3221_iic_address >> 1) ; Remove read/write bit.

end function


if defined(INA3221_USE_FLOAT) then
   -- ------------------ Procedures and functions using floats --------------------

   -- ----------------------------------------------------------------------------- 
   -- Get the value of the shunt resistance of the given channel in Ohm.
   -- Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_resistance(byte in channel) return float is

      var float resistance = 0.0 

      if (channel < INA3221_NR_OF_CHANNELS) then
         resistance = _ina3221_shunt_resistors[channel] 
      end if 

      return resistance
   
   end function


   -- ----------------------------------------------------------------------------- 
   -- Set the value of the shunt resistance for the given channel. Shunt resistance  
   -- must be in Ohm, channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   procedure ina3221_set_shunt_resistance(byte in channel, float in resistance) is

      if (channel < INA3221_NR_OF_CHANNELS) then
         _ina3221_shunt_resistors[channel] = resistance
      end if 
   
   end procedure


   -- ----------------------------------------------------------------------------- 
   -- Get the bus voltage of the given channel in Volt. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_bus_voltage(byte in channel) return float is

      var float voltage = 0.0
      var word data
      var byte register 

      if (channel < INA3221_NR_OF_CHANNELS) then
         case channel of
            INA3221_CHANNEL_1: register = _INA3221_REGISTER_CH1_BUS_VOLTAGE
            INA3221_CHANNEL_2: register = _INA3221_REGISTER_CH2_BUS_VOLTAGE
            INA3221_CHANNEL_3: register = _INA3221_REGISTER_CH3_BUS_VOLTAGE
         end case
         data = _ina3221_read_data_word(register)
         -- Multiply by 1 mV (3 lsb's are not used so resolution is 8 mV).
         voltage = float(data) * 1.0E-3   
      end if 

      return voltage

   end function


   -- ----------------------------------------------------------------------------- 
   -- Get the current of the given channel in Ampere. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_current(byte in channel) return float is

      var float current = 0.0
      var float shunt_voltage
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         shunt_voltage = ina3221_get_shunt_voltage(channel)
         current = shunt_voltage / _ina3221_shunt_resistors[channel] 
      end if 

      return current

   end function


   -- ----------------------------------------------------------------------------- 
   -- Get the shunt voltage of the given channel in Volt. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_voltage(byte in channel) return float is

      var float voltage = 0.0
      var word data
      var byte register 

      if (channel < INA3221_NR_OF_CHANNELS) then
         case channel of
            INA3221_CHANNEL_1: register = _INA3221_REGISTER_CH1_SHUNT_VOLTAGE
            INA3221_CHANNEL_2: register = _INA3221_REGISTER_CH2_SHUNT_VOLTAGE
            INA3221_CHANNEL_3: register = _INA3221_REGISTER_CH3_SHUNT_VOLTAGE      
         end case
         -- Multiply by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         data = _ina3221_read_data_word(register)
         -- When negative (MSB = 1) calculate two's complement and add sign.
         if (data & 0x8000) != 0 then
             data = (!data + 1)
             voltage = 5.0E-6 * -float(data) 
         else
             voltage = 5.0E-6 * float(data) 
         end if 

      end if 

      return voltage

   end function


   -- -----------------------------------------------------------------------------
   -- Get the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   function ina3221_get_critical_alert_limit(byte in channel) return float is 

      var float limit = 0.0
      var word data  
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         register = (2 * channel) + _INA3221_REGISTER_CH1_CRITICAL_ALERT_LIMIT
         -- Multiply by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         data = _ina3221_read_data_word(register)
         -- When negative (MSB = 1) calculate two's complement and add sign.
         if (data & 0x8000) != 0 then
            data = (!data + 1)
            limit = 5.0E-6 * -float(data) 
         else
            limit = 5.0E-6 * float(data) 
         end if 
      end if 

      return limit

   end function


   -- -----------------------------------------------------------------------------
   -- Set the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_critical_alert_limit(byte in channel, float in limit) is 

      var float conversion
      var word value
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         -- Divide by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         conversion = limit / 5.0E-6
         -- First check for negative number, if so make two's complement.
         if (limit < 0) then
            -- First make positive before casting.
            conversion = -conversion
            value = word(conversion) 
            value = (!value + 1)
            value = value | 0x8000 -- Indicate that it is a negative number.
         else
            value = word(conversion) 
         end if 
         register = (2 * channel) + _INA3221_REGISTER_CH1_CRITICAL_ALERT_LIMIT
         _ina3221_write_data_word(register, value)
      end if 

   end procedure


   -- -----------------------------------------------------------------------------
   -- Get the warning alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   function ina3221_get_warning_alert_limit(byte in channel) return float is 

      var float limit = 0.0
      var word data  
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         register = (2 * channel) + _INA3221_REGISTER_CH1_WARNING_ALERT_LIMIT
         -- Multiply by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         data = _ina3221_read_data_word(register)
         if (data & 0x8000) != 0 then
            data = (!data + 1)
            limit = 5.0E-6 * -float(data) 
         else
            limit = 5.0E-6 * float(data) 
         end if 
      end if 

      return limit

   end function


   -- -----------------------------------------------------------------------------
   -- Set the warning alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in V.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_warning_alert_limit(byte in channel, float in limit) is 

      var float conversion
      var word value
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         -- Divide by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         conversion = limit / 5.0E-6
         -- First check for negative number, if so make two's complement.
         if (limit < 0) then
            -- First make positive before casting.
            conversion = -conversion
            value = word(conversion) 
            value = (!value + 1)
            value = value | 0x8000 -- Indicate that it is a negative number.
         else
            value = word(conversion) 
         end if 
         register = (2 * channel) + _INA3221_REGISTER_CH1_WARNING_ALERT_LIMIT
         _ina3221_write_data_word(register, value)
      end if 

   end procedure


   -- -----------------------------------------------------------------------------
   -- Get the power valid upper limit in Volt.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_upper_limit() return float is 

      -- Limit is in 1 mV so divide by 1000 to set it in Volt.
      return float(_ina3221_read_data_word(_INA3221_REGISTER_POWER_VALID_UPPER_LIMIT)) 
                  / 1000.0

   end function


   -- -----------------------------------------------------------------------------
   -- Set the power valid upper limit in Volt.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_upper_limit(float in upper_limit) is 

      var word data

      -- Limit is in 1 mV so multiply by 1000 to set it in Volt.
      data = word(upper_limit * 1000)
      _ina3221_write_data_word(_INA3221_REGISTER_POWER_VALID_UPPER_LIMIT, data)

   end procedure


   -- -----------------------------------------------------------------------------
   -- Get the power valid lower limit in Volt.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_lower_limit() return float is 

      var word data

      -- Limit is in 1 mV so divide by 1000 to set it in Volt.
      return float(_ina3221_read_data_word(_INA3221_REGISTER_POWER_VALID_LOWER_LIMIT)) 
                  / 1000.0

   end function


   -- -----------------------------------------------------------------------------
   -- Set the power valid lower limit in Volt.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_lower_limit(float in lower_limit) is 

      var word data

      -- Limit is in 1 mV so multiply by 1000 to set it in Volt.
      data = word(lower_limit * 1000)
      _ina3221_write_data_word(_INA3221_REGISTER_POWER_VALID_LOWER_LIMIT, data)

   end procedure


else ; INA3221_USE_FLOAT

   -- ---------------- Procedures and functions using word/dword ------------------

   -- ----------------------------------------------------------------------------- 
   -- Get the value of the shunt resistance of the given channel in mOhm.
   -- Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_resistance(byte in channel) return dword is

      var dword resistance = 0

      if (channel < INA3221_NR_OF_CHANNELS) then
         resistance = _ina3221_shunt_resistors[channel] 
      end if 

      return resistance
   
   end function


   -- ----------------------------------------------------------------------------- 
   -- Set the value of the shunt resistance for the given channel. Shunt resistance  
   -- must be in mOhm, channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   procedure ina3221_set_shunt_resistance(byte in channel, dword in resistance) is

      if (channel < INA3221_NR_OF_CHANNELS) then
         _ina3221_shunt_resistors[channel] = resistance
      end if 
   
   end procedure


   -- ----------------------------------------------------------------------------- 
   -- Get the bus voltage of the given channel in mV. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_bus_voltage(byte in channel) return word is

      var word voltage = 0
      var byte register 

      if (channel < INA3221_NR_OF_CHANNELS) then
         case channel of
            INA3221_CHANNEL_1: register = _INA3221_REGISTER_CH1_BUS_VOLTAGE
            INA3221_CHANNEL_2: register = _INA3221_REGISTER_CH2_BUS_VOLTAGE
            INA3221_CHANNEL_3: register = _INA3221_REGISTER_CH3_BUS_VOLTAGE
         end case
         -- Three LSB's are not used, resolution is 8 mV so 1 mV per step.
         voltage = _ina3221_read_data_word(register)
      end if 

      return voltage

   end function


   -- ----------------------------------------------------------------------------- 
   -- Get the current of the given channel in uA. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_current(byte in channel) return sdword is

      var sdword current = 0
      var sdword shunt_voltage
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         -- Resistor is in mOhm so voltage has to be multiplied by 1000 to get
         -- Volt. Shunt voltage is in uA.
         shunt_voltage = 1000 * ina3221_get_shunt_voltage(channel)
         current = shunt_voltage / sdword(_ina3221_shunt_resistors[channel])
      end if 

      return current

   end function


   -- ----------------------------------------------------------------------------- 
   -- Get the shunt voltage of the given channel in uV. Channel in range 0..2.
   -- ----------------------------------------------------------------------------- 
   function ina3221_get_shunt_voltage(byte in channel) return sdword is

      var sdword voltage = 0
      var word data
      var byte register 

      if (channel < INA3221_NR_OF_CHANNELS) then
         case channel of
            INA3221_CHANNEL_1: register = _INA3221_REGISTER_CH1_SHUNT_VOLTAGE
            INA3221_CHANNEL_2: register = _INA3221_REGISTER_CH2_SHUNT_VOLTAGE
            INA3221_CHANNEL_3: register = _INA3221_REGISTER_CH3_SHUNT_VOLTAGE      
         end case
         -- Multiply by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         data = _ina3221_read_data_word(register)
         -- When negative (MSB = 1) calculate two's complement and add sign.
         if (data & 0x8000) != 0 then
             data = (!data + 1)
             voltage = 5 * -sdword(data) 
         else
            voltage = 5 * sdword(data)
         end if 
      end if 

      return voltage

   end function


   -- -----------------------------------------------------------------------------
   -- Get the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_critical_alert_limit(byte in channel) return sdword is 

      var sdword limit = 0
      var word data
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         register = (2 * channel) + _INA3221_REGISTER_CH1_CRITICAL_ALERT_LIMIT
         -- Multiply by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         data = _ina3221_read_data_word(register)
          -- When negative (MSB = 1) calculate two's complement and add sign.
         if (data & 0x8000) != 0 then
            data = (!data + 1)
            limit = 5 * -sdword(data) 
         else
            limit = 5 * sdword(data)
         end if 
      end if 

      return limit

   end function


   -- -----------------------------------------------------------------------------
   -- Set the critical alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_critical_alert_limit(byte in channel, sdword in limit) is 

      var sdword conversion
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         -- First check for negative number, if so make two's complement
         if (limit < 0) then
            limit = (-limit) - 1 
            limit = !limit
         end if 
         -- Divide by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         conversion = limit / 5
         register = (2 * channel) + _INA3221_REGISTER_CH1_CRITICAL_ALERT_LIMIT
         _ina3221_write_data_word(register, word(conversion))
      end if 

   end procedure


   -- -----------------------------------------------------------------------------
   -- Get the warning alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_warning_alert_limit(byte in channel) return sdword is 

      var sdword limit = 0
      var word data 
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         register = (2 * channel) + _INA3221_REGISTER_CH1_WARNING_ALERT_LIMIT
         -- Multiply by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         data = _ina3221_read_data_word(register)
          -- When negative (MSB = 1) calculate two's complement and add sign.
         if (data & 0x8000) != 0 then
            data = (!data + 1)
            limit = 5 * -sdword(data) 
         else
            limit = 5 * sdword(data)
         end if 
      end if 

      return limit

   end function


   -- -----------------------------------------------------------------------------
   -- Set the warning alert limit of the shunt voltage for the given channel.
   -- Channel in range 0..2. Limit is in uV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_warning_alert_limit(byte in channel, sdword in limit) is 

      var sdword conversion
      var byte register

      if (channel < INA3221_NR_OF_CHANNELS) then
         -- First check for negative number, if so make two's complement
         if (limit < 0) then
            limit = (-limit) - 1 
            limit = !limit
         end if 
         -- Divide by 5 uV. Three lsb's are not used and resolution is 40 uV
         -- so 40/8 = 5 uV per step.
         conversion = limit / 5
         register = (2 * channel) + _INA3221_REGISTER_CH1_WARNING_ALERT_LIMIT
         _ina3221_write_data_word(register, word(conversion))
      end if 

   end procedure


   -- -----------------------------------------------------------------------------
   -- Get the power valid upper limit in mV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_upper_limit() return word is 

      return _ina3221_read_data_word(_INA3221_REGISTER_POWER_VALID_UPPER_LIMIT)

   end function


   -- -----------------------------------------------------------------------------
   -- Set the power valid upper limit in mV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_upper_limit(word in upper_limit) is 

      _ina3221_write_data_word(_INA3221_REGISTER_POWER_VALID_UPPER_LIMIT, upper_limit)

   end procedure


   -- -----------------------------------------------------------------------------
   -- Get the power valid lower limit in mV.
   -- -----------------------------------------------------------------------------
   function ina3221_get_power_valid_lower_limit() return word is 

      return _ina3221_read_data_word(_INA3221_REGISTER_POWER_VALID_LOWER_LIMIT)

   end function


   -- -----------------------------------------------------------------------------
   -- Set the power valid lower limit in mV.
   -- -----------------------------------------------------------------------------
   procedure ina3221_set_power_valid_lower_limit(word in lower_limit) is 

      _ina3221_write_data_word(_INA3221_REGISTER_POWER_VALID_LOWER_LIMIT, lower_limit)

   end procedure

end if ; INA3221_USE_FLOAT

-- -----------------------------------------------------------------------------
-- Get the flags from the mask/enable register. This call will clear the flags 
-- if a condition is no longer active. For that reason reading the flags from 
-- the mask enable/disable regsiter once makes it possible to check later 
-- which alert flags are active.
-- -----------------------------------------------------------------------------
function ina3221_get_flags() return word is 

   return _ina3221_read_data_word(_INA3221_REGISTER_MASK_ENABLE)

end function


-- -----------------------------------------------------------------------------
-- Returns TRUE if the critical alert for the given channel is active.
-- Channel in range 0..2. Channel must be active for the alert.
-- -----------------------------------------------------------------------------
function ina3221_critical_alert(word in flags, byte in channel) return bit is 

   var bit active = FALSE

   if (channel < INA3221_NR_OF_CHANNELS) then
      case channel of
         INA3221_CHANNEL_1: active = ((flags & _INA3221_MASK_CRITICAL_ALERT_1) != 0)
         INA3221_CHANNEL_2: active = ((flags & _INA3221_MASK_CRITICAL_ALERT_2) != 0)
         INA3221_CHANNEL_3: active = ((flags & _INA3221_MASK_CRITICAL_ALERT_3) != 0)
      end case
   end if 

   return active

end function


-- -----------------------------------------------------------------------------
-- Returns TRUE if the warning alert for the given channel is active.
-- Channel in range 0..2. Channel must be active for the alert.
-- -----------------------------------------------------------------------------
function ina3221_warning_alert(word in flags, byte in channel) return bit is 

   var bit active = FALSE

   if (channel < INA3221_NR_OF_CHANNELS) then
      case channel of
         INA3221_CHANNEL_1: active = ((flags & _INA3221_MASK_WARNING_ALERT_1) != 0)
         INA3221_CHANNEL_2: active = ((flags & _INA3221_MASK_WARNING_ALERT_2) != 0)
         INA3221_CHANNEL_3: active = ((flags & _INA3221_MASK_WARNING_ALERT_3) != 0)
      end case
   end if 

   return active

end function


-- -----------------------------------------------------------------------------
-- Returns TRUE if the power valid alert is active. 
-- -----------------------------------------------------------------------------
function ina3221_power_valid_alert(word in flags) return bit is 

   return ((flags & _INA3221_MASK_POWER_VALID_ALERT) != 0)

end function


-- -----------------------------------------------------------------------------
-- Returns TRUE if the summation alert is active. 
-- -----------------------------------------------------------------------------
function ina3221_summation_alert(word in flags) return bit is 

   return ((flags & _INA3221_MASK_SUMMATION_ALERT) != 0)

end function


-- -----------------------------------------------------------------------------
-- Returns TRUE if the timing control alert is active. 
-- -----------------------------------------------------------------------------
function ina3221_timing_control_alert(word in flags) return bit is 

   return ((flags & _INA3221_MASK_TIMING_CONTROL_ALERT) != 0)

end function


-- -----------------------------------------------------------------------------
-- Returns TRUE if the conversion is ready. 
-- -----------------------------------------------------------------------------
function ina3221_conversion_ready(word in flags) return bit is 

   return ((flags & _INA3221_MASK_CONVERSION_READY) != 0)

end function


-- -----------------------------------------------------------------------------
-- Enable the given channel. Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_channel(byte in channel) is

   var word data

   if (channel < INA3221_NR_OF_CHANNELS) then
      data = _ina3221_read_data_word(_INA3221_REGISTER_CONFIGURATION) 
      case channel of
         INA3221_CHANNEL_1: data = (data | _INA3221_CONFIURATION_ENABLE_CHANNEL_1)
         INA3221_CHANNEL_2: data = (data | _INA3221_CONFIURATION_ENABLE_CHANNEL_2)
         INA3221_CHANNEL_3: data = (data | _INA3221_CONFIURATION_ENABLE_CHANNEL_3)
      end case
      _ina3221_write_data_word(_INA3221_REGISTER_CONFIGURATION, data) 
    end if 

end procedure


-- -----------------------------------------------------------------------------
-- Disable the given channel. Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_channel(byte in channel) is

   var word data

   if (channel < INA3221_NR_OF_CHANNELS) then
      data = _ina3221_read_data_word(_INA3221_REGISTER_CONFIGURATION) 
      case channel of
         INA3221_CHANNEL_1: data = (data & !_INA3221_CONFIURATION_ENABLE_CHANNEL_1)
         INA3221_CHANNEL_2: data = (data & !_INA3221_CONFIURATION_ENABLE_CHANNEL_2)
         INA3221_CHANNEL_3: data = (data & !_INA3221_CONFIURATION_ENABLE_CHANNEL_3)
      end case
      _ina3221_write_data_word(_INA3221_REGISTER_CONFIGURATION, data) 
    end if 

end procedure


-- -----------------------------------------------------------------------------
-- Enable the summation channel control for the given channel. 
-- Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_summation_channel(byte in channel) is

   var word data 

   if (channel < INA3221_NR_OF_CHANNELS) then
      data = _ina3221_read_data_word(_INA3221_REGISTER_MASK_ENABLE) 
      case channel of
         INA3221_CHANNEL_1: data = (data | _INA3221_MASK_SUMMATION_CHANNEL_1)
         INA3221_CHANNEL_2: data = (data | _INA3221_MASK_SUMMATION_CHANNEL_2)
         INA3221_CHANNEL_3: data = (data | _INA3221_MASK_SUMMATION_CHANNEL_3)
      end case
      _ina3221_write_data_word(_INA3221_REGISTER_MASK_ENABLE, data)
    end if 

end procedure


-----------------------------------------------------------------------
-- Disable the summation channel control for the given channel. 
-- Channel in range 0..2.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_summation_channel(byte in channel) is

   var word data 

   if (channel < INA3221_NR_OF_CHANNELS) then
      data = _ina3221_read_data_word(_INA3221_REGISTER_MASK_ENABLE) 
      case channel of
         INA3221_CHANNEL_1: data = (data & !_INA3221_MASK_SUMMATION_CHANNEL_1)
         INA3221_CHANNEL_2: data = (data & !_INA3221_MASK_SUMMATION_CHANNEL_2)
         INA3221_CHANNEL_3: data = (data & !_INA3221_MASK_SUMMATION_CHANNEL_3)
      end case
      _ina3221_write_data_word(_INA3221_REGISTER_MASK_ENABLE, data)
    end if 

end procedure


-- -----------------------------------------------------------------------------
-- Enable the warning alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_warning_alert_latch() is

   var word data 

   data = _ina3221_read_data_word(_INA3221_REGISTER_MASK_ENABLE) | 
          _INA3221_MASK_WARNING_ALERT_LATCH
   _ina3221_write_data_word(_INA3221_REGISTER_MASK_ENABLE, data)

end procedure


-- -----------------------------------------------------------------------------
-- Disable the warning alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_warning_alert_latch() is

   var word data 

   data = _ina3221_read_data_word(_INA3221_REGISTER_MASK_ENABLE) & 
          !_INA3221_MASK_WARNING_ALERT_LATCH
   _ina3221_write_data_word(_INA3221_REGISTER_MASK_ENABLE, data)

end procedure


-- -----------------------------------------------------------------------------
-- Enable the critical alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_enable_critical_alert_latch() is

   var word data 

   data = _ina3221_read_data_word(_INA3221_REGISTER_MASK_ENABLE) | 
          _INA3221_MASK_CRITICAL_ALERT_LATCH
   _ina3221_write_data_word(_INA3221_REGISTER_MASK_ENABLE, data)

end procedure


-- -----------------------------------------------------------------------------
-- Disable the critical alert latch.
-- -----------------------------------------------------------------------------
procedure ina3221_disable_critical_alert_latch() is

   var word data 

   data = _ina3221_read_data_word(_INA3221_REGISTER_MASK_ENABLE) & 
          !_INA3221_MASK_CRITICAL_ALERT_LATCH
          _ina3221_write_data_word(_INA3221_REGISTER_MASK_ENABLE, data)

end procedure


-- -----------------------------------------------------------------------------
-- Set the averaging mode with the given number of samples.
-- -----------------------------------------------------------------------------
procedure ina3221_set_averaging_samples(bit*3 in samples) is 

   var word data  
   var bit*3 data_samples at data:9 -- Bits 9..11

   data = _ina3221_read_data_word(_INA3221_REGISTER_CONFIGURATION) 
   data_samples = samples
   _ina3221_write_data_word(_INA3221_REGISTER_CONFIGURATION, data)

end procedure


-- -----------------------------------------------------------------------------
-- Set bus voltage conversion time. 
-- -----------------------------------------------------------------------------
procedure ina3221_set_bus_voltage_conversion_time(bit*3 in time) is 

   var word data  
   var bit*3 data_time at data:6 -- Bits 6..8

   data = _ina3221_read_data_word(_INA3221_REGISTER_CONFIGURATION) 
   data_time = time
   _ina3221_write_data_word(_INA3221_REGISTER_CONFIGURATION, data)

end procedure


-- -----------------------------------------------------------------------------
-- Set shunt voltage conversion time. 
-- -----------------------------------------------------------------------------
procedure ina3221_set_shunt_voltage_conversion_time(bit*3 in time) is 

   var word data  
   var bit*3 data_time at data:3 -- Bits 3..5

   data = _ina3221_read_data_word(_INA3221_REGISTER_CONFIGURATION) 
   data_time = time
   _ina3221_write_data_word(_INA3221_REGISTER_CONFIGURATION, data)

end procedure


-- -----------------------------------------------------------------------------
-- Set operating mode.
-- -----------------------------------------------------------------------------
procedure ina3221_set_operating_mode(bit*3 in mode) is 

   var word data  
   var bit*3 data_mode at data:0 -- Bits 0..2

   data = _ina3221_read_data_word(_INA3221_REGISTER_CONFIGURATION) 
   data_mode = mode
   _ina3221_write_data_word(_INA3221_REGISTER_CONFIGURATION, data)

end procedure


-- -----------------------------------------------------------------------------
-- Get the ID of the manufacturer. Should be 0x5449.
-- -----------------------------------------------------------------------------
function get_manufacturer_id() return word is

   return _ina3221_read_data_word(_INA3221_REGISTER_MANUFACTURER_ID)

end function


-- -----------------------------------------------------------------------------
-- Get the ID of the DIE. Should be 0x3220.
-- -----------------------------------------------------------------------------
function get_die_id() return word is

   return _ina3221_read_data_word(_INA3221_REGISTER_DIE_ID)

end function


-- -----------------------------------------------------------------------------
-- Get the contents of the given register.
-- -----------------------------------------------------------------------------
function ina3221_get_register_value(byte in register) return word is

   return _ina3221_read_data_word(register)

end function


-- ----------------------------------------------------------------------------- 
-- Returns TRUE if a timeout occured in one of the read functions or in case of
-- timeout on the IIC bus if the IIC timeout is defined. Value is cleared after
-- a call to this function. 
-- ----------------------------------------------------------------------------- 
function ina3221_timeout_occured() return bit is

   var bit temp

   temp = _ina3221_did_timeout
   _ina3221_did_timeout = FALSE

   return temp

end function


-- ----------------------------------------------------------------------------- 
-- ----------------- Private functions and procedures --------------------------
-- ----------------------------------------------------------------------------- 


-- -----------------------------------------------------------------------------
-- Read a word from the given register of the ina3221 via the IIC interface.
-- In case of an error the timeout flag is set.
-- -----------------------------------------------------------------------------
function _ina3221_read_data_word(byte in register) return word is

   var word data
   var byte data_byte[2] at data
   var bit response

   -- First write register then switch to reading the data. 
   i2c_start()
   response = i2c_transmit_byte(_ina3221_iic_address)
   response = response & i2c_transmit_byte(register)
   i2c_restart()
   response = response & i2c_transmit_byte(_ina3221_iic_address | 0b0000_0001)
   -- High byte first.
   data_byte[1] = i2c_receive_byte(TRUE) 
   data_byte[0] = i2c_receive_byte(FALSE) 
   i2c_stop()

   if !response then
      _ina3221_did_timeout = TRUE
   end if 

   return data

end function


-- -----------------------------------------------------------------------------
-- Write a word to the given register of the ina3221 via the IIC interface.
-- In case of an error the timeout flag is set.
-- -----------------------------------------------------------------------------
procedure _ina3221_write_data_word(byte in register, word in data) is

   var byte data_byte[2] at data
   var bit response

   i2c_start()
   response = i2c_transmit_byte(_ina3221_iic_address)
   response = response & i2c_transmit_byte(register)
   -- High byte first.
   response = response & i2c_transmit_byte(data_byte[1])
   response = response & i2c_transmit_byte(data_byte[0])
   i2c_stop()

   if !response then
      _ina3221_did_timeout = TRUE
   end if 

end procedure


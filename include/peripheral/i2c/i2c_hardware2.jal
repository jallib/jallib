-- ----------------------------------------------------------------------------
-- Title: I2C hardware2 library.
-- Author: Rob Jansen, Copyright (C) 2025..2025, all rights reserved.
-- Adapted-by: 
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Hardware implementation of I2C 2 (single) master.
--
-- Define i2c pins like:
-- alias i2c_scl2_direction  is pin_c4_direction
-- alias i2c_sda2_direction  is pin_c5_direction
--
-- Optional settings: 
-- const bit  _i2c_level2     = TRUE  -- i2c levels (not SMB), default.
-- const byte _i2c_bus_speed2 = 1     -- 100kHz, default
--
-- Note that _i2c_bus_speed2 can be overruled by a user defined bus speed.
-- The range is depending on the target_clock. This is an optional setting:
--   const i2c_USER_BUS_SPEED2 = 50_000 -- Bus speed is in Hz.
--
-- The user can define a timeout as to prevent a hangup in case something goes wrong.
-- The timing is not exact but uses a reference of around 1 us as miniumum.
-- This is an optional setting:
--   const word I2C_HARDWARE_TIMEOUT2 = 10_000  -- Timeout is al least 10 ms.
--
-- Sources: Based on i2c_hardware.jal by Joep Suijs.
--

-- Aliases to support other PICs.
if defined(PIR3_SSP2IF) then
   alias PIR2_SSP2IF is PIR3_SSP2IF
end if

-- Default is i2c levels (not SMB) when not defined. 
if !defined(_i2c_level2) then
   const bit _i2c_level2 = TRUE
end if 

-- Default speed is 100 kHz when not defined. 
if !defined(_i2c_bus_speed2) then
   const byte _i2c_bus_speed2 = 1   
end if 

-- --------------------------------------------------------------------
-- Some constants needed for the baudrate generator.
-- Can be overruled by I2C_USER_BUS_SPEED2.
-- --------------------------------------------------------------------
const _i2c_slowest2 = 127  -- (40 kHz @ 20 MHz Fosc)
const _i2c_100khz2  = target_clock /   100_000 / 4 - 1 -- (default)
const _i2c_400khz2  = target_clock /   400_000 / 4 - 1
const _i2c_1mhz2    = target_clock / 1_000_000 / 4 - 1
-- --------------------------------------------------------------------

-- --------------------------------------------------------------------
-- if the device has changed, change the speed if necessary
-- --------------------------------------------------------------------
procedure i2c_initialize2() is

   -- i2c requires to set TRIS bits to INPUT
   i2c_scl2_direction = INPUT
   i2c_sda2_direction = INPUT

   SSP2CON1 = 0b0010_1000   -- set up as master device
   SSP2CON2 = 0b0010_0000   -- sets default acknowledge bit value

   -- set correct speed
   if defined(I2C_USER_BUS_SPEED2) then
      SSP2ADD =  byte(target_clock / I2C_USER_BUS_SPEED2 / 4) - 1
   else
      if    _i2c_bus_speed2 == 10 then SSP2ADD = _i2c_1mhz2
      elsif _i2c_bus_speed2 ==  4 then SSP2ADD = _i2c_400khz2 
      elsif _i2c_bus_speed2 ==  1 then SSP2ADD = _i2c_100khz2
      elsif _i2c_bus_speed2 ==  0 then SSP2ADD = _i2c_slowest2
      else                             SSP2ADD = _i2c_100khz2  -- default
      end if
   end if

   -- set correct level
   -- SMP-bit7 = 0, slew rate enabled, better for EMC
   if _i2c_level2 then
      SSP2STAT = 0b_0000_0000  -- i2c bus levels, CKE=0
   else
      SSP2STAT = 0b_0100_0000  -- SMbus levels, CKE=1
   end if

end procedure


-- -----------------------------------------------------------------------------
-- Sends Start bit and waits until finished or timeout (if defined)
-- -----------------------------------------------------------------------------
procedure i2c_start2() is

   SSP2CON2_SEN = HIGH
   if defined(I2C_HARDWARE_TIMEOUT2) then
      -- With timeout.
     var word timeout_counter = 0
      while SSP2CON2_SEN & (timeout_counter != I2C_HARDWARE_TIMEOUT2) loop
         timeout_counter = timeout_counter + 1
         _usec_delay(1)
      end loop
   else
      -- Without timeout.
      while SSP2CON2_SEN loop end loop
   end if

end procedure


-- -----------------------------------------------------------------------------
-- Sends Restart bit and waits until finished or timeout (if defined)
-- -----------------------------------------------------------------------------
procedure i2c_restart2() is

   SSP2CON2_RSEN = HIGH
   if defined(I2C_HARDWARE_TIMEOUT2) then
      -- With timeout.
      var word timeout_counter = 0
      while SSP2CON2_RSEN & (timeout_counter != I2C_HARDWARE_TIMEOUT2) loop
         timeout_counter = timeout_counter + 1
         _usec_delay(1)
      end loop
   else
      -- Without timeout.
      while SSP2CON2_RSEN loop end loop
   end if

end procedure


-- -----------------------------------------------------------------------------
-- Sends Stop bit and waits until finished or timeout (if defined)
-- -----------------------------------------------------------------------------
procedure i2c_stop2() is

   SSP2CON2_PEN = HIGH
   if defined(I2C_HARDWARE_TIMEOUT2) then
      -- With timeout.
      var word timeout_counter = 0
      while SSP2CON2_PEN & (timeout_counter != I2C_HARDWARE_TIMEOUT2) loop
         timeout_counter = timeout_counter + 1
         _usec_delay(1)
      end loop
   else
      -- Without timeout.
      while SSP2CON2_PEN loop end loop
   end if

end procedure


-- -----------------------------------------------------------------------------
-- Returns TRUE when OK and FALSE in case of an error or when a timeout occurs 
-- (if defined)
-- -----------------------------------------------------------------------------
function i2c_transmit_byte2(byte in data) return bit is

   var bit succes = TRUE

   PIR2_SSP2IF = FALSE  -- clear pending flag
   SSP2BUF = data       -- write data

   -- wait until write is finished
   if defined(I2C_HARDWARE_TIMEOUT2) then
     -- With timeout.
      var word timeout_counter = 0
      while !PIR2_SSP2IF & (timeout_counter != I2C_HARDWARE_TIMEOUT2) loop
         timeout_counter = timeout_counter + 1
         _usec_delay(1)
      end loop

      if (timeout_counter == I2C_HARDWARE_TIMEOUT2) then
         succes = FALSE
      else
         -- get Acknowledge Status Bit _ACKSTAT
         -- which indicates that the slave has responded (or not)
         -- if i2c device send an Aknowledge, then ready and OK
         if !SSP2CON2_ACKSTAT then
            succes = TRUE -- okay
         else
            SSP2CON1_SSPEN = FALSE
            SSP2CON1_SSPEN = TRUE
            succes = FALSE -- no response
         end if
      end if
   else
      -- Without timeout.
      while !PIR2_SSP2IF loop end loop

      -- get Acknowledge Status Bit _ACKSTAT
      -- wich indicates that the slave has responded (or not)
      -- if i2c device send an Aknowledge, then ready and OK
      if !SSP2CON2_ACKSTAT  then
         succes = TRUE -- okay
      else
         SSP2CON1_SSPEN = FALSE
         SSP2CON1_SSPEN = TRUE
         succes = FALSE -- no response
      end if
   end if

   return succes

end function


-- -----------------------------------------------------------------------------
-- start receiving of a byte and waits till finished or timeout (if defined)
-- if param ACK is TRUE, the byte is acknowledged and next bytes can be received.
-- if param ACK is FALSE, the byte is nacked and a stop *should be* sent.
-- -----------------------------------------------------------------------------
function i2c_receive_byte2(bit in ACK) return byte is

   var byte data

   -- start receive cyclus and wait till full byte received
   SSP2CON2_RCEN = HIGH

   if defined(I2C_HARDWARE_TIMEOUT2) then
     -- With timeout.
      var word timeout_counter = 0
   while !SSP2STAT_BF & (timeout_counter != I2C_HARDWARE_TIMEOUT2) loop
         timeout_counter = timeout_counter + 1
         _usec_delay(1)
      end loop
   else
      -- Without timeout.
      while !SSP2STAT_BF loop end loop
   end if

   -- send Acknowledge (=LOW) if STOP=TRUE=HIGH
   -- and wait till finishd
   SSP2CON2_ACKDT = !ACK
   SSP2CON2_ACKEN = HIGH

   if defined(I2C_HARDWARE_TIMEOUT2) then
     -- With timeout.
      while SSP2CON2_ACKEN & (timeout_counter != I2C_HARDWARE_TIMEOUT2) loop
         timeout_counter = timeout_counter + 1
         _usec_delay(1)
      end loop
   else
      -- Without timeout.
      while SSP2CON2_ACKEN loop end loop
   end if

   -- get read data
   data = SSP2BUF

   return data

end function

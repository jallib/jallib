-- Title: CRC16-CCITT Lookup Table Implementation Library
-- Author: Matthew Schinkel
-- Compiler: >=2.4r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: CRC16-CCITT implementation using lookup table for maximum speed.
-- This version splits the large table into smaller chunks to avoid 8-bit PIC memory issues.
-- Provides identical results to the bitwise implementation but with better performance.
--
-- CRC16-CCITT Implementation Details:
-- Polynomial: 0x1021 (x¹⁶ + x¹² + x⁵ + 1)
-- Initial Value: 0x0000
-- Final XOR: 0x0000 (none)
-- Input Reflection: No
-- Output Reflection: No
--
-- Performance: Lookup table implementation - faster than bitwise but uses more memory
-- Memory Layout: 4 separate 64-entry tables (CRC16_TABLE_0 through CRC16_TABLE_3)
-- Compatibility: Full compatibility with bitwise implementation - identical results
--
-- Test Data: "1234" = [0x31, 0x32, 0x33, 0x34]
-- Expected CRC Value: 0xD789 (verified by JAL sample)
--

-- CRC16-CCITT constants
const word CRC16_POLYNOMIAL = 0x1021

-- CRC16 lookup table split into smaller chunks to avoid memory issues
-- Table 0: indices 0x00-0x3F (0-63)
const word CRC16_TABLE_0[64] = {
   0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
   0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
   0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
   0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
   0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
   0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
   0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
   0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC
}

-- Table 1: indices 0x40-0x7F (64-127)
const word CRC16_TABLE_1[64] = {
   0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
   0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
   0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
   0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
   0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
   0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
   0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
   0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78
}

-- Table 2: indices 0x80-0xBF (128-191)
const word CRC16_TABLE_2[64] = {
   0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
   0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
   0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
   0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
   0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
   0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
   0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
   0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634
}

-- Table 3: indices 0xC0-0xFF (192-255)
const word CRC16_TABLE_3[64] = {
   0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
   0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
   0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
   0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
   0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
   0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
   0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
   0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
}

-- CRC16 lookup table state variables
var word _crc16_current_crc_crc
var word _crc16_bytes_processed_crc
var word _crc16_total_bytes_expected_crc
var word _crc16_final_result_crc
var bit _crc16_calculation_complete_crc
var bit _crc16_error_occurred_crc
var byte _crc16_error_type_crc = CRC_ERROR_SUCCESS

-- Aliases for SD card compatibility (defined after functions)

--------------------------------------------------------------------------------
-- Get lookup table value based on index
-- Parameters: index - table index (0-255)
-- Returns: CRC16 table value for the given index
-- Retrieves the appropriate CRC16 table value from one of four 64-entry tables
--------------------------------------------------------------------------------
function crc16_get_table_value(byte in index) return word is
   var byte table_index
   var word result
   
   if index < 0x40 then
      -- Use table 0 (indices 0x00-0x3F)
      table_index = index
      result = CRC16_TABLE_0[table_index]
   elsif index < 0x80 then
      -- Use table 1 (indices 0x40-0x7F)
      table_index = index - 0x40
      result = CRC16_TABLE_1[table_index]
   elsif index < 0xC0 then
      -- Use table 2 (indices 0x80-0xBF)
      table_index = index - 0x80
      result = CRC16_TABLE_2[table_index]
   else
      -- Use table 3 (indices 0xC0-0xFF)
      table_index = index - 0xC0
      result = CRC16_TABLE_3[table_index]
   end if
   
   return result
end function

--------------------------------------------------------------------------------
-- Initialize CRC16 calculation
-- Parameters: total_bytes - expected number of bytes to process
-- Initializes CRC calculation state and sets up for incremental processing
--------------------------------------------------------------------------------
procedure crc16_init(byte in total_bytes) is
   _crc16_current_crc_crc = 0
   _crc16_final_result_crc = 0
   _crc16_bytes_processed_crc = 0
   _crc16_total_bytes_expected_crc = total_bytes
   _crc16_calculation_complete_crc = FALSE
   _crc16_error_occurred_crc = FALSE
   _crc16_error_type_crc = CRC_ERROR_SUCCESS
end procedure

--------------------------------------------------------------------------------
-- Calculate CRC16 for a single byte using lookup table
-- Parameters: data - single byte to process
-- Updates internal CRC state with new data byte using lookup table algorithm
--------------------------------------------------------------------------------
procedure crc16_calculate_bytes(byte in data) is
   var byte table_index
   _crc16_error_occurred_crc = FALSE
   _crc16_error_type_crc = CRC_ERROR_SUCCESS
   
   -- Lookup table algorithm (CRC16-CCITT) - matches bitwise implementation exactly
   -- Step 1: XOR data byte (shifted left 8 bits) with current CRC (same as bitwise)
   _crc16_current_crc_crc = _crc16_current_crc_crc ^ (word(data) << 8)
   
   -- Step 2: Use lookup table to replace the 8-bit processing loop
   -- The lookup table maps high byte values to their 8-iteration processed results
   table_index = byte(_crc16_current_crc_crc >> 8)
   _crc16_current_crc_crc = ((_crc16_current_crc_crc & 0x00FF) << 8) ^ crc16_get_table_value(table_index)
   
   _crc16_bytes_processed_crc = _crc16_bytes_processed_crc + 1
   if _crc16_bytes_processed_crc >= _crc16_total_bytes_expected_crc then
      _crc16_final_result_crc = _crc16_current_crc_crc
      _crc16_calculation_complete_crc = TRUE
   end if
end procedure

--------------------------------------------------------------------------------
-- Get CRC16 result
-- Returns: calculated CRC16 value
-- Returns the current CRC16 value (intermediate or final)
--------------------------------------------------------------------------------
function crc16_get_result() return word is
   if _crc16_calculation_complete_crc then
      return _crc16_final_result_crc
   else
      return FALSE
   end if
end function

--------------------------------------------------------------------------------
-- Check if calculation is complete
-- Returns: TRUE if calculation is complete, FALSE otherwise
-- Indicates whether the CRC calculation has been finalized
--------------------------------------------------------------------------------
function crc16_is_complete() return bit is
   return _crc16_calculation_complete_crc
end function

--------------------------------------------------------------------------------
-- Check if error occurred
-- Returns: TRUE if error occurred, FALSE otherwise
-- Indicates whether an error was detected during CRC calculation
--------------------------------------------------------------------------------
function crc16_has_error() return bit is
   return _crc16_error_occurred_crc
end function

--------------------------------------------------------------------------------
-- Get error type
-- Returns: error type code
-- Returns the specific type of error that occurred during calculation
--------------------------------------------------------------------------------
function crc16_get_error_type() return byte is
   return _crc16_error_type_crc
end function

--------------------------------------------------------------------------------
-- Verify CRC16 result
-- Parameters: calculated - computed CRC value, expected - expected CRC value
-- Returns: TRUE if CRC values match, FALSE otherwise
-- Compares calculated CRC against expected value for validation
--------------------------------------------------------------------------------
function crc16_verify(word in calculated, word in expected) return bit is
   if calculated == expected then
      return TRUE
   else
      _crc16_error_occurred_crc = TRUE
      _crc16_error_type_crc = CRC_ERROR_INVALID_PARAMETER
      return FALSE
   end if
end function

-- Aliases for SD card compatibility
alias crc16_start is crc16_init
-- crc16_get_result is already defined, no alias needed

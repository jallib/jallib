-- ------------------------------------------------
-- Title: JalV2 device include file for 16f83
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f83, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC16F83.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Fri Mar  7 10:07:14 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x0000            -- ID for PIC programmer
const  word  CHIP_ID     = 0x6C83            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "16F83"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_14       -- (banks=2)
pragma  target  chip     16F83
pragma  target  bank     0x0080
pragma  target  page     0x0800
pragma  stack            8
pragma  code             512
pragma  eeprom           0x2100,64
pragma  ID               0x2000,4
pragma  data             0xC-0x2F
pragma  shared           0xC-0x2F
--
var volatile byte _pic_accum at 0x2F      -- (compiler)
var volatile byte _pic_isr_w at 0x2E      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0x2007
const word   _FUSES                = 0x3FFF
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80 }
var volatile byte   _ind                      at { 0x0,0x80 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82 }
var volatile byte   _pcl                      at { 0x2,0x82 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit    STATUS_RP0                at STATUS : 5
var volatile bit    STATUS_RP1                at STATUS : 6
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3,0x83 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _irp                      =  7
const        byte   _rp0                      =  5
const        byte   _rp1                      =  6
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84 }
var volatile byte   _fsr                      at { 0x4,0x84 }
-- ------------------------------------------------
var volatile byte   PORTA_                    at { 0x5 }
--
var          byte   PORTA                     at PORTA_
var volatile byte   PORTA_shadow_             at 0x2D
--
procedure PORTA'put(byte in x at PORTA_shadow_) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
procedure PORTA_low'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0xF0) | (x & 0x0F)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0x0F) | (x << 4)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    pin_A0                    at PORTA_ : 0
--
procedure pin_A0'put(bit in x at PORTA_shadow_ : 0) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    pin_A1                    at PORTA_ : 1
--
procedure pin_A1'put(bit in x at PORTA_shadow_ : 1) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    pin_A2                    at PORTA_ : 2
--
procedure pin_A2'put(bit in x at PORTA_shadow_ : 2) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA_ : 3
--
procedure pin_A3'put(bit in x at PORTA_shadow_ : 3) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    pin_A4                    at PORTA_ : 4
alias               pin_T0CKI                 is pin_A4
--
procedure pin_A4'put(bit in x at PORTA_shadow_ : 4) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTB_                    at { 0x6 }
--
var          byte   PORTB                     at PORTB_
var volatile byte   PORTB_shadow_             at 0x2C
--
procedure PORTB'put(byte in x at PORTB_shadow_) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
procedure PORTB_low'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0xF0) | (x & 0x0F)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0x0F) | (x << 4)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    pin_B0                    at PORTB_ : 0
--
procedure pin_B0'put(bit in x at PORTB_shadow_ : 0) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    pin_B1                    at PORTB_ : 1
--
procedure pin_B1'put(bit in x at PORTB_shadow_ : 1) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    pin_B2                    at PORTB_ : 2
--
procedure pin_B2'put(bit in x at PORTB_shadow_ : 2) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    pin_B3                    at PORTB_ : 3
--
procedure pin_B3'put(bit in x at PORTB_shadow_ : 3) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    pin_B4                    at PORTB_ : 4
--
procedure pin_B4'put(bit in x at PORTB_shadow_ : 4) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    pin_B5                    at PORTB_ : 5
--
procedure pin_B5'put(bit in x at PORTB_shadow_ : 5) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    pin_B6                    at PORTB_ : 6
--
procedure pin_B6'put(bit in x at PORTB_shadow_ : 6) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    pin_B7                    at PORTB_ : 7
--
procedure pin_B7'put(bit in x at PORTB_shadow_ : 7) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x8 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x9 }
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B }
var volatile bit    INTCON_RBIF               at INTCON : 0
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
alias               INTCON_TMR0IF             is INTCON_T0IF
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
alias               INTCON_TMR0IE             is INTCON_T0IE
var volatile bit    INTCON_EEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81 }
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_NRBPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_PS0            at OPTION_REG : 0
var volatile bit    OPTION_REG_PS1            at OPTION_REG : 1
var volatile bit    OPTION_REG_PS2            at OPTION_REG : 2
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_T0CKI_direction       is pin_A4_direction
--
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0x86 }
alias               PORTB_direction           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB0              at TRISB : 0
var volatile bit    pin_B0_direction          at TRISB : 0
--
var volatile bit    TRISB_TRISB1              at TRISB : 1
var volatile bit    pin_B1_direction          at TRISB : 1
--
var volatile bit    TRISB_TRISB2              at TRISB : 2
var volatile bit    pin_B2_direction          at TRISB : 2
--
var volatile bit    TRISB_TRISB3              at TRISB : 3
var volatile bit    pin_B3_direction          at TRISB : 3
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
var volatile bit    pin_B4_direction          at TRISB : 4
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
var volatile bit    pin_B5_direction          at TRISB : 5
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
var volatile bit    pin_B6_direction          at TRISB : 6
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
var volatile bit    pin_B7_direction          at TRISB : 7
--
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x88 }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_EEIF               at EECON1 : 4
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x89 }
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 0
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0xC-0x2B
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x3 {                -- Oscillator Selection bits
       RC_CLKOUT = 0x3                   -- RC oscillator
       HS = 0x2                          -- HS oscillator
       XT = 0x1                          -- XT oscillator
       LP = 0x0                          -- LP oscillator
       }
pragma fuse_def WDT 0x4 {                -- Watchdog Timer
       ENABLED = 0x4                     -- WDT enabled
       DISABLED = 0x0                    -- WDT disabled
       }
pragma fuse_def PWRTE 0x8 {              -- Power-up Timer Enable bit
       DISABLED = 0x8                    -- Power-up Timer is disabled
       ENABLED = 0x0                     -- Power-up Timer is enabled
       }
pragma fuse_def CP 0x3FF0 {              -- Code Protection bit
       DISABLED = 0x3FF0                 -- Code protection disabled
       ENABLED = 0x0                     -- All program memory is code protected
       }
--

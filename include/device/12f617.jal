-- ------------------------------------------------
-- Title: JalV2 device include file for 12f617
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic12f617, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC12F617.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:14 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x1360            -- ID for PIC programmer
const  word  CHIP_ID     = 0xF617            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "12F617"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_14       -- (banks=2)
pragma  target  chip     12F617
pragma  target  bank     0x0080
pragma  target  page     0x0800
pragma  stack            8
pragma  code             2048
pragma  ID               0x2000,4
pragma  data             0x20-0x7F,0xA0-0xBF
pragma  shared           0x70-0x7F
--
var volatile byte _pic_accum at 0x7F      -- (compiler)
var volatile byte _pic_isr_w at 0x7E      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0x2007
const word   _FUSES                = 0x3FFF
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80 }
var volatile byte   _ind                      at { 0x0,0x80 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82 }
var volatile byte   _pcl                      at { 0x2,0x82 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit    STATUS_RP0                at STATUS : 5
var volatile bit    STATUS_RP1                at STATUS : 6
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3,0x83 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _irp                      =  7
const        byte   _rp0                      =  5
const        byte   _rp1                      =  6
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84 }
var volatile byte   _fsr                      at { 0x4,0x84 }
-- ------------------------------------------------
var volatile byte   GPIO_                     at { 0x5 }
alias               PORTA_                    is GPIO_
--
var          byte   PORTA                     at PORTA_
var volatile byte   PORTA_shadow_             at 0x7D
--
procedure PORTA'put(byte in x at PORTA_shadow_) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
procedure PORTA_low'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0xF0) | (x & 0x0F)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0x0F) | (x << 4)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    GPIO_GP0                  at GPIO_ : 0
var volatile bit    pin_A0                    at GPIO_ : 0
alias               pin_GP0                   is pin_A0
alias               pin_AN0                   is pin_A0
alias               pin_C1IN_POS              is pin_A0
alias               pin_P1B_RA0               is pin_A0
--
procedure pin_A0'put(bit in x at PORTA_shadow_ : 0) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP1                  at GPIO_ : 1
var volatile bit    pin_A1                    at GPIO_ : 1
alias               pin_GP1                   is pin_A1
alias               pin_AN1                   is pin_A1
alias               pin_C1IN0_NEG             is pin_A1
alias               pin_VREF                  is pin_A1
--
procedure pin_A1'put(bit in x at PORTA_shadow_ : 1) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP2                  at GPIO_ : 2
var volatile bit    pin_A2                    at GPIO_ : 2
alias               pin_GP2                   is pin_A2
alias               pin_AN2                   is pin_A2
alias               pin_T0CKI                 is pin_A2
alias               pin_C1OUT                 is pin_A2
alias               pin_CCP1                  is pin_A2
alias               pin_P1A_RA2               is pin_A2
--
procedure pin_A2'put(bit in x at PORTA_shadow_ : 2) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP3                  at GPIO_ : 3
var volatile bit    pin_A3                    at GPIO_ : 3
alias               pin_GP3                   is pin_A3
alias               pin_T1G_RA3               is pin_A3
--
procedure pin_A3'put(bit in x at PORTA_shadow_ : 3) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP4                  at GPIO_ : 4
var volatile bit    pin_A4                    at GPIO_ : 4
alias               pin_GP4                   is pin_A4
alias               pin_AN3                   is pin_A4
alias               pin_C1IN1_NEG             is pin_A4
alias               pin_T1G_RA4               is pin_A4
alias               pin_P1B_RA4               is pin_A4
alias               pin_OSC2                  is pin_A4
alias               pin_CLKOUT                is pin_A4
--
procedure pin_A4'put(bit in x at PORTA_shadow_ : 4) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP5                  at GPIO_ : 5
var volatile bit    pin_A5                    at GPIO_ : 5
alias               pin_GP5                   is pin_A5
alias               pin_T1CKI                 is pin_A5
alias               pin_P1A_RA5               is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at PORTA_shadow_ : 5) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_RA0                  at GPIO_ : 0
var volatile bit    GPIO_RA1                  at GPIO_ : 1
var volatile bit    GPIO_RA2                  at GPIO_ : 2
var volatile bit    GPIO_RA3                  at GPIO_ : 3
var volatile bit    GPIO_RA4                  at GPIO_ : 4
var volatile bit    GPIO_RA5                  at GPIO_ : 5
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B }
var volatile bit    INTCON_GPIF               at INTCON : 0
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
alias               INTCON_TMR0IF             is INTCON_T0IF
var volatile bit    INTCON_GPIE               at INTCON : 3
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
alias               INTCON_TMR0IE             is INTCON_T0IE
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_CMIF                 at PIR1 : 3
var volatile bit    PIR1_CCP1IF               at PIR1 : 5
alias               PIR1_CCPIF                is PIR1_CCP1IF
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_C1IF                 at PIR1 : 3
var volatile bit    PIR1_ECCPIF               at PIR1 : 5
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
alias               T1CON_T1SYNC              is T1CON_NT1SYNC
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_TMR1GE              at T1CON : 6
var volatile bit    T1CON_T1GINV              at T1CON : 7
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x11 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x12 }
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_T2CKPS0             at T2CON : 0
var volatile bit    T2CON_T2CKPS1             at T2CON : 1
var volatile bit    T2CON_TOUTPS0             at T2CON : 3
var volatile bit    T2CON_TOUTPS1             at T2CON : 4
var volatile bit    T2CON_TOUTPS2             at T2CON : 5
var volatile bit    T2CON_TOUTPS3             at T2CON : 6
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x13 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x13 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x14 }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x15 }
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
alias               CCP1CON_MODE              is CCP1CON_CCP1M
var volatile bit*2  CCP1CON_DCB               at CCP1CON : 4
var volatile bit    CCP1CON_P1M               at CCP1CON : 7
var volatile bit    CCP1CON_CCP1M0            at CCP1CON : 0
var volatile bit    CCP1CON_CCP1M1            at CCP1CON : 1
var volatile bit    CCP1CON_CCP1M2            at CCP1CON : 2
var volatile bit    CCP1CON_CCP1M3            at CCP1CON : 3
var volatile bit    CCP1CON_DCB0              at CCP1CON : 4
var volatile bit    CCP1CON_DCB1              at CCP1CON : 5
-- ------------------------------------------------
var volatile byte   PWM1CON                   at { 0x16 }
var volatile bit*7  PWM1CON_PDC               at PWM1CON : 0
var volatile bit    PWM1CON_PRSEN             at PWM1CON : 7
var volatile bit    PWM1CON_PDC0              at PWM1CON : 0
var volatile bit    PWM1CON_PDC1              at PWM1CON : 1
var volatile bit    PWM1CON_PDC2              at PWM1CON : 2
var volatile bit    PWM1CON_PDC3              at PWM1CON : 3
var volatile bit    PWM1CON_PDC4              at PWM1CON : 4
var volatile bit    PWM1CON_PDC5              at PWM1CON : 5
var volatile bit    PWM1CON_PDC6              at PWM1CON : 6
-- ------------------------------------------------
var volatile byte   ECCPAS                    at { 0x17 }
var volatile bit*2  ECCPAS_PSSBD              at ECCPAS : 0
var volatile bit*2  ECCPAS_PSSAC              at ECCPAS : 2
var volatile bit*3  ECCPAS_ECCPAS             at ECCPAS : 4
var volatile bit    ECCPAS_ECCPASE            at ECCPAS : 7
var volatile bit    ECCPAS_PSSBD0             at ECCPAS : 0
var volatile bit    ECCPAS_PSSBD1             at ECCPAS : 1
var volatile bit    ECCPAS_PSSAC0             at ECCPAS : 2
var volatile bit    ECCPAS_PSSAC1             at ECCPAS : 3
var volatile bit    ECCPAS_ECCPAS0            at ECCPAS : 4
var volatile bit    ECCPAS_ECCPAS1            at ECCPAS : 5
var volatile bit    ECCPAS_ECCPAS2            at ECCPAS : 6
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x19 }
var volatile bit*4  VRCON_VR                  at VRCON : 0
var volatile bit    VRCON_FVREN               at VRCON : 4
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit    VRCON_CMVREN              at VRCON : 7
var volatile bit    VRCON_VR0                 at VRCON : 0
var volatile bit    VRCON_VR1                 at VRCON : 1
var volatile bit    VRCON_VR2                 at VRCON : 2
var volatile bit    VRCON_VR3                 at VRCON : 3
var volatile bit    VRCON_C1VREN              at VRCON : 7
-- ------------------------------------------------
var volatile byte   CMCON0                    at { 0x1A }
var volatile bit    CMCON0_CMCH               at CMCON0 : 0
var volatile bit    CMCON0_CMR                at CMCON0 : 2
var volatile bit    CMCON0_CMPOL              at CMCON0 : 4
var volatile bit    CMCON0_CMOE               at CMCON0 : 5
var volatile bit    CMCON0_COUT               at CMCON0 : 6
var volatile bit    CMCON0_CMON               at CMCON0 : 7
var volatile bit    CMCON0_C1CH               at CMCON0 : 0
var volatile bit    CMCON0_C1R                at CMCON0 : 2
var volatile bit    CMCON0_C1POL              at CMCON0 : 4
var volatile bit    CMCON0_C1OE               at CMCON0 : 5
var volatile bit    CMCON0_C1OUT              at CMCON0 : 6
var volatile bit    CMCON0_C1ON               at CMCON0 : 7
-- ------------------------------------------------
var volatile byte   CMCON1                    at { 0x1C }
var volatile bit    CMCON1_CMSYNC             at CMCON1 : 0
var volatile bit    CMCON1_T1GSS              at CMCON1 : 1
var volatile bit    CMCON1_CMHYS              at CMCON1 : 3
var volatile bit    CMCON1_T1ACS              at CMCON1 : 4
var volatile bit    CMCON1_C1SYNC             at CMCON1 : 0
var volatile bit    CMCON1_C1HYS              at CMCON1 : 3
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1E }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1F }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 1
var volatile bit*3  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_VCFG               at ADCON0 : 6
var volatile bit    ADCON0_ADFM               at ADCON0 : 7
var volatile bit    ADCON0_CHS0               at ADCON0 : 2
var volatile bit    ADCON0_CHS1               at ADCON0 : 3
var volatile bit    ADCON0_CHS2               at ADCON0 : 4
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81 }
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_NGPPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_PS0            at OPTION_REG : 0
var volatile bit    OPTION_REG_PS1            at OPTION_REG : 1
var volatile bit    OPTION_REG_PS2            at OPTION_REG : 2
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISIO                    at { 0x85 }
alias               TRISA                     is TRISIO
alias               PORTA_direction           is TRISIO
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISIO_TRISIO0            at TRISIO : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_GP0_direction         is pin_A0_direction
alias               pin_AN0_direction         is pin_A0_direction
alias               pin_C1IN_POS_direction    is pin_A0_direction
alias               pin_P1B_RA0_direction     is pin_A0_direction
--
var volatile bit    TRISIO_TRISIO1            at TRISIO : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_GP1_direction         is pin_A1_direction
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_C1IN0_NEG_direction   is pin_A1_direction
alias               pin_VREF_direction        is pin_A1_direction
--
var volatile bit    TRISIO_TRISIO2            at TRISIO : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_GP2_direction         is pin_A2_direction
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_C1OUT_direction       is pin_A2_direction
alias               pin_CCP1_direction        is pin_A2_direction
alias               pin_P1A_RA2_direction     is pin_A2_direction
--
var volatile bit    TRISIO_TRISIO3            at TRISIO : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_GP3_direction         is pin_A3_direction
alias               pin_T1G_RA3_direction     is pin_A3_direction
--
var volatile bit    TRISIO_TRISIO4            at TRISIO : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_GP4_direction         is pin_A4_direction
alias               pin_AN3_direction         is pin_A4_direction
alias               pin_C1IN1_NEG_direction   is pin_A4_direction
alias               pin_T1G_RA4_direction     is pin_A4_direction
alias               pin_P1B_RA4_direction     is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_CLKOUT_direction      is pin_A4_direction
--
var volatile bit    TRISIO_TRISIO5            at TRISIO : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_GP5_direction         is pin_A5_direction
alias               pin_T1CKI_direction       is pin_A5_direction
alias               pin_P1A_RA5_direction     is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
var volatile bit    TRISIO_TRISA0             at TRISIO : 0
--
var volatile bit    TRISIO_TRISA1             at TRISIO : 1
--
var volatile bit    TRISIO_TRISA2             at TRISIO : 2
--
var volatile bit    TRISIO_TRISA3             at TRISIO : 3
--
var volatile bit    TRISIO_TRISA4             at TRISIO : 4
--
var volatile bit    TRISIO_TRISA5             at TRISIO : 5
--
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_CMIE                 at PIE1 : 3
var volatile bit    PIE1_CCP1IE               at PIE1 : 5
alias               PIE1_CCPIE                is PIE1_CCP1IE
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_C1IE                 at PIE1 : 3
var volatile bit    PIE1_ECCPIE               at PIE1 : 5
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_NBOR                 at PCON : 0
var volatile bit    PCON_NPOR                 at PCON : 1
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN0              at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN1              at OSCTUNE : 1
var volatile bit    OSCTUNE_TUN2              at OSCTUNE : 2
var volatile bit    OSCTUNE_TUN3              at OSCTUNE : 3
var volatile bit    OSCTUNE_TUN4              at OSCTUNE : 4
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x92 }
-- ------------------------------------------------
var volatile byte   APFCON                    at { 0x93 }
var volatile bit    APFCON_P1ASEL             at APFCON : 0
var volatile bit    APFCON_P1BSEL             at APFCON : 1
var volatile bit    APFCON_T1GSEL             at APFCON : 4
-- ------------------------------------------------
var volatile byte   WPU                       at { 0x95 }
var volatile bit    WPU_WPU0                  at WPU : 0
var volatile bit    WPU_WPU1                  at WPU : 1
var volatile bit    WPU_WPU2                  at WPU : 2
var volatile bit    WPU_WPU4                  at WPU : 4
var volatile bit    WPU_WPU5                  at WPU : 5
var volatile bit    WPU_WPUA0                 at WPU : 0
var volatile bit    WPU_WPUA1                 at WPU : 1
var volatile bit    WPU_WPUA2                 at WPU : 2
var volatile bit    WPU_WPUA4                 at WPU : 4
var volatile bit    WPU_WPUA5                 at WPU : 5
-- ------------------------------------------------
var volatile byte   IOC                       at { 0x96 }
var volatile bit    IOC_IOC0                  at IOC : 0
var volatile bit    IOC_IOC1                  at IOC : 1
var volatile bit    IOC_IOC2                  at IOC : 2
var volatile bit    IOC_IOC3                  at IOC : 3
var volatile bit    IOC_IOC4                  at IOC : 4
var volatile bit    IOC_IOC5                  at IOC : 5
var volatile bit    IOC_IOCA0                 at IOC : 0
var volatile bit    IOC_IOCA1                 at IOC : 1
var volatile bit    IOC_IOCA2                 at IOC : 2
var volatile bit    IOC_IOCA3                 at IOC : 3
var volatile bit    IOC_IOCA4                 at IOC : 4
var volatile bit    IOC_IOCA5                 at IOC : 5
-- ------------------------------------------------
var volatile byte   PMCON1                    at { 0x98 }
var volatile bit    PMCON1_RD                 at PMCON1 : 0
var volatile bit    PMCON1_WR                 at PMCON1 : 1
var volatile bit    PMCON1_WREN               at PMCON1 : 2
-- ------------------------------------------------
var volatile byte   PMCON2                    at { 0x99 }
-- ------------------------------------------------
var volatile byte   PMADRL                    at { 0x9A }
var volatile bit    PMADRL_PMADRL0            at PMADRL : 0
var volatile bit    PMADRL_PMADRL1            at PMADRL : 1
var volatile bit    PMADRL_PMADRL2            at PMADRL : 2
var volatile bit    PMADRL_PMADRL3            at PMADRL : 3
var volatile bit    PMADRL_PMADRL4            at PMADRL : 4
var volatile bit    PMADRL_PMADRL5            at PMADRL : 5
var volatile bit    PMADRL_PMADRL6            at PMADRL : 6
var volatile bit    PMADRL_PMADRL7            at PMADRL : 7
-- ------------------------------------------------
var volatile byte   PMADRH                    at { 0x9B }
var volatile bit    PMADRH_PMADRH0            at PMADRH : 0
var volatile bit    PMADRH_PMADRH1            at PMADRH : 1
var volatile bit    PMADRH_PMADRH2            at PMADRH : 2
-- ------------------------------------------------
var volatile byte   PMDATL                    at { 0x9C }
var volatile bit    PMDATL_PMDATL0            at PMDATL : 0
var volatile bit    PMDATL_PMDATL1            at PMDATL : 1
var volatile bit    PMDATL_PMDATL2            at PMDATL : 2
var volatile bit    PMDATL_PMDATL3            at PMDATL : 3
var volatile bit    PMDATL_PMDATL4            at PMDATL : 4
var volatile bit    PMDATL_PMDATL5            at PMDATL : 5
var volatile bit    PMDATL_PMDATL6            at PMDATL : 6
var volatile bit    PMDATL_PMDATL7            at PMDATL : 7
-- ------------------------------------------------
var volatile byte   PMDATH                    at { 0x9D }
var volatile bit*6  PMDATH_PMDATH             at PMDATH : 0
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x9E }
-- ------------------------------------------------
var volatile byte   ANSEL                     at { 0x9F }
var volatile bit*4  ANSEL_ANS                 at ANSEL : 0
var volatile bit*3  ANSEL_ADCS                at ANSEL : 4
var volatile bit    ANSEL_ANS0                at ANSEL : 0
var volatile bit    ANSEL_ANS1                at ANSEL : 1
var volatile bit    ANSEL_ANS2                at ANSEL : 2
var volatile bit    ANSEL_ANS3                at ANSEL : 3
var volatile bit    ANSEL_ADCS0               at ANSEL : 4
var volatile bit    ANSEL_ADCS1               at ANSEL : 5
var volatile bit    ANSEL_ADCS2               at ANSEL : 6
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 3
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSEL  = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CMCON0 = 0b0000_0000
   CMCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   analog_off()
   adc_off()
   comparator_off()
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0x70-0x7C
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x7 {                -- Oscillator Selection bits
       RC_CLKOUT = 0x7                   -- EXTRC oscillator: CLKOUT function on RA4/AN3/T1G/OSC2/CLKOUT, RC on RA5/T1CKI/OSC1/CLKIN
       RC_NOCLKOUT = 0x6                 -- EXTRCIO oscillator: I/O function on RA4/AN3/T1G/OSC2/CLKOUT, RC on RA5/T1CKI/OSC1/CLKIN
       INTOSC_CLKOUT = 0x5               -- INTOSC oscillator: CLKOUT function on RA4/AN3/T1G/OSC2/CLKOUT, I/O function on RA5/T1CKI/OSC1/CLKIN
       INTOSC_NOCLKOUT = 0x4             -- INTOSCIO oscillator: I/O function on RA4/AN3/T1G/OSC2/CLKOUT, I/O function on RA5/T1CKI/OSC1/CLKIN
       EC_NOCLKOUT = 0x3                 -- EC: I/O function on RA4/AN3/T1G/OSC2/CLKOUT, CLKIN on RA5/T1CKI/OSC1/CLKIN
       HS = 0x2                          -- HS oscillator: High-speed crystal/resonator on RA5/T1CKI/OSC1/CLKIN and RA4/AN3/T1G/OSC2/CLKOUT
       XT = 0x1                          -- XT oscillator: Crystal/resonator on RA5/T1CKI/OSC1/CLKIN and RA4/AN3/T1G/OSC2/CLKOUT
       LP = 0x0                          -- LP oscillator: Low-power crystal on RA5/T1CKI/OSC1/CLKIN and RA4/AN3/T1G/OSC2/CLKOUT
       }
pragma fuse_def WDT 0x8 {                -- Watchdog Timer Enable bit
       ENABLED = 0x8                     -- WDT enabled
       DISABLED = 0x0                    -- WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
       }
pragma fuse_def PWRTE 0x10 {             -- Power-up Timer Enable bit
       DISABLED = 0x10                   -- PWRT disabled
       ENABLED = 0x0                     -- PWRT enabled
       }
pragma fuse_def MCLR 0x20 {              -- MCLR Pin Function Select bit
       EXTERNAL = 0x20                   -- MCLR pin is MCLR function and weak internal pull-up is enabled
       INTERNAL = 0x0                    -- MCLR pin is alternate function, MCLR function is internally disabled
       }
pragma fuse_def CP 0x40 {                -- Code Protection bit
       DISABLED = 0x40                   -- Program memory is not code protected
       ENABLED = 0x0                     -- Program memory is external read and write protected
       }
pragma fuse_def IOSCFS 0x80 {            -- Internal Oscillator Frequency Select
       F8MHZ = 0x80                      -- 8 MHz
       F4MHZ = 0x0                       -- 4 MHz
       }
pragma fuse_def BROWNOUT 0x300 {         -- Brown-out Reset Selection bits
       ENABLED = 0x300                   -- BOR enabled
       RUNONLY = 0x200                   -- BOR enabled during operation and disabled in Sleep
       DISABLED = 0x0                    -- BOR disabled
       }
pragma fuse_def WRT 0xC00 {              -- Flash Program Memory Self Write Enable bits
       DISABLED = 0xC00                  -- Write protection off
       BOOT_BLOCK = 0x800                -- 000h to 1FFh write protected, 200h to 7FFh may be modified by PMCON1 control
       HALF = 0x400                      -- 000h to 3FFh write protected, 400h to 7FFh may be modified by PMCON1 control
       ENABLED = 0x0                     -- 000h to 7FFh write protected, entire program memory is write protected.
       }
--

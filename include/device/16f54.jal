-- ------------------------------------------------
-- Title: JalV2 device include file for 16f54
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f54, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC16F54.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:16 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x0000            -- ID for PIC programmer
const  word  CHIP_ID     = 0x6F54            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "16F54"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_12       -- (banks=1)
pragma  target  chip     16F54
pragma  target  bank     0x0020
pragma  target  page     0x0200
pragma  stack            2
pragma  code             512
pragma  ID               0x200,4
pragma  data             0x7-0x1F
pragma  shared           0x7-0x1F
--
var volatile byte _pic_accum at 0x1F      -- (compiler)
var volatile byte _pic_isr_w at 0x1E      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0xFFF
const word   _FUSES                = 0xFFF
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0 }
var volatile byte   _ind                      at { 0x0 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2 }
var volatile byte   _pcl                      at { 0x2 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*3  STATUS_PA                 at STATUS : 5
var volatile bit    STATUS_PA0                at STATUS : 5
var volatile bit    STATUS_PA1                at STATUS : 6
var volatile bit    STATUS_PA2                at STATUS : 7
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _pa0                      =  5
const        byte   _pa1                      =  6
const        byte   _pa2                      =  7
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4 }
var volatile byte   _fsr                      at { 0x4 }
-- ------------------------------------------------
var volatile byte   PORTA_                    at { 0x5 }
--
var          byte   PORTA                     at PORTA_
var volatile byte   PORTA_shadow_             at 0x1D
--
procedure PORTA'put(byte in x at PORTA_shadow_) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
procedure PORTA_low'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0xF0) | (x & 0x0F)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0x0F) | (x << 4)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    pin_A0                    at PORTA_ : 0
--
procedure pin_A0'put(bit in x at PORTA_shadow_ : 0) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    pin_A1                    at PORTA_ : 1
--
procedure pin_A1'put(bit in x at PORTA_shadow_ : 1) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    pin_A2                    at PORTA_ : 2
--
procedure pin_A2'put(bit in x at PORTA_shadow_ : 2) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA_ : 3
--
procedure pin_A3'put(bit in x at PORTA_shadow_ : 3) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_T0CKI               at PORTA_ : 4
-- ------------------------------------------------
var volatile byte   PORTB_                    at { 0x6 }
--
var          byte   PORTB                     at PORTB_
var volatile byte   PORTB_shadow_             at 0x1C
--
procedure PORTB'put(byte in x at PORTB_shadow_) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
procedure PORTB_low'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0xF0) | (x & 0x0F)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0x0F) | (x << 4)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    pin_B0                    at PORTB_ : 0
--
procedure pin_B0'put(bit in x at PORTB_shadow_ : 0) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    pin_B1                    at PORTB_ : 1
--
procedure pin_B1'put(bit in x at PORTB_shadow_ : 1) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    pin_B2                    at PORTB_ : 2
--
procedure pin_B2'put(bit in x at PORTB_shadow_ : 2) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    pin_B3                    at PORTB_ : 3
--
procedure pin_B3'put(bit in x at PORTB_shadow_ : 3) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    pin_B4                    at PORTB_ : 4
--
procedure pin_B4'put(bit in x at PORTB_shadow_ : 4) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    pin_B5                    at PORTB_ : 5
--
procedure pin_B5'put(bit in x at PORTB_shadow_ : 5) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    pin_B6                    at PORTB_ : 6
--
procedure pin_B6'put(bit in x at PORTB_shadow_ : 6) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    pin_B7                    at PORTB_ : 7
--
procedure pin_B7'put(bit in x at PORTB_shadow_ : 7) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   TRISA_shadow_             at 0x1B = 0b1111_1111
--
procedure PORTA_direction'put(byte in x at TRISA_shadow_) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA_shadow_ = (TRISA_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA_shadow_ = (TRISA_shadow_ & 0x0F) | (x << 4)
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A0_direction'put(bit in x at TRISA_shadow_: 0) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A1_direction'put(bit in x at TRISA_shadow_: 1) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A2_direction'put(bit in x at TRISA_shadow_: 2) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A3_direction'put(bit in x at TRISA_shadow_: 3) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A4_direction'put(bit in x at TRISA_shadow_: 4) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
-- ------------------------------------------------
var volatile byte   TRISB_shadow_             at 0x1A = 0b1111_1111
--
procedure PORTB_direction'put(byte in x at TRISB_shadow_) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB_shadow_ = (TRISB_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB_shadow_ = (TRISB_shadow_ & 0x0F) | (x << 4)
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B0_direction'put(bit in x at TRISB_shadow_: 0) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B1_direction'put(bit in x at TRISB_shadow_: 1) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B2_direction'put(bit in x at TRISB_shadow_: 2) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B3_direction'put(bit in x at TRISB_shadow_: 3) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B4_direction'put(bit in x at TRISB_shadow_: 4) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B5_direction'put(bit in x at TRISB_shadow_: 5) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B6_direction'put(bit in x at TRISB_shadow_: 6) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B7_direction'put(bit in x at TRISB_shadow_: 7) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
-- ------------------------------------------------
var volatile byte   OPTION_REG_shadow_        at 0x19 = 0b1111_1111
--
procedure OPTION_REG'put(byte in x at OPTION_REG_shadow_) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS'put(bit*3 in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0PS                is OPTION_REG_PS
--
procedure OPTION_REG_PSA'put(bit in x at OPTION_REG_shadow_: 3) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_PSA                 is OPTION_REG_PSA
--
procedure OPTION_REG_T0SE'put(bit in x at OPTION_REG_shadow_: 4) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0SE                is OPTION_REG_T0SE
--
procedure OPTION_REG_T0CS'put(bit in x at OPTION_REG_shadow_: 5) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0CS                is OPTION_REG_T0CS
--
procedure OPTION_REG_PS0'put(bit in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS1'put(bit in x at OPTION_REG_shadow_: 1) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS2'put(bit in x at OPTION_REG_shadow_: 2) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 0
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   OPTION_REG_T0CS = OFF        -- T0CKI pin input + output
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0x7-0x18
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0xFFF)
--
pragma fuse_def OSC 0x3 {                -- Oscillator selection bits
       RC_CLKOUT = 0x3                   -- RC oscillator
       HS = 0x2                          -- HS oscillator
       XT = 0x1                          -- XT oscillator
       LP = 0x0                          -- LP oscillator
       }
pragma fuse_def WDT 0x4 {                -- Watchdog timer enable bit
       ENABLED = 0x4                     -- WDT enabled
       DISABLED = 0x0                    -- WDT disabled
       }
pragma fuse_def CP 0x8 {                 -- Code protection bit
       DISABLED = 0x8                    -- Code protection off
       ENABLED = 0x0                     -- Code protection on
       }
--

-- ------------------------------------------------
-- Title: JalV2 device include file for 16lf877a
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16lf877a, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC16LF877A.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:18 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x0E20            -- ID for PIC programmer
const  word  CHIP_ID     = 0xA806            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "16LF877A"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_14       -- (banks=4)
pragma  target  chip     16LF877A
pragma  target  bank     0x0080
pragma  target  page     0x0800
pragma  stack            8
pragma  code             8192
pragma  eeprom           0x2100,256
pragma  ID               0x2000,4
pragma  data             0x20-0x7F,0xA0-0xEF,0x110-0x16F,0x190-0x1EF
pragma  shared           0x70-0x7F
--
var volatile byte _pic_accum at 0x7F      -- (compiler)
var volatile byte _pic_isr_w at 0x7E      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0x2007
const word   _FUSES                = 0x3FFF
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit    STATUS_RP0                at STATUS : 5
var volatile bit    STATUS_RP1                at STATUS : 6
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3,0x83,0x103,0x183 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _irp                      =  7
const        byte   _rp0                      =  5
const        byte   _rp1                      =  6
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }
-- ------------------------------------------------
var volatile byte   PORTA_                    at { 0x5 }
--
var          byte   PORTA                     at PORTA_
var volatile byte   PORTA_shadow_             at 0x7D
--
procedure PORTA'put(byte in x at PORTA_shadow_) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
procedure PORTA_low'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0xF0) | (x & 0x0F)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0x0F) | (x << 4)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    pin_A0                    at PORTA_ : 0
alias               pin_AN0                   is pin_A0
--
procedure pin_A0'put(bit in x at PORTA_shadow_ : 0) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    pin_A1                    at PORTA_ : 1
alias               pin_AN1                   is pin_A1
--
procedure pin_A1'put(bit in x at PORTA_shadow_ : 1) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    pin_A2                    at PORTA_ : 2
alias               pin_AN2                   is pin_A2
alias               pin_VREF_NEG              is pin_A2
alias               pin_CVREF                 is pin_A2
--
procedure pin_A2'put(bit in x at PORTA_shadow_ : 2) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA_ : 3
alias               pin_AN3                   is pin_A3
alias               pin_VREF_POS              is pin_A3
--
procedure pin_A3'put(bit in x at PORTA_shadow_ : 3) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    pin_A4                    at PORTA_ : 4
alias               pin_T0CKI                 is pin_A4
alias               pin_C1OUT                 is pin_A4
--
procedure pin_A4'put(bit in x at PORTA_shadow_ : 4) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA5                 at PORTA : 5
var volatile bit    pin_A5                    at PORTA_ : 5
alias               pin_AN4                   is pin_A5
alias               pin_SS                    is pin_A5
alias               pin_C2OUT                 is pin_A5
--
procedure pin_A5'put(bit in x at PORTA_shadow_ : 5) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTB_                    at { 0x6,0x106 }
--
var          byte   PORTB                     at PORTB_
var volatile byte   PORTB_shadow_             at 0x7C
--
procedure PORTB'put(byte in x at PORTB_shadow_) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
procedure PORTB_low'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0xF0) | (x & 0x0F)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0x0F) | (x << 4)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    pin_B0                    at PORTB_ : 0
--
procedure pin_B0'put(bit in x at PORTB_shadow_ : 0) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    pin_B1                    at PORTB_ : 1
--
procedure pin_B1'put(bit in x at PORTB_shadow_ : 1) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    pin_B2                    at PORTB_ : 2
--
procedure pin_B2'put(bit in x at PORTB_shadow_ : 2) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    pin_B3                    at PORTB_ : 3
alias               pin_PGM                   is pin_B3
--
procedure pin_B3'put(bit in x at PORTB_shadow_ : 3) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    pin_B4                    at PORTB_ : 4
--
procedure pin_B4'put(bit in x at PORTB_shadow_ : 4) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    pin_B5                    at PORTB_ : 5
--
procedure pin_B5'put(bit in x at PORTB_shadow_ : 5) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    pin_B6                    at PORTB_ : 6
--
procedure pin_B6'put(bit in x at PORTB_shadow_ : 6) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    pin_B7                    at PORTB_ : 7
--
procedure pin_B7'put(bit in x at PORTB_shadow_ : 7) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTC_                    at { 0x7 }
--
var          byte   PORTC                     at PORTC_
var volatile byte   PORTC_shadow_             at 0x7B
--
procedure PORTC'put(byte in x at PORTC_shadow_) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
procedure PORTC_low'put(byte in x) is
   PORTC_shadow_ = (PORTC_shadow_ & 0xF0) | (x & 0x0F)
   PORTC_ = PORTC_shadow_
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   PORTC_shadow_ = (PORTC_shadow_ & 0x0F) | (x << 4)
   PORTC_ = PORTC_shadow_
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    pin_C0                    at PORTC_ : 0
alias               pin_T1OSO                 is pin_C0
alias               pin_T1CKI                 is pin_C0
--
procedure pin_C0'put(bit in x at PORTC_shadow_ : 0) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    pin_C1                    at PORTC_ : 1
alias               pin_T1OSI                 is pin_C1
alias               pin_CCP2                  is pin_C1
--
procedure pin_C1'put(bit in x at PORTC_shadow_ : 1) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC2                 at PORTC : 2
var volatile bit    pin_C2                    at PORTC_ : 2
alias               pin_CCP1                  is pin_C2
--
procedure pin_C2'put(bit in x at PORTC_shadow_ : 2) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC3                 at PORTC : 3
var volatile bit    pin_C3                    at PORTC_ : 3
alias               pin_SCK                   is pin_C3
alias               pin_SCL                   is pin_C3
--
procedure pin_C3'put(bit in x at PORTC_shadow_ : 3) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    pin_C4                    at PORTC_ : 4
alias               pin_SDI                   is pin_C4
alias               pin_SDA                   is pin_C4
--
procedure pin_C4'put(bit in x at PORTC_shadow_ : 4) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    pin_C5                    at PORTC_ : 5
alias               pin_SDO                   is pin_C5
--
procedure pin_C5'put(bit in x at PORTC_shadow_ : 5) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC6                 at PORTC : 6
var volatile bit    pin_C6                    at PORTC_ : 6
alias               pin_TX                    is pin_C6
alias               pin_CK                    is pin_C6
--
procedure pin_C6'put(bit in x at PORTC_shadow_ : 6) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC7                 at PORTC : 7
var volatile bit    pin_C7                    at PORTC_ : 7
alias               pin_RX                    is pin_C7
alias               pin_DT                    is pin_C7
--
procedure pin_C7'put(bit in x at PORTC_shadow_ : 7) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTD_                    at { 0x8 }
--
var          byte   PORTD                     at PORTD_
var volatile byte   PORTD_shadow_             at 0x7A
--
procedure PORTD'put(byte in x at PORTD_shadow_) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
procedure PORTD_low'put(byte in x) is
   PORTD_shadow_ = (PORTD_shadow_ & 0xF0) | (x & 0x0F)
   PORTD_ = PORTD_shadow_
end procedure
function PORTD_low'get() return byte is
   return (PORTD & 0x0F)
end function
--
procedure PORTD_high'put(byte in x) is
   PORTD_shadow_ = (PORTD_shadow_ & 0x0F) | (x << 4)
   PORTD_ = PORTD_shadow_
end procedure
function PORTD_high'get() return byte is
   return (PORTD >> 4)
end function
--
var volatile bit    PORTD_RD0                 at PORTD : 0
var volatile bit    pin_D0                    at PORTD_ : 0
alias               pin_PSP0                  is pin_D0
--
procedure pin_D0'put(bit in x at PORTD_shadow_ : 0) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD1                 at PORTD : 1
var volatile bit    pin_D1                    at PORTD_ : 1
alias               pin_PSP1                  is pin_D1
--
procedure pin_D1'put(bit in x at PORTD_shadow_ : 1) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD2                 at PORTD : 2
var volatile bit    pin_D2                    at PORTD_ : 2
alias               pin_PSP2                  is pin_D2
--
procedure pin_D2'put(bit in x at PORTD_shadow_ : 2) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD3                 at PORTD : 3
var volatile bit    pin_D3                    at PORTD_ : 3
alias               pin_PSP3                  is pin_D3
--
procedure pin_D3'put(bit in x at PORTD_shadow_ : 3) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD4                 at PORTD : 4
var volatile bit    pin_D4                    at PORTD_ : 4
alias               pin_PSP4                  is pin_D4
--
procedure pin_D4'put(bit in x at PORTD_shadow_ : 4) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD5                 at PORTD : 5
var volatile bit    pin_D5                    at PORTD_ : 5
alias               pin_PSP5                  is pin_D5
--
procedure pin_D5'put(bit in x at PORTD_shadow_ : 5) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD6                 at PORTD : 6
var volatile bit    pin_D6                    at PORTD_ : 6
alias               pin_PSP6                  is pin_D6
--
procedure pin_D6'put(bit in x at PORTD_shadow_ : 6) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD7                 at PORTD : 7
var volatile bit    pin_D7                    at PORTD_ : 7
alias               pin_PSP7                  is pin_D7
--
procedure pin_D7'put(bit in x at PORTD_shadow_ : 7) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTE_                    at { 0x9 }
--
var          byte   PORTE                     at PORTE_
var volatile byte   PORTE_shadow_             at 0x79
--
procedure PORTE'put(byte in x at PORTE_shadow_) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
procedure PORTE_low'put(byte in x) is
   PORTE_shadow_ = (PORTE_shadow_ & 0xF0) | (x & 0x0F)
   PORTE_ = PORTE_shadow_
end procedure
function PORTE_low'get() return byte is
   return (PORTE & 0x0F)
end function
--
procedure PORTE_high'put(byte in x) is
   PORTE_shadow_ = (PORTE_shadow_ & 0x0F) | (x << 4)
   PORTE_ = PORTE_shadow_
end procedure
function PORTE_high'get() return byte is
   return (PORTE >> 4)
end function
--
var volatile bit    PORTE_RE0                 at PORTE : 0
var volatile bit    pin_E0                    at PORTE_ : 0
alias               pin_RD                    is pin_E0
alias               pin_AN5                   is pin_E0
--
procedure pin_E0'put(bit in x at PORTE_shadow_ : 0) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
var volatile bit    PORTE_RE1                 at PORTE : 1
var volatile bit    pin_E1                    at PORTE_ : 1
alias               pin_WR                    is pin_E1
alias               pin_AN6                   is pin_E1
--
procedure pin_E1'put(bit in x at PORTE_shadow_ : 1) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
var volatile bit    PORTE_RE2                 at PORTE : 2
var volatile bit    pin_E2                    at PORTE_ : 2
alias               pin_CS                    is pin_E2
alias               pin_AN7                   is pin_E2
--
procedure pin_E2'put(bit in x at PORTE_shadow_ : 2) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A,0x18A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A,0x18A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_RBIF               at INTCON : 0
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_T0IE               at INTCON : 5
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_CCP1IF               at PIR1 : 2
alias               PIR1_CCPIF                is PIR1_CCP1IF
var volatile bit    PIR1_SSPIF                at PIR1 : 3
var volatile bit    PIR1_TXIF                 at PIR1 : 4
var volatile bit    PIR1_RCIF                 at PIR1 : 5
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_PSPIF                at PIR1 : 7
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xD }
var volatile bit    PIR2_CCP2IF               at PIR2 : 0
var volatile bit    PIR2_BCLIF                at PIR2 : 3
var volatile bit    PIR2_EEIF                 at PIR2 : 4
var volatile bit    PIR2_CMIF                 at PIR2 : 6
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
alias               T1CON_T1SYNC              is T1CON_NT1SYNC
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
var volatile bit    T1CON_T1INSYNC            at T1CON : 2
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0x11 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x12 }
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_T2CKPS0             at T2CON : 0
var volatile bit    T2CON_T2CKPS1             at T2CON : 1
var volatile bit    T2CON_TOUTPS0             at T2CON : 3
var volatile bit    T2CON_TOUTPS1             at T2CON : 4
var volatile bit    T2CON_TOUTPS2             at T2CON : 5
var volatile bit    T2CON_TOUTPS3             at T2CON : 6
-- ------------------------------------------------
var volatile byte   SSPBUF                    at { 0x13 }
-- ------------------------------------------------
var volatile byte   SSPCON                    at { 0x14 }
var volatile bit*4  SSPCON_SSPM               at SSPCON : 0
var volatile bit    SSPCON_CKP                at SSPCON : 4
var volatile bit    SSPCON_SSPEN              at SSPCON : 5
var volatile bit    SSPCON_SSPOV              at SSPCON : 6
var volatile bit    SSPCON_WCOL               at SSPCON : 7
var volatile bit    SSPCON_SSPM0              at SSPCON : 0
var volatile bit    SSPCON_SSPM1              at SSPCON : 1
var volatile bit    SSPCON_SSPM2              at SSPCON : 2
var volatile bit    SSPCON_SSPM3              at SSPCON : 3
--
alias               SSPCON1                   is SSPCON
alias               SSPCON1_SSPM              is SSPCON_SSPM
alias               SSPCON1_CKP               is SSPCON_CKP
alias               SSPCON1_SSPEN             is SSPCON_SSPEN
alias               SSPCON1_SSPOV             is SSPCON_SSPOV
alias               SSPCON1_WCOL              is SSPCON_WCOL
alias               SSPCON1_SSPM0             is SSPCON_SSPM0
alias               SSPCON1_SSPM1             is SSPCON_SSPM1
alias               SSPCON1_SSPM2             is SSPCON_SSPM2
alias               SSPCON1_SSPM3             is SSPCON_SSPM3
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x15 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x16 }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x17 }
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
alias               CCP1CON_MODE              is CCP1CON_CCP1M
var volatile bit    CCP1CON_CCP1Y             at CCP1CON : 4
var volatile bit*2  CCP1CON_DC1B              at CCP1CON : 4
var volatile bit    CCP1CON_CCP1X             at CCP1CON : 5
var volatile bit    CCP1CON_CCP1M0            at CCP1CON : 0
var volatile bit    CCP1CON_CCP1M1            at CCP1CON : 1
var volatile bit    CCP1CON_CCP1M2            at CCP1CON : 2
var volatile bit    CCP1CON_CCP1M3            at CCP1CON : 3
-- ------------------------------------------------
var volatile byte   RCSTA                     at { 0x18 }
var volatile bit    RCSTA_RX9D                at RCSTA : 0
var volatile bit    RCSTA_OERR                at RCSTA : 1
var volatile bit    RCSTA_FERR                at RCSTA : 2
var volatile bit    RCSTA_ADDEN               at RCSTA : 3
var volatile bit    RCSTA_CREN                at RCSTA : 4
var volatile bit    RCSTA_SREN                at RCSTA : 5
var volatile bit    RCSTA_RX9                 at RCSTA : 6
var volatile bit    RCSTA_SPEN                at RCSTA : 7
var volatile bit    RCSTA_RCD8                at RCSTA : 0
var volatile bit    RCSTA_RC9                 at RCSTA : 6
var volatile bit    RCSTA_NRC8                at RCSTA : 6
var volatile bit    RCSTA_RC8_9               at RCSTA : 6
-- ------------------------------------------------
var volatile byte   TXREG                     at { 0x19 }
-- ------------------------------------------------
var volatile byte   RCREG                     at { 0x1A }
-- ------------------------------------------------
var volatile word   CCPR2                     at { 0x1B }
-- ------------------------------------------------
var volatile byte   CCPR2L                    at { 0x1B }
-- ------------------------------------------------
var volatile byte   CCPR2H                    at { 0x1C }
-- ------------------------------------------------
var volatile byte   CCP2CON                   at { 0x1D }
var volatile bit*4  CCP2CON_CCP2M             at CCP2CON : 0
alias               CCP2CON_MODE              is CCP2CON_CCP2M
var volatile bit    CCP2CON_CCP2Y             at CCP2CON : 4
var volatile bit*2  CCP2CON_DC2B              at CCP2CON : 4
var volatile bit    CCP2CON_CCP2X             at CCP2CON : 5
var volatile bit    CCP2CON_CCP2M0            at CCP2CON : 0
var volatile bit    CCP2CON_CCP2M1            at CCP2CON : 1
var volatile bit    CCP2CON_CCP2M2            at CCP2CON : 2
var volatile bit    CCP2CON_CCP2M3            at CCP2CON : 3
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x1E }
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x1F }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 2
var volatile bit*3  ADCON0_CHS                at ADCON0 : 3
var volatile bit*2  ADCON0_ADCS               at ADCON0 : 6
var volatile bit    ADCON0_GO                 at ADCON0 : 2
var volatile bit    ADCON0_CHS0               at ADCON0 : 3
var volatile bit    ADCON0_CHS1               at ADCON0 : 4
var volatile bit    ADCON0_CHS2               at ADCON0 : 5
var volatile bit    ADCON0_ADCS0              at ADCON0 : 6
var volatile bit    ADCON0_ADCS1              at ADCON0 : 7
var volatile bit    ADCON0_NDONE              at ADCON0 : 2
var volatile bit    ADCON0_GO_DONE            at ADCON0 : 2
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_NRBPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_PS0            at OPTION_REG : 0
var volatile bit    OPTION_REG_PS1            at OPTION_REG : 1
var volatile bit    OPTION_REG_PS2            at OPTION_REG : 2
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x85 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_AN0_direction         is pin_A0_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_AN1_direction         is pin_A1_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_VREF_NEG_direction    is pin_A2_direction
alias               pin_CVREF_direction       is pin_A2_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_AN3_direction         is pin_A3_direction
alias               pin_VREF_POS_direction    is pin_A3_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_T0CKI_direction       is pin_A4_direction
alias               pin_C1OUT_direction       is pin_A4_direction
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_AN4_direction         is pin_A5_direction
alias               pin_SS_direction          is pin_A5_direction
alias               pin_C2OUT_direction       is pin_A5_direction
--
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0x86,0x186 }
alias               PORTB_direction           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB0              at TRISB : 0
var volatile bit    pin_B0_direction          at TRISB : 0
--
var volatile bit    TRISB_TRISB1              at TRISB : 1
var volatile bit    pin_B1_direction          at TRISB : 1
--
var volatile bit    TRISB_TRISB2              at TRISB : 2
var volatile bit    pin_B2_direction          at TRISB : 2
--
var volatile bit    TRISB_TRISB3              at TRISB : 3
var volatile bit    pin_B3_direction          at TRISB : 3
alias               pin_PGM_direction         is pin_B3_direction
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
var volatile bit    pin_B4_direction          at TRISB : 4
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
var volatile bit    pin_B5_direction          at TRISB : 5
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
var volatile bit    pin_B6_direction          at TRISB : 6
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
var volatile bit    pin_B7_direction          at TRISB : 7
--
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0x87 }
alias               PORTC_direction           is TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
var volatile bit    pin_C0_direction          at TRISC : 0
alias               pin_T1OSO_direction       is pin_C0_direction
alias               pin_T1CKI_direction       is pin_C0_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
var volatile bit    pin_C1_direction          at TRISC : 1
alias               pin_T1OSI_direction       is pin_C1_direction
alias               pin_CCP2_direction        is pin_C1_direction
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
var volatile bit    pin_C2_direction          at TRISC : 2
alias               pin_CCP1_direction        is pin_C2_direction
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
var volatile bit    pin_C3_direction          at TRISC : 3
alias               pin_SCK_direction         is pin_C3_direction
alias               pin_SCL_direction         is pin_C3_direction
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
var volatile bit    pin_C4_direction          at TRISC : 4
alias               pin_SDI_direction         is pin_C4_direction
alias               pin_SDA_direction         is pin_C4_direction
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
var volatile bit    pin_C5_direction          at TRISC : 5
alias               pin_SDO_direction         is pin_C5_direction
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
var volatile bit    pin_C6_direction          at TRISC : 6
alias               pin_TX_direction          is pin_C6_direction
alias               pin_CK_direction          is pin_C6_direction
--
var volatile bit    TRISC_TRISC7              at TRISC : 7
var volatile bit    pin_C7_direction          at TRISC : 7
alias               pin_RX_direction          is pin_C7_direction
alias               pin_DT_direction          is pin_C7_direction
--
-- ------------------------------------------------
var volatile byte   TRISD                     at { 0x88 }
alias               PORTD_direction           is TRISD
--
procedure PORTD_low_direction'put(byte in x) is
   TRISD = (TRISD & 0xF0) | (x & 0x0F)
end procedure
function PORTD_low_direction'get() return byte is
   return (TRISD & 0x0F)
end function
--
procedure PORTD_high_direction'put(byte in x) is
   TRISD = (TRISD & 0x0F) | (x << 4)
end procedure
function PORTD_high_direction'get() return byte is
   return (TRISD >> 4)
end function
--
var volatile bit    TRISD_TRISD0              at TRISD : 0
var volatile bit    pin_D0_direction          at TRISD : 0
alias               pin_PSP0_direction        is pin_D0_direction
--
var volatile bit    TRISD_TRISD1              at TRISD : 1
var volatile bit    pin_D1_direction          at TRISD : 1
alias               pin_PSP1_direction        is pin_D1_direction
--
var volatile bit    TRISD_TRISD2              at TRISD : 2
var volatile bit    pin_D2_direction          at TRISD : 2
alias               pin_PSP2_direction        is pin_D2_direction
--
var volatile bit    TRISD_TRISD3              at TRISD : 3
var volatile bit    pin_D3_direction          at TRISD : 3
alias               pin_PSP3_direction        is pin_D3_direction
--
var volatile bit    TRISD_TRISD4              at TRISD : 4
var volatile bit    pin_D4_direction          at TRISD : 4
alias               pin_PSP4_direction        is pin_D4_direction
--
var volatile bit    TRISD_TRISD5              at TRISD : 5
var volatile bit    pin_D5_direction          at TRISD : 5
alias               pin_PSP5_direction        is pin_D5_direction
--
var volatile bit    TRISD_TRISD6              at TRISD : 6
var volatile bit    pin_D6_direction          at TRISD : 6
alias               pin_PSP6_direction        is pin_D6_direction
--
var volatile bit    TRISD_TRISD7              at TRISD : 7
var volatile bit    pin_D7_direction          at TRISD : 7
alias               pin_PSP7_direction        is pin_D7_direction
--
-- ------------------------------------------------
var volatile byte   TRISE                     at { 0x89 }
alias               PORTE_direction           is TRISE
--
procedure PORTE_low_direction'put(byte in x) is
   TRISE = (TRISE & 0xF0) | (x & 0x0F)
end procedure
function PORTE_low_direction'get() return byte is
   return (TRISE & 0x0F)
end function
--
procedure PORTE_high_direction'put(byte in x) is
   TRISE = (TRISE & 0x0F) | (x << 4)
end procedure
function PORTE_high_direction'get() return byte is
   return (TRISE >> 4)
end function
--
var volatile bit    TRISE_TRISE0              at TRISE : 0
var volatile bit    pin_E0_direction          at TRISE : 0
alias               pin_RD_direction          is pin_E0_direction
alias               pin_AN5_direction         is pin_E0_direction
--
var volatile bit    TRISE_TRISE1              at TRISE : 1
var volatile bit    pin_E1_direction          at TRISE : 1
alias               pin_WR_direction          is pin_E1_direction
alias               pin_AN6_direction         is pin_E1_direction
--
var volatile bit    TRISE_TRISE2              at TRISE : 2
var volatile bit    pin_E2_direction          at TRISE : 2
alias               pin_CS_direction          is pin_E2_direction
alias               pin_AN7_direction         is pin_E2_direction
--
var volatile bit    TRISE_PSPMODE             at TRISE : 4
var volatile bit    TRISE_IBOV                at TRISE : 5
var volatile bit    TRISE_OBF                 at TRISE : 6
var volatile bit    TRISE_IBF                 at TRISE : 7
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_CCP1IE               at PIE1 : 2
alias               PIE1_CCPIE                is PIE1_CCP1IE
var volatile bit    PIE1_SSPIE                at PIE1 : 3
var volatile bit    PIE1_TXIE                 at PIE1 : 4
var volatile bit    PIE1_RCIE                 at PIE1 : 5
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_PSPIE                at PIE1 : 7
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0x8D }
var volatile bit    PIE2_CCP2IE               at PIE2 : 0
var volatile bit    PIE2_BCLIE                at PIE2 : 3
var volatile bit    PIE2_EEIE                 at PIE2 : 4
var volatile bit    PIE2_CMIE                 at PIE2 : 6
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_NBOR                 at PCON : 0
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NBO                  at PCON : 0
-- ------------------------------------------------
var volatile byte   SSPCON2                   at { 0x91 }
var volatile bit    SSPCON2_SEN               at SSPCON2 : 0
var volatile bit    SSPCON2_RSEN              at SSPCON2 : 1
var volatile bit    SSPCON2_PEN               at SSPCON2 : 2
var volatile bit    SSPCON2_RCEN              at SSPCON2 : 3
var volatile bit    SSPCON2_ACKEN             at SSPCON2 : 4
var volatile bit    SSPCON2_ACKDT             at SSPCON2 : 5
var volatile bit    SSPCON2_ACKSTAT           at SSPCON2 : 6
var volatile bit    SSPCON2_GCEN              at SSPCON2 : 7
-- ------------------------------------------------
var volatile byte   PR2                       at { 0x92 }
-- ------------------------------------------------
var volatile byte   SSPADD                    at { 0x93 }
-- ------------------------------------------------
var volatile byte   SSPSTAT                   at { 0x94 }
var volatile bit    SSPSTAT_BF                at SSPSTAT : 0
var volatile bit    SSPSTAT_UA                at SSPSTAT : 1
var volatile bit    SSPSTAT_R_NW              at SSPSTAT : 2
var volatile bit    SSPSTAT_S                 at SSPSTAT : 3
var volatile bit    SSPSTAT_P                 at SSPSTAT : 4
var volatile bit    SSPSTAT_D_NA              at SSPSTAT : 5
var volatile bit    SSPSTAT_CKE               at SSPSTAT : 6
var volatile bit    SSPSTAT_SMP               at SSPSTAT : 7
var volatile bit    SSPSTAT_R                 at SSPSTAT : 2
var volatile bit    SSPSTAT_D                 at SSPSTAT : 5
var volatile bit    SSPSTAT_I2C_READ          at SSPSTAT : 2
var volatile bit    SSPSTAT_I2C_START         at SSPSTAT : 3
var volatile bit    SSPSTAT_I2C_STOP          at SSPSTAT : 4
var volatile bit    SSPSTAT_I2C_DATA          at SSPSTAT : 5
var volatile bit    SSPSTAT_NW                at SSPSTAT : 2
var volatile bit    SSPSTAT_NA                at SSPSTAT : 5
var volatile bit    SSPSTAT_NWRITE            at SSPSTAT : 2
var volatile bit    SSPSTAT_NADDRESS          at SSPSTAT : 5
var volatile bit    SSPSTAT_R_W               at SSPSTAT : 2
var volatile bit    SSPSTAT_D_A               at SSPSTAT : 5
var volatile bit    SSPSTAT_READ_WRITE        at SSPSTAT : 2
var volatile bit    SSPSTAT_DATA_ADDRESS      at SSPSTAT : 5
-- ------------------------------------------------
var volatile byte   TXSTA                     at { 0x98 }
var volatile bit    TXSTA_TX9D                at TXSTA : 0
var volatile bit    TXSTA_TRMT                at TXSTA : 1
var volatile bit    TXSTA_BRGH                at TXSTA : 2
var volatile bit    TXSTA_SYNC                at TXSTA : 4
var volatile bit    TXSTA_TXEN                at TXSTA : 5
var volatile bit    TXSTA_TX9                 at TXSTA : 6
var volatile bit    TXSTA_CSRC                at TXSTA : 7
var volatile bit    TXSTA_TXD8                at TXSTA : 0
var volatile bit    TXSTA_NTX8                at TXSTA : 6
var volatile bit    TXSTA_TX8_9               at TXSTA : 6
-- ------------------------------------------------
var volatile byte   SPBRG                     at { 0x99 }
alias               SPBRGL                    is SPBRG
-- ------------------------------------------------
var volatile byte   CMCON                     at { 0x9C }
var volatile bit*3  CMCON_CM                  at CMCON : 0
var volatile bit    CMCON_CIS                 at CMCON : 3
var volatile bit    CMCON_C1INV               at CMCON : 4
var volatile bit    CMCON_C2INV               at CMCON : 5
var volatile bit    CMCON_C1OUT               at CMCON : 6
var volatile bit    CMCON_C2OUT               at CMCON : 7
var volatile bit    CMCON_CM0                 at CMCON : 0
var volatile bit    CMCON_CM1                 at CMCON : 1
var volatile bit    CMCON_CM2                 at CMCON : 2
-- ------------------------------------------------
var volatile byte   CVRCON                    at { 0x9D }
var volatile bit*4  CVRCON_CVR                at CVRCON : 0
var volatile bit    CVRCON_CVRR               at CVRCON : 5
var volatile bit    CVRCON_CVROE              at CVRCON : 6
var volatile bit    CVRCON_CVREN              at CVRCON : 7
var volatile bit    CVRCON_CVR0               at CVRCON : 0
var volatile bit    CVRCON_CVR1               at CVRCON : 1
var volatile bit    CVRCON_CVR2               at CVRCON : 2
var volatile bit    CVRCON_CVR3               at CVRCON : 3
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x9E }
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x9F }
var volatile bit*4  ADCON1_PCFG               at ADCON1 : 0
var volatile bit    ADCON1_ADCS2              at ADCON1 : 6
var volatile bit    ADCON1_ADFM               at ADCON1 : 7
var volatile bit    ADCON1_PCFG0              at ADCON1 : 0
var volatile bit    ADCON1_PCFG1              at ADCON1 : 1
var volatile bit    ADCON1_PCFG2              at ADCON1 : 2
var volatile bit    ADCON1_PCFG3              at ADCON1 : 3
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x10C }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x10D }
-- ------------------------------------------------
var volatile byte   EEDATH                    at { 0x10E }
var volatile bit*6  EEDATH_EEDATH             at EEDATH : 0
-- ------------------------------------------------
var volatile byte   EEADRH                    at { 0x10F }
var volatile bit*5  EEADRH_EEADRH             at EEADRH : 0
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x18C }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_EEPGD              at EECON1 : 7
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x18D }
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 3
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000
   ADCON1 = 0b0000_0111
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CMCON  = 0b0000_0111
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   adc_off()
   comparator_off()
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0x70-0x78
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x3 {                -- Oscillator Selection bits
       RC_NOCLKOUT = 0x3                 -- RC oscillator
       HS = 0x2                          -- HS oscillator
       XT = 0x1                          -- XT oscillator
       LP = 0x0                          -- LP oscillator
       }
pragma fuse_def WDT 0x4 {                -- Watchdog Timer Enable bit
       ENABLED = 0x4                     -- WDT enabled
       DISABLED = 0x0                    -- WDT disabled
       }
pragma fuse_def PWRTE 0x8 {              -- Power-up Timer Enable bit
       DISABLED = 0x8                    -- PWRT disabled
       ENABLED = 0x0                     -- PWRT enabled
       }
pragma fuse_def BROWNOUT 0x40 {          -- Brown-out Reset Enable bit
       ENABLED = 0x40                    -- BOR enabled
       DISABLED = 0x0                    -- BOR disabled
       }
pragma fuse_def LVP 0x80 {               -- Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
       ENABLED = 0x80                    -- RB3/PGM pin has PGM function; low-voltage programming enabled
       DISABLED = 0x0                    -- RB3 is digital I/O, HV on MCLR must be used for programming
       }
pragma fuse_def CPD 0x100 {              -- Data EEPROM Memory Code Protection bit
       DISABLED = 0x100                  -- Data EEPROM code protection off
       ENABLED = 0x0                     -- Data EEPROM code-protected
       }
pragma fuse_def WRT 0x600 {              -- Flash Program Memory Write Enable bits
       DISABLED = 0x600                  -- Write protection off; all program memory may be written to by EECON control
       W256 = 0x400                      -- 0000h to 00FFh write-protected; 0100h to 1FFFh may be written to by EECON control
       FOURTH = 0x200                    -- 0000h to 07FFh write-protected; 0800h to 1FFFh may be written to by EECON control
       HALF = 0x0                        -- 0000h to 0FFFh write-protected; 1000h to 1FFFh may be written to by EECON control
       }
pragma fuse_def DEBUG 0x800 {            -- In-Circuit Debugger Mode bit
       DISABLED = 0x800                  -- In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
       ENABLED = 0x0                     -- In-Circuit Debugger enabled, RB6 and RB7 are dedicated to the debugger
       }
pragma fuse_def CP 0x2000 {              -- Flash Program Memory Code Protection bit
       DISABLED = 0x2000                 -- Code protection off
       ENABLED = 0x0                     -- All program memory code-protected
       }
--

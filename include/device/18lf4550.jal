-- ------------------------------------------------
-- Title: JalV2 device include file for 18lf4550
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic18lf4550, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures to force the use of the LATx register
--      for output when PORTx or pin_xy is addressed.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC18LF4550.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:25 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x1200            -- ID for PIC programmer
const  word  CHIP_ID     = 0xA23B            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "18LF4550"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_16       -- (banks=16)
pragma  target  chip     18LF4550
pragma  target  bank     0x0100
pragma  stack            31
pragma  code             32768
pragma  eeprom           0xF00000,256
pragma  ID               0x200000,8
pragma  data             0x0-0x7FF
pragma  shared           0x0-0x5F,0xF60-0xFFF
--
var volatile byte _pic_accum at 0x0      -- (compiler)
--
const word   _FUSES_CT             = 14
const byte*3 _FUSE_BASE[_FUSES_CT] = {
                                       0x300000,
                                       0x300001,
                                       0x300002,
                                       0x300003,
                                       0x300004,
                                       0x300005,
                                       0x300006,
                                       0x300007,
                                       0x300008,
                                       0x300009,
                                       0x30000A,
                                       0x30000B,
                                       0x30000C,
                                       0x30000D 
                                     }
const byte   _FUSES[_FUSES_CT]     = {
                                       0x00,     -- CONFIG1L
                                       0x05,     -- CONFIG1H
                                       0x1F,     -- CONFIG2L
                                       0x1F,     -- CONFIG2H
                                       0xFF,     -- RESERVED
                                       0x83,     -- CONFIG3H
                                       0x85,     -- CONFIG4L
                                       0xFF,     -- RESERVED
                                       0x0F,     -- CONFIG5L
                                       0xC0,     -- CONFIG5H
                                       0x0F,     -- CONFIG6L
                                       0xE0,     -- CONFIG6H
                                       0x0F,     -- CONFIG7L
                                       0x40      -- CONFIG7H
                                     }
--
-- ------------------------------------------------
var volatile byte   SPPDATA                   at { 0xF62 }
-- ------------------------------------------------
var volatile byte   SPPCFG                    at { 0xF63 }
var volatile bit*4  SPPCFG_WS                 at SPPCFG : 0
var volatile bit    SPPCFG_CLK1EN             at SPPCFG : 4
var volatile bit    SPPCFG_CSEN               at SPPCFG : 5
var volatile bit*2  SPPCFG_CLKCFG             at SPPCFG : 6
var volatile bit    SPPCFG_WS0                at SPPCFG : 0
var volatile bit    SPPCFG_WS1                at SPPCFG : 1
var volatile bit    SPPCFG_WS2                at SPPCFG : 2
var volatile bit    SPPCFG_WS3                at SPPCFG : 3
var volatile bit    SPPCFG_CLKCFG0            at SPPCFG : 6
var volatile bit    SPPCFG_CLKCFG1            at SPPCFG : 7
-- ------------------------------------------------
var volatile byte   SPPEPS                    at { 0xF64 }
var volatile bit*4  SPPEPS_ADDR               at SPPEPS : 0
var volatile bit    SPPEPS_SPPBUSY            at SPPEPS : 4
var volatile bit    SPPEPS_WRSPP              at SPPEPS : 6
var volatile bit    SPPEPS_RDSPP              at SPPEPS : 7
var volatile bit    SPPEPS_ADDR0              at SPPEPS : 0
var volatile bit    SPPEPS_ADDR1              at SPPEPS : 1
var volatile bit    SPPEPS_ADDR2              at SPPEPS : 2
var volatile bit    SPPEPS_ADDR3              at SPPEPS : 3
var volatile bit    SPPEPS_BUSY               at SPPEPS : 4
-- ------------------------------------------------
var volatile byte   SPPCON                    at { 0xF65 }
var volatile bit    SPPCON_SPPEN              at SPPCON : 0
var volatile bit    SPPCON_SPPOWN             at SPPCON : 1
-- ------------------------------------------------
var volatile word   UFRM                      at { 0xF66 }
-- ------------------------------------------------
var volatile byte   UFRML                     at { 0xF66 }
var volatile bit    UFRML_FRM0                at UFRML : 0
var volatile bit    UFRML_FRM1                at UFRML : 1
var volatile bit    UFRML_FRM2                at UFRML : 2
var volatile bit    UFRML_FRM3                at UFRML : 3
var volatile bit    UFRML_FRM4                at UFRML : 4
var volatile bit    UFRML_FRM5                at UFRML : 5
var volatile bit    UFRML_FRM6                at UFRML : 6
var volatile bit    UFRML_FRM7                at UFRML : 7
-- ------------------------------------------------
var volatile byte   UFRMH                     at { 0xF67 }
var volatile bit*3  UFRMH_FRM                 at UFRMH : 0
var volatile bit    UFRMH_FRM8                at UFRMH : 0
var volatile bit    UFRMH_FRM9                at UFRMH : 1
var volatile bit    UFRMH_FRM10               at UFRMH : 2
-- ------------------------------------------------
var volatile byte   UIR                       at { 0xF68 }
var volatile bit    UIR_URSTIF                at UIR : 0
var volatile bit    UIR_UERRIF                at UIR : 1
var volatile bit    UIR_ACTVIF                at UIR : 2
var volatile bit    UIR_TRNIF                 at UIR : 3
var volatile bit    UIR_IDLEIF                at UIR : 4
var volatile bit    UIR_STALLIF               at UIR : 5
var volatile bit    UIR_SOFIF                 at UIR : 6
-- ------------------------------------------------
var volatile byte   UIE                       at { 0xF69 }
var volatile bit    UIE_URSTIE                at UIE : 0
var volatile bit    UIE_UERRIE                at UIE : 1
var volatile bit    UIE_ACTVIE                at UIE : 2
var volatile bit    UIE_TRNIE                 at UIE : 3
var volatile bit    UIE_IDLEIE                at UIE : 4
var volatile bit    UIE_STALLIE               at UIE : 5
var volatile bit    UIE_SOFIE                 at UIE : 6
-- ------------------------------------------------
var volatile byte   UEIR                      at { 0xF6A }
var volatile bit    UEIR_PIDEF                at UEIR : 0
var volatile bit    UEIR_CRC5EF               at UEIR : 1
var volatile bit    UEIR_CRC16EF              at UEIR : 2
var volatile bit    UEIR_DFN8EF               at UEIR : 3
var volatile bit    UEIR_BTOEF                at UEIR : 4
var volatile bit    UEIR_BTSEF                at UEIR : 7
-- ------------------------------------------------
var volatile byte   UEIE                      at { 0xF6B }
var volatile bit    UEIE_PIDEE                at UEIE : 0
var volatile bit    UEIE_CRC5EE               at UEIE : 1
var volatile bit    UEIE_CRC16EE              at UEIE : 2
var volatile bit    UEIE_DFN8EE               at UEIE : 3
var volatile bit    UEIE_BTOEE                at UEIE : 4
var volatile bit    UEIE_BTSEE                at UEIE : 7
-- ------------------------------------------------
var volatile byte   USTAT                     at { 0xF6C }
var volatile bit    USTAT_PPBI                at USTAT : 1
var volatile bit    USTAT_DIR                 at USTAT : 2
var volatile bit*4  USTAT_ENDP                at USTAT : 3
var volatile bit    USTAT_ENDP0               at USTAT : 3
var volatile bit    USTAT_ENDP1               at USTAT : 4
var volatile bit    USTAT_ENDP2               at USTAT : 5
var volatile bit    USTAT_ENDP3               at USTAT : 6
-- ------------------------------------------------
var volatile byte   UCON                      at { 0xF6D }
var volatile bit    UCON_SUSPND               at UCON : 1
var volatile bit    UCON_RESUME               at UCON : 2
var volatile bit    UCON_USBEN                at UCON : 3
var volatile bit    UCON_PKTDIS               at UCON : 4
var volatile bit    UCON_SE0                  at UCON : 5
var volatile bit    UCON_PPBRST               at UCON : 6
-- ------------------------------------------------
var volatile byte   UADDR                     at { 0xF6E }
var volatile bit*7  UADDR_ADDR                at UADDR : 0
var volatile bit    UADDR_ADDR0               at UADDR : 0
var volatile bit    UADDR_ADDR1               at UADDR : 1
var volatile bit    UADDR_ADDR2               at UADDR : 2
var volatile bit    UADDR_ADDR3               at UADDR : 3
var volatile bit    UADDR_ADDR4               at UADDR : 4
var volatile bit    UADDR_ADDR5               at UADDR : 5
var volatile bit    UADDR_ADDR6               at UADDR : 6
-- ------------------------------------------------
var volatile byte   UCFG                      at { 0xF6F }
var volatile bit*2  UCFG_PPB                  at UCFG : 0
var volatile bit    UCFG_FSEN                 at UCFG : 2
var volatile bit    UCFG_UTRDIS               at UCFG : 3
var volatile bit    UCFG_UPUEN                at UCFG : 4
var volatile bit    UCFG_UOEMON               at UCFG : 6
var volatile bit    UCFG_UTEYE                at UCFG : 7
var volatile bit    UCFG_PPB0                 at UCFG : 0
var volatile bit    UCFG_PPB1                 at UCFG : 1
var volatile bit    UCFG_UPP0                 at UCFG : 0
var volatile bit    UCFG_UPP1                 at UCFG : 1
-- ------------------------------------------------
var volatile byte   UEP0                      at { 0xF70 }
var volatile bit    UEP0_EPSTALL              at UEP0 : 0
var volatile bit    UEP0_EPINEN               at UEP0 : 1
var volatile bit    UEP0_EPOUTEN              at UEP0 : 2
var volatile bit    UEP0_EPCONDIS             at UEP0 : 3
var volatile bit    UEP0_EPHSHK               at UEP0 : 4
var volatile bit    UEP0_EP0STALL             at UEP0 : 0
var volatile bit    UEP0_EP0INEN              at UEP0 : 1
var volatile bit    UEP0_EP0OUTEN             at UEP0 : 2
var volatile bit    UEP0_EP0CONDIS            at UEP0 : 3
var volatile bit    UEP0_EP0HSHK              at UEP0 : 4
var volatile bit    UEP0_EPSTALL0             at UEP0 : 0
var volatile bit    UEP0_EPINEN0              at UEP0 : 1
var volatile bit    UEP0_EPOUTEN0             at UEP0 : 2
var volatile bit    UEP0_EPCONDIS0            at UEP0 : 3
var volatile bit    UEP0_EPHSHK0              at UEP0 : 4
-- ------------------------------------------------
var volatile byte   UEP1                      at { 0xF71 }
var volatile bit    UEP1_EPSTALL              at UEP1 : 0
var volatile bit    UEP1_EPINEN               at UEP1 : 1
var volatile bit    UEP1_EPOUTEN              at UEP1 : 2
var volatile bit    UEP1_EPCONDIS             at UEP1 : 3
var volatile bit    UEP1_EPHSHK               at UEP1 : 4
var volatile bit    UEP1_EP1STALL             at UEP1 : 0
var volatile bit    UEP1_EP1INEN              at UEP1 : 1
var volatile bit    UEP1_EP1OUTEN             at UEP1 : 2
var volatile bit    UEP1_EP1CONDIS            at UEP1 : 3
var volatile bit    UEP1_EP1HSHK              at UEP1 : 4
var volatile bit    UEP1_EPSTALL1             at UEP1 : 0
var volatile bit    UEP1_EPINEN1              at UEP1 : 1
var volatile bit    UEP1_EPOUTEN1             at UEP1 : 2
var volatile bit    UEP1_EPCONDIS1            at UEP1 : 3
var volatile bit    UEP1_EPHSHK1              at UEP1 : 4
-- ------------------------------------------------
var volatile byte   UEP2                      at { 0xF72 }
var volatile bit    UEP2_EPSTALL              at UEP2 : 0
var volatile bit    UEP2_EPINEN               at UEP2 : 1
var volatile bit    UEP2_EPOUTEN              at UEP2 : 2
var volatile bit    UEP2_EPCONDIS             at UEP2 : 3
var volatile bit    UEP2_EPHSHK               at UEP2 : 4
var volatile bit    UEP2_EP2STALL             at UEP2 : 0
var volatile bit    UEP2_EP2INEN              at UEP2 : 1
var volatile bit    UEP2_EP2OUTEN             at UEP2 : 2
var volatile bit    UEP2_EP2CONDIS            at UEP2 : 3
var volatile bit    UEP2_EP2HSHK              at UEP2 : 4
var volatile bit    UEP2_EPSTALL2             at UEP2 : 0
var volatile bit    UEP2_EPINEN2              at UEP2 : 1
var volatile bit    UEP2_EPOUTEN2             at UEP2 : 2
var volatile bit    UEP2_EPCONDIS2            at UEP2 : 3
var volatile bit    UEP2_EPHSHK2              at UEP2 : 4
-- ------------------------------------------------
var volatile byte   UEP3                      at { 0xF73 }
var volatile bit    UEP3_EPSTALL              at UEP3 : 0
var volatile bit    UEP3_EPINEN               at UEP3 : 1
var volatile bit    UEP3_EPOUTEN              at UEP3 : 2
var volatile bit    UEP3_EPCONDIS             at UEP3 : 3
var volatile bit    UEP3_EPHSHK               at UEP3 : 4
var volatile bit    UEP3_EP3STALL             at UEP3 : 0
var volatile bit    UEP3_EP3INEN              at UEP3 : 1
var volatile bit    UEP3_EP3OUTEN             at UEP3 : 2
var volatile bit    UEP3_EP3CONDIS            at UEP3 : 3
var volatile bit    UEP3_EP3HSHK              at UEP3 : 4
var volatile bit    UEP3_EPSTALL3             at UEP3 : 0
var volatile bit    UEP3_EPINEN3              at UEP3 : 1
var volatile bit    UEP3_EPOUTEN3             at UEP3 : 2
var volatile bit    UEP3_EPCONDIS3            at UEP3 : 3
var volatile bit    UEP3_EPHSHK3              at UEP3 : 4
-- ------------------------------------------------
var volatile byte   UEP4                      at { 0xF74 }
var volatile bit    UEP4_EPSTALL              at UEP4 : 0
var volatile bit    UEP4_EPINEN               at UEP4 : 1
var volatile bit    UEP4_EPOUTEN              at UEP4 : 2
var volatile bit    UEP4_EPCONDIS             at UEP4 : 3
var volatile bit    UEP4_EPHSHK               at UEP4 : 4
var volatile bit    UEP4_EP4STALL             at UEP4 : 0
var volatile bit    UEP4_EP4INEN              at UEP4 : 1
var volatile bit    UEP4_EP4OUTEN             at UEP4 : 2
var volatile bit    UEP4_EP4CONDIS            at UEP4 : 3
var volatile bit    UEP4_EP4HSHK              at UEP4 : 4
var volatile bit    UEP4_EPSTALL4             at UEP4 : 0
var volatile bit    UEP4_EPINEN4              at UEP4 : 1
var volatile bit    UEP4_EPOUTEN4             at UEP4 : 2
var volatile bit    UEP4_EPCONDIS4            at UEP4 : 3
var volatile bit    UEP4_EPHSHK4              at UEP4 : 4
-- ------------------------------------------------
var volatile byte   UEP5                      at { 0xF75 }
var volatile bit    UEP5_EPSTALL              at UEP5 : 0
var volatile bit    UEP5_EPINEN               at UEP5 : 1
var volatile bit    UEP5_EPOUTEN              at UEP5 : 2
var volatile bit    UEP5_EPCONDIS             at UEP5 : 3
var volatile bit    UEP5_EPHSHK               at UEP5 : 4
var volatile bit    UEP5_EP5STALL             at UEP5 : 0
var volatile bit    UEP5_EP5INEN              at UEP5 : 1
var volatile bit    UEP5_EP5OUTEN             at UEP5 : 2
var volatile bit    UEP5_EP5CONDIS            at UEP5 : 3
var volatile bit    UEP5_EP5HSHK              at UEP5 : 4
var volatile bit    UEP5_EPSTALL5             at UEP5 : 0
var volatile bit    UEP5_EPINEN5              at UEP5 : 1
var volatile bit    UEP5_EPOUTEN5             at UEP5 : 2
var volatile bit    UEP5_EPCONDIS5            at UEP5 : 3
var volatile bit    UEP5_EPHSHK5              at UEP5 : 4
-- ------------------------------------------------
var volatile byte   UEP6                      at { 0xF76 }
var volatile bit    UEP6_EPSTALL              at UEP6 : 0
var volatile bit    UEP6_EPINEN               at UEP6 : 1
var volatile bit    UEP6_EPOUTEN              at UEP6 : 2
var volatile bit    UEP6_EPCONDIS             at UEP6 : 3
var volatile bit    UEP6_EPHSHK               at UEP6 : 4
var volatile bit    UEP6_EP6STALL             at UEP6 : 0
var volatile bit    UEP6_EP6INEN              at UEP6 : 1
var volatile bit    UEP6_EP6OUTEN             at UEP6 : 2
var volatile bit    UEP6_EP6CONDIS            at UEP6 : 3
var volatile bit    UEP6_EP6HSHK              at UEP6 : 4
var volatile bit    UEP6_EPSTALL6             at UEP6 : 0
var volatile bit    UEP6_EPINEN6              at UEP6 : 1
var volatile bit    UEP6_EPOUTEN6             at UEP6 : 2
var volatile bit    UEP6_EPCONDIS6            at UEP6 : 3
var volatile bit    UEP6_EPHSHK6              at UEP6 : 4
-- ------------------------------------------------
var volatile byte   UEP7                      at { 0xF77 }
var volatile bit    UEP7_EPSTALL              at UEP7 : 0
var volatile bit    UEP7_EPINEN               at UEP7 : 1
var volatile bit    UEP7_EPOUTEN              at UEP7 : 2
var volatile bit    UEP7_EPCONDIS             at UEP7 : 3
var volatile bit    UEP7_EPHSHK               at UEP7 : 4
var volatile bit    UEP7_EP7STALL             at UEP7 : 0
var volatile bit    UEP7_EP7INEN              at UEP7 : 1
var volatile bit    UEP7_EP7OUTEN             at UEP7 : 2
var volatile bit    UEP7_EP7CONDIS            at UEP7 : 3
var volatile bit    UEP7_EP7HSHK              at UEP7 : 4
var volatile bit    UEP7_EPSTALL7             at UEP7 : 0
var volatile bit    UEP7_EPINEN7              at UEP7 : 1
var volatile bit    UEP7_EPOUTEN7             at UEP7 : 2
var volatile bit    UEP7_EPCONDIS7            at UEP7 : 3
var volatile bit    UEP7_EPHSHK7              at UEP7 : 4
-- ------------------------------------------------
var volatile byte   UEP8                      at { 0xF78 }
var volatile bit    UEP8_EPSTALL              at UEP8 : 0
var volatile bit    UEP8_EPINEN               at UEP8 : 1
var volatile bit    UEP8_EPOUTEN              at UEP8 : 2
var volatile bit    UEP8_EPCONDIS             at UEP8 : 3
var volatile bit    UEP8_EPHSHK               at UEP8 : 4
var volatile bit    UEP8_EPSTALL8             at UEP8 : 0
var volatile bit    UEP8_EPINEN8              at UEP8 : 1
var volatile bit    UEP8_EPOUTEN8             at UEP8 : 2
var volatile bit    UEP8_EPCONDIS8            at UEP8 : 3
var volatile bit    UEP8_EPHSHK8              at UEP8 : 4
-- ------------------------------------------------
var volatile byte   UEP9                      at { 0xF79 }
var volatile bit    UEP9_EPSTALL              at UEP9 : 0
var volatile bit    UEP9_EPINEN               at UEP9 : 1
var volatile bit    UEP9_EPOUTEN              at UEP9 : 2
var volatile bit    UEP9_EPCONDIS             at UEP9 : 3
var volatile bit    UEP9_EPHSHK               at UEP9 : 4
var volatile bit    UEP9_EPSTALL9             at UEP9 : 0
var volatile bit    UEP9_EPINEN9              at UEP9 : 1
var volatile bit    UEP9_EPOUTEN9             at UEP9 : 2
var volatile bit    UEP9_EPCONDIS9            at UEP9 : 3
var volatile bit    UEP9_EPHSHK9              at UEP9 : 4
-- ------------------------------------------------
var volatile byte   UEP10                     at { 0xF7A }
var volatile bit    UEP10_EPSTALL             at UEP10 : 0
var volatile bit    UEP10_EPINEN              at UEP10 : 1
var volatile bit    UEP10_EPOUTEN             at UEP10 : 2
var volatile bit    UEP10_EPCONDIS            at UEP10 : 3
var volatile bit    UEP10_EPHSHK              at UEP10 : 4
var volatile bit    UEP10_EPSTALL10           at UEP10 : 0
var volatile bit    UEP10_EPINEN10            at UEP10 : 1
var volatile bit    UEP10_EPOUTEN10           at UEP10 : 2
var volatile bit    UEP10_EPCONDIS10          at UEP10 : 3
var volatile bit    UEP10_EPHSHK10            at UEP10 : 4
-- ------------------------------------------------
var volatile byte   UEP11                     at { 0xF7B }
var volatile bit    UEP11_EPSTALL             at UEP11 : 0
var volatile bit    UEP11_EPINEN              at UEP11 : 1
var volatile bit    UEP11_EPOUTEN             at UEP11 : 2
var volatile bit    UEP11_EPCONDIS            at UEP11 : 3
var volatile bit    UEP11_EPHSHK              at UEP11 : 4
var volatile bit    UEP11_EPSTALL11           at UEP11 : 0
var volatile bit    UEP11_EPINEN11            at UEP11 : 1
var volatile bit    UEP11_EPOUTEN11           at UEP11 : 2
var volatile bit    UEP11_EPCONDIS11          at UEP11 : 3
var volatile bit    UEP11_EPHSHK11            at UEP11 : 4
-- ------------------------------------------------
var volatile byte   UEP12                     at { 0xF7C }
var volatile bit    UEP12_EPSTALL             at UEP12 : 0
var volatile bit    UEP12_EPINEN              at UEP12 : 1
var volatile bit    UEP12_EPOUTEN             at UEP12 : 2
var volatile bit    UEP12_EPCONDIS            at UEP12 : 3
var volatile bit    UEP12_EPHSHK              at UEP12 : 4
var volatile bit    UEP12_EPSTALL12           at UEP12 : 0
var volatile bit    UEP12_EPINEN12            at UEP12 : 1
var volatile bit    UEP12_EPOUTEN12           at UEP12 : 2
var volatile bit    UEP12_EPCONDIS12          at UEP12 : 3
var volatile bit    UEP12_EPHSHK12            at UEP12 : 4
-- ------------------------------------------------
var volatile byte   UEP13                     at { 0xF7D }
var volatile bit    UEP13_EPSTALL             at UEP13 : 0
var volatile bit    UEP13_EPINEN              at UEP13 : 1
var volatile bit    UEP13_EPOUTEN             at UEP13 : 2
var volatile bit    UEP13_EPCONDIS            at UEP13 : 3
var volatile bit    UEP13_EPHSHK              at UEP13 : 4
var volatile bit    UEP13_EPSTALL13           at UEP13 : 0
var volatile bit    UEP13_EPINEN13            at UEP13 : 1
var volatile bit    UEP13_EPOUTEN13           at UEP13 : 2
var volatile bit    UEP13_EPCONDIS13          at UEP13 : 3
var volatile bit    UEP13_EPHSHK13            at UEP13 : 4
-- ------------------------------------------------
var volatile byte   UEP14                     at { 0xF7E }
var volatile bit    UEP14_EPSTALL             at UEP14 : 0
var volatile bit    UEP14_EPINEN              at UEP14 : 1
var volatile bit    UEP14_EPOUTEN             at UEP14 : 2
var volatile bit    UEP14_EPCONDIS            at UEP14 : 3
var volatile bit    UEP14_EPHSHK              at UEP14 : 4
var volatile bit    UEP14_EPSTALL14           at UEP14 : 0
var volatile bit    UEP14_EPINEN14            at UEP14 : 1
var volatile bit    UEP14_EPOUTEN14           at UEP14 : 2
var volatile bit    UEP14_EPCONDIS14          at UEP14 : 3
var volatile bit    UEP14_EPHSHK14            at UEP14 : 4
-- ------------------------------------------------
var volatile byte   UEP15                     at { 0xF7F }
var volatile bit    UEP15_EPSTALL             at UEP15 : 0
var volatile bit    UEP15_EPINEN              at UEP15 : 1
var volatile bit    UEP15_EPOUTEN             at UEP15 : 2
var volatile bit    UEP15_EPCONDIS            at UEP15 : 3
var volatile bit    UEP15_EPHSHK              at UEP15 : 4
var volatile bit    UEP15_EPSTALL15           at UEP15 : 0
var volatile bit    UEP15_EPINEN15            at UEP15 : 1
var volatile bit    UEP15_EPOUTEN15           at UEP15 : 2
var volatile bit    UEP15_EPCONDIS15          at UEP15 : 3
var volatile bit    UEP15_EPHSHK15            at UEP15 : 4
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0xF80 }
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    PORTA_RA5                 at PORTA : 5
var volatile bit    PORTA_RA6                 at PORTA : 6
var volatile bit    PORTA_AN0                 at PORTA : 0
var volatile bit    PORTA_AN1                 at PORTA : 1
var volatile bit    PORTA_AN2                 at PORTA : 2
var volatile bit    PORTA_AN3                 at PORTA : 3
var volatile bit    PORTA_T0CKI               at PORTA : 4
var volatile bit    PORTA_AN4                 at PORTA : 5
var volatile bit    PORTA_OSC2                at PORTA : 6
var volatile bit    PORTA_VREFM               at PORTA : 2
var volatile bit    PORTA_VREFP               at PORTA : 3
var volatile bit    PORTA_LVDIN               at PORTA : 5
var volatile bit    PORTA_HLVDIN              at PORTA : 5
var volatile bit    PORTA_ULPWUIN             at PORTA : 0
-- ------------------------------------------------
var volatile byte   PORTB                     at { 0xF81 }
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    PORTB_INT0                at PORTB : 0
var volatile bit    PORTB_INT1                at PORTB : 1
var volatile bit    PORTB_INT2                at PORTB : 2
var volatile bit    PORTB_PGM                 at PORTB : 5
var volatile bit    PORTB_PGC                 at PORTB : 6
var volatile bit    PORTB_PGD                 at PORTB : 7
var volatile bit    PORTB_CCP2_PA2            at PORTB : 3
-- ------------------------------------------------
var volatile byte   PORTC                     at { 0xF82 }
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    PORTC_RC2                 at PORTC : 2
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    pin_C4                    at PORTC : 4
alias               pin_VM                    is pin_C4
--
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    pin_C5                    at PORTC : 5
alias               pin_VP                    is pin_C5
--
var volatile bit    PORTC_RC6                 at PORTC : 6
var volatile bit    PORTC_RC7                 at PORTC : 7
var volatile bit    PORTC_T1OSO               at PORTC : 0
var volatile bit    PORTC_T1OSI               at PORTC : 1
var volatile bit    PORTC_CCP1                at PORTC : 2
var volatile bit    PORTC_TX                  at PORTC : 6
var volatile bit    PORTC_RX                  at PORTC : 7
var volatile bit    PORTC_T13CKI              at PORTC : 0
var volatile bit    PORTC_P1A                 at PORTC : 2
var volatile bit    PORTC_CK                  at PORTC : 6
var volatile bit    PORTC_DT                  at PORTC : 7
var volatile bit    PORTC_CCP2                at PORTC : 1
var volatile bit    PORTC_PA1                 at PORTC : 2
var volatile bit    PORTC_PA2                 at PORTC : 1
-- ------------------------------------------------
var volatile byte   PORTD                     at { 0xF83 }
var volatile bit    PORTD_RD0                 at PORTD : 0
var volatile bit    PORTD_RD1                 at PORTD : 1
var volatile bit    PORTD_RD2                 at PORTD : 2
var volatile bit    PORTD_RD3                 at PORTD : 3
var volatile bit    PORTD_RD4                 at PORTD : 4
var volatile bit    PORTD_RD5                 at PORTD : 5
var volatile bit    PORTD_RD6                 at PORTD : 6
var volatile bit    PORTD_RD7                 at PORTD : 7
var volatile bit    PORTD_SPP0                at PORTD : 0
var volatile bit    PORTD_SPP1                at PORTD : 1
var volatile bit    PORTD_SPP2                at PORTD : 2
var volatile bit    PORTD_SPP3                at PORTD : 3
var volatile bit    PORTD_SPP4                at PORTD : 4
var volatile bit    PORTD_SPP5                at PORTD : 5
var volatile bit    PORTD_SPP6                at PORTD : 6
var volatile bit    PORTD_SPP7                at PORTD : 7
var volatile bit    PORTD_SS2                 at PORTD : 7
-- ------------------------------------------------
var volatile byte   PORTE                     at { 0xF84 }
var volatile bit    PORTE_RE0                 at PORTE : 0
var volatile bit    PORTE_RE1                 at PORTE : 1
var volatile bit    PORTE_RE2                 at PORTE : 2
var volatile bit    PORTE_RE3                 at PORTE : 3
var volatile bit    pin_E3                    at PORTE : 3
--
var volatile bit    PORTE_RDPU                at PORTE : 7
var volatile bit    PORTE_CK1SPP              at PORTE : 0
var volatile bit    PORTE_CK2SPP              at PORTE : 1
var volatile bit    PORTE_OESPP               at PORTE : 2
var volatile bit    PORTE_PD2                 at PORTE : 0
var volatile bit    PORTE_PC2                 at PORTE : 1
var volatile bit    PORTE_CCP10               at PORTE : 2
var volatile bit    PORTE_CCP9E               at PORTE : 3
var volatile bit    PORTE_CCP2E               at PORTE : 7
var volatile bit    PORTE_RDE                 at PORTE : 0
var volatile bit    PORTE_WRE                 at PORTE : 1
var volatile bit    PORTE_CS                  at PORTE : 2
var volatile bit    PORTE_PC3E                at PORTE : 3
var volatile bit    PORTE_PA2E                at PORTE : 7
var volatile bit    PORTE_PB2                 at PORTE : 2
var volatile bit    PORTE_RE7                 at PORTE : 7
-- ------------------------------------------------
var volatile byte   LATA                      at { 0xF89 }
--
procedure PORTA'put(byte in x at LATA) is
   pragma inline
end procedure
--
procedure PORTA_low'put(byte in x) is
   LATA = (LATA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   LATA = (LATA & 0x0F) | (x << 4)
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    LATA_LATA0                at LATA : 0
var volatile bit    pin_A0                    at PORTA : 0
alias               pin_AN0                   is pin_A0
--
procedure pin_A0'put(bit in x at LATA : 0) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA1                at LATA : 1
var volatile bit    pin_A1                    at PORTA : 1
alias               pin_AN1                   is pin_A1
--
procedure pin_A1'put(bit in x at LATA : 1) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA2                at LATA : 2
var volatile bit    pin_A2                    at PORTA : 2
alias               pin_AN2                   is pin_A2
alias               pin_VREF_NEG              is pin_A2
alias               pin_CVREF                 is pin_A2
--
procedure pin_A2'put(bit in x at LATA : 2) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA3                at LATA : 3
var volatile bit    pin_A3                    at PORTA : 3
alias               pin_AN3                   is pin_A3
alias               pin_VREF_POS              is pin_A3
--
procedure pin_A3'put(bit in x at LATA : 3) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA4                at LATA : 4
var volatile bit    pin_A4                    at PORTA : 4
alias               pin_T0CKI                 is pin_A4
alias               pin_C1OUT                 is pin_A4
alias               pin_RCV                   is pin_A4
--
procedure pin_A4'put(bit in x at LATA : 4) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA5                at LATA : 5
var volatile bit    pin_A5                    at PORTA : 5
alias               pin_AN4                   is pin_A5
alias               pin_SS                    is pin_A5
alias               pin_HLVDIN                is pin_A5
alias               pin_C2OUT                 is pin_A5
--
procedure pin_A5'put(bit in x at LATA : 5) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA6                at LATA : 6
var volatile bit    pin_A6                    at PORTA : 6
alias               pin_OSC2                  is pin_A6
alias               pin_CLKO                  is pin_A6
--
procedure pin_A6'put(bit in x at LATA : 6) is
   pragma inline
end procedure
--
var volatile bit    LATA_LA0                  at LATA : 0
var volatile bit    LATA_LA1                  at LATA : 1
var volatile bit    LATA_LA2                  at LATA : 2
var volatile bit    LATA_LA3                  at LATA : 3
var volatile bit    LATA_LA4                  at LATA : 4
var volatile bit    LATA_LA5                  at LATA : 5
var volatile bit    LATA_LA6                  at LATA : 6
-- ------------------------------------------------
var volatile byte   LATB                      at { 0xF8A }
--
procedure PORTB'put(byte in x at LATB) is
   pragma inline
end procedure
--
procedure PORTB_low'put(byte in x) is
   LATB = (LATB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   LATB = (LATB & 0x0F) | (x << 4)
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    LATB_LATB0                at LATB : 0
var volatile bit    pin_B0                    at PORTB : 0
alias               pin_AN12                  is pin_B0
alias               pin_FLT0                  is pin_B0
alias               pin_SDI                   is pin_B0
alias               pin_SDA                   is pin_B0
--
procedure pin_B0'put(bit in x at LATB : 0) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB1                at LATB : 1
var volatile bit    pin_B1                    at PORTB : 1
alias               pin_AN10                  is pin_B1
alias               pin_SCK                   is pin_B1
alias               pin_SCL                   is pin_B1
--
procedure pin_B1'put(bit in x at LATB : 1) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB2                at LATB : 2
var volatile bit    pin_B2                    at PORTB : 2
alias               pin_AN8                   is pin_B2
alias               pin_VMO                   is pin_B2
--
procedure pin_B2'put(bit in x at LATB : 2) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB3                at LATB : 3
var volatile bit    pin_B3                    at PORTB : 3
alias               pin_AN9                   is pin_B3
alias               pin_CCP2_RB3              is pin_B3
alias               pin_VPO                   is pin_B3
--
procedure pin_B3'put(bit in x at LATB : 3) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB4                at LATB : 4
var volatile bit    pin_B4                    at PORTB : 4
alias               pin_AN11                  is pin_B4
alias               pin_KBI0                  is pin_B4
alias               pin_CSSPP                 is pin_B4
--
procedure pin_B4'put(bit in x at LATB : 4) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB5                at LATB : 5
var volatile bit    pin_B5                    at PORTB : 5
alias               pin_KBI1                  is pin_B5
alias               pin_PGM                   is pin_B5
--
procedure pin_B5'put(bit in x at LATB : 5) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB6                at LATB : 6
var volatile bit    pin_B6                    at PORTB : 6
alias               pin_KBI2                  is pin_B6
--
procedure pin_B6'put(bit in x at LATB : 6) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB7                at LATB : 7
var volatile bit    pin_B7                    at PORTB : 7
alias               pin_KBI3                  is pin_B7
--
procedure pin_B7'put(bit in x at LATB : 7) is
   pragma inline
end procedure
--
var volatile bit    LATB_LB0                  at LATB : 0
var volatile bit    LATB_LB1                  at LATB : 1
var volatile bit    LATB_LB2                  at LATB : 2
var volatile bit    LATB_LB3                  at LATB : 3
var volatile bit    LATB_LB4                  at LATB : 4
var volatile bit    LATB_LB5                  at LATB : 5
var volatile bit    LATB_LB6                  at LATB : 6
var volatile bit    LATB_LB7                  at LATB : 7
-- ------------------------------------------------
var volatile byte   LATC                      at { 0xF8B }
--
procedure PORTC'put(byte in x at LATC) is
   pragma inline
end procedure
--
procedure PORTC_low'put(byte in x) is
   LATC = (LATC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   LATC = (LATC & 0x0F) | (x << 4)
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    LATC_LATC0                at LATC : 0
var volatile bit    pin_C0                    at PORTC : 0
alias               pin_T1OSO                 is pin_C0
alias               pin_T13CKI                is pin_C0
--
procedure pin_C0'put(bit in x at LATC : 0) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC1                at LATC : 1
var volatile bit    pin_C1                    at PORTC : 1
alias               pin_T1OSI                 is pin_C1
alias               pin_CCP2_RC1              is pin_C1
alias               pin_UOE                   is pin_C1
--
procedure pin_C1'put(bit in x at LATC : 1) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC2                at LATC : 2
var volatile bit    pin_C2                    at PORTC : 2
alias               pin_CCP1                  is pin_C2
alias               pin_P1A                   is pin_C2
--
procedure pin_C2'put(bit in x at LATC : 2) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC6                at LATC : 6
var volatile bit    pin_C6                    at PORTC : 6
alias               pin_TX                    is pin_C6
alias               pin_CK                    is pin_C6
--
procedure pin_C6'put(bit in x at LATC : 6) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC7                at LATC : 7
var volatile bit    pin_C7                    at PORTC : 7
alias               pin_RX                    is pin_C7
alias               pin_DT                    is pin_C7
alias               pin_SDO                   is pin_C7
--
procedure pin_C7'put(bit in x at LATC : 7) is
   pragma inline
end procedure
--
var volatile bit    LATC_LC0                  at LATC : 0
var volatile bit    LATC_LC1                  at LATC : 1
var volatile bit    LATC_LC2                  at LATC : 2
var volatile bit    LATC_LC6                  at LATC : 6
var volatile bit    LATC_LC7                  at LATC : 7
-- ------------------------------------------------
var volatile byte   LATD                      at { 0xF8C }
--
procedure PORTD'put(byte in x at LATD) is
   pragma inline
end procedure
--
procedure PORTD_low'put(byte in x) is
   LATD = (LATD & 0xF0) | (x & 0x0F)
end procedure
function PORTD_low'get() return byte is
   return (PORTD & 0x0F)
end function
--
procedure PORTD_high'put(byte in x) is
   LATD = (LATD & 0x0F) | (x << 4)
end procedure
function PORTD_high'get() return byte is
   return (PORTD >> 4)
end function
--
var volatile bit    LATD_LATD0                at LATD : 0
var volatile bit    pin_D0                    at PORTD : 0
alias               pin_SPP0                  is pin_D0
--
procedure pin_D0'put(bit in x at LATD : 0) is
   pragma inline
end procedure
--
var volatile bit    LATD_LATD1                at LATD : 1
var volatile bit    pin_D1                    at PORTD : 1
alias               pin_SPP1                  is pin_D1
--
procedure pin_D1'put(bit in x at LATD : 1) is
   pragma inline
end procedure
--
var volatile bit    LATD_LATD2                at LATD : 2
var volatile bit    pin_D2                    at PORTD : 2
alias               pin_SPP2                  is pin_D2
--
procedure pin_D2'put(bit in x at LATD : 2) is
   pragma inline
end procedure
--
var volatile bit    LATD_LATD3                at LATD : 3
var volatile bit    pin_D3                    at PORTD : 3
alias               pin_SPP3                  is pin_D3
--
procedure pin_D3'put(bit in x at LATD : 3) is
   pragma inline
end procedure
--
var volatile bit    LATD_LATD4                at LATD : 4
var volatile bit    pin_D4                    at PORTD : 4
alias               pin_SPP4                  is pin_D4
--
procedure pin_D4'put(bit in x at LATD : 4) is
   pragma inline
end procedure
--
var volatile bit    LATD_LATD5                at LATD : 5
var volatile bit    pin_D5                    at PORTD : 5
alias               pin_SPP5                  is pin_D5
alias               pin_P1B                   is pin_D5
--
procedure pin_D5'put(bit in x at LATD : 5) is
   pragma inline
end procedure
--
var volatile bit    LATD_LATD6                at LATD : 6
var volatile bit    pin_D6                    at PORTD : 6
alias               pin_SPP6                  is pin_D6
alias               pin_P1C                   is pin_D6
--
procedure pin_D6'put(bit in x at LATD : 6) is
   pragma inline
end procedure
--
var volatile bit    LATD_LATD7                at LATD : 7
var volatile bit    pin_D7                    at PORTD : 7
alias               pin_SPP7                  is pin_D7
alias               pin_P1D                   is pin_D7
--
procedure pin_D7'put(bit in x at LATD : 7) is
   pragma inline
end procedure
--
var volatile bit    LATD_LD0                  at LATD : 0
var volatile bit    LATD_LD1                  at LATD : 1
var volatile bit    LATD_LD2                  at LATD : 2
var volatile bit    LATD_LD3                  at LATD : 3
var volatile bit    LATD_LD4                  at LATD : 4
var volatile bit    LATD_LD5                  at LATD : 5
var volatile bit    LATD_LD6                  at LATD : 6
var volatile bit    LATD_LD7                  at LATD : 7
-- ------------------------------------------------
var volatile byte   LATE                      at { 0xF8D }
--
procedure PORTE'put(byte in x at LATE) is
   pragma inline
end procedure
--
procedure PORTE_low'put(byte in x) is
   LATE = (LATE & 0xF0) | (x & 0x0F)
end procedure
function PORTE_low'get() return byte is
   return (PORTE & 0x0F)
end function
--
procedure PORTE_high'put(byte in x) is
   LATE = (LATE & 0x0F) | (x << 4)
end procedure
function PORTE_high'get() return byte is
   return (PORTE >> 4)
end function
--
var volatile bit    LATE_LATE0                at LATE : 0
var volatile bit    pin_E0                    at PORTE : 0
alias               pin_AN5                   is pin_E0
alias               pin_CK1SPP                is pin_E0
--
procedure pin_E0'put(bit in x at LATE : 0) is
   pragma inline
end procedure
--
var volatile bit    LATE_LATE1                at LATE : 1
var volatile bit    pin_E1                    at PORTE : 1
alias               pin_AN6                   is pin_E1
alias               pin_CK2SPP                is pin_E1
--
procedure pin_E1'put(bit in x at LATE : 1) is
   pragma inline
end procedure
--
var volatile bit    LATE_LATE2                at LATE : 2
var volatile bit    pin_E2                    at PORTE : 2
alias               pin_AN7                   is pin_E2
alias               pin_OESPP                 is pin_E2
--
procedure pin_E2'put(bit in x at LATE : 2) is
   pragma inline
end procedure
--
var volatile bit    LATE_LE0                  at LATE : 0
var volatile bit    LATE_LE1                  at LATE : 1
var volatile bit    LATE_LE2                  at LATE : 2
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0xF92 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_AN0_direction         is pin_A0_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_AN1_direction         is pin_A1_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_VREF_NEG_direction    is pin_A2_direction
alias               pin_CVREF_direction       is pin_A2_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_AN3_direction         is pin_A3_direction
alias               pin_VREF_POS_direction    is pin_A3_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_T0CKI_direction       is pin_A4_direction
alias               pin_C1OUT_direction       is pin_A4_direction
alias               pin_RCV_direction         is pin_A4_direction
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_AN4_direction         is pin_A5_direction
alias               pin_SS_direction          is pin_A5_direction
alias               pin_HLVDIN_direction      is pin_A5_direction
alias               pin_C2OUT_direction       is pin_A5_direction
--
var volatile bit    TRISA_TRISA6              at TRISA : 6
var volatile bit    pin_A6_direction          at TRISA : 6
alias               pin_OSC2_direction        is pin_A6_direction
alias               pin_CLKO_direction        is pin_A6_direction
--
var volatile bit    TRISA_RA0                 at TRISA : 0
var volatile bit    TRISA_RA1                 at TRISA : 1
var volatile bit    TRISA_RA2                 at TRISA : 2
var volatile bit    TRISA_RA3                 at TRISA : 3
var volatile bit    TRISA_RA4                 at TRISA : 4
var volatile bit    TRISA_RA5                 at TRISA : 5
var volatile bit    TRISA_RA6                 at TRISA : 6
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0xF93 }
alias               PORTB_direction           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB0              at TRISB : 0
var volatile bit    pin_B0_direction          at TRISB : 0
alias               pin_AN12_direction        is pin_B0_direction
alias               pin_FLT0_direction        is pin_B0_direction
alias               pin_SDI_direction         is pin_B0_direction
alias               pin_SDA_direction         is pin_B0_direction
--
var volatile bit    TRISB_TRISB1              at TRISB : 1
var volatile bit    pin_B1_direction          at TRISB : 1
alias               pin_AN10_direction        is pin_B1_direction
alias               pin_SCK_direction         is pin_B1_direction
alias               pin_SCL_direction         is pin_B1_direction
--
var volatile bit    TRISB_TRISB2              at TRISB : 2
var volatile bit    pin_B2_direction          at TRISB : 2
alias               pin_AN8_direction         is pin_B2_direction
alias               pin_VMO_direction         is pin_B2_direction
--
var volatile bit    TRISB_TRISB3              at TRISB : 3
var volatile bit    pin_B3_direction          at TRISB : 3
alias               pin_AN9_direction         is pin_B3_direction
alias               pin_CCP2_RB3_direction    is pin_B3_direction
alias               pin_VPO_direction         is pin_B3_direction
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
var volatile bit    pin_B4_direction          at TRISB : 4
alias               pin_AN11_direction        is pin_B4_direction
alias               pin_KBI0_direction        is pin_B4_direction
alias               pin_CSSPP_direction       is pin_B4_direction
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
var volatile bit    pin_B5_direction          at TRISB : 5
alias               pin_KBI1_direction        is pin_B5_direction
alias               pin_PGM_direction         is pin_B5_direction
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
var volatile bit    pin_B6_direction          at TRISB : 6
alias               pin_KBI2_direction        is pin_B6_direction
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
var volatile bit    pin_B7_direction          at TRISB : 7
alias               pin_KBI3_direction        is pin_B7_direction
--
var volatile bit    TRISB_RB0                 at TRISB : 0
var volatile bit    TRISB_RB1                 at TRISB : 1
var volatile bit    TRISB_RB2                 at TRISB : 2
var volatile bit    TRISB_RB3                 at TRISB : 3
var volatile bit    TRISB_RB4                 at TRISB : 4
var volatile bit    TRISB_RB5                 at TRISB : 5
var volatile bit    TRISB_RB6                 at TRISB : 6
var volatile bit    TRISB_RB7                 at TRISB : 7
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0xF94 }
alias               PORTC_direction           is TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
var volatile bit    pin_C0_direction          at TRISC : 0
alias               pin_T1OSO_direction       is pin_C0_direction
alias               pin_T13CKI_direction      is pin_C0_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
var volatile bit    pin_C1_direction          at TRISC : 1
alias               pin_T1OSI_direction       is pin_C1_direction
alias               pin_CCP2_RC1_direction    is pin_C1_direction
alias               pin_UOE_direction         is pin_C1_direction
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
var volatile bit    pin_C2_direction          at TRISC : 2
alias               pin_CCP1_direction        is pin_C2_direction
alias               pin_P1A_direction         is pin_C2_direction
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
var volatile bit    pin_C6_direction          at TRISC : 6
alias               pin_TX_direction          is pin_C6_direction
alias               pin_CK_direction          is pin_C6_direction
--
var volatile bit    TRISC_TRISC7              at TRISC : 7
var volatile bit    pin_C7_direction          at TRISC : 7
alias               pin_RX_direction          is pin_C7_direction
alias               pin_DT_direction          is pin_C7_direction
alias               pin_SDO_direction         is pin_C7_direction
--
var volatile bit    TRISC_RC0                 at TRISC : 0
var volatile bit    TRISC_RC1                 at TRISC : 1
var volatile bit    TRISC_RC2                 at TRISC : 2
var volatile bit    TRISC_RC6                 at TRISC : 6
var volatile bit    TRISC_RC7                 at TRISC : 7
-- ------------------------------------------------
var volatile byte   TRISD                     at { 0xF95 }
alias               PORTD_direction           is TRISD
--
procedure PORTD_low_direction'put(byte in x) is
   TRISD = (TRISD & 0xF0) | (x & 0x0F)
end procedure
function PORTD_low_direction'get() return byte is
   return (TRISD & 0x0F)
end function
--
procedure PORTD_high_direction'put(byte in x) is
   TRISD = (TRISD & 0x0F) | (x << 4)
end procedure
function PORTD_high_direction'get() return byte is
   return (TRISD >> 4)
end function
--
var volatile bit    TRISD_TRISD0              at TRISD : 0
var volatile bit    pin_D0_direction          at TRISD : 0
alias               pin_SPP0_direction        is pin_D0_direction
--
var volatile bit    TRISD_TRISD1              at TRISD : 1
var volatile bit    pin_D1_direction          at TRISD : 1
alias               pin_SPP1_direction        is pin_D1_direction
--
var volatile bit    TRISD_TRISD2              at TRISD : 2
var volatile bit    pin_D2_direction          at TRISD : 2
alias               pin_SPP2_direction        is pin_D2_direction
--
var volatile bit    TRISD_TRISD3              at TRISD : 3
var volatile bit    pin_D3_direction          at TRISD : 3
alias               pin_SPP3_direction        is pin_D3_direction
--
var volatile bit    TRISD_TRISD4              at TRISD : 4
var volatile bit    pin_D4_direction          at TRISD : 4
alias               pin_SPP4_direction        is pin_D4_direction
--
var volatile bit    TRISD_TRISD5              at TRISD : 5
var volatile bit    pin_D5_direction          at TRISD : 5
alias               pin_SPP5_direction        is pin_D5_direction
alias               pin_P1B_direction         is pin_D5_direction
--
var volatile bit    TRISD_TRISD6              at TRISD : 6
var volatile bit    pin_D6_direction          at TRISD : 6
alias               pin_SPP6_direction        is pin_D6_direction
alias               pin_P1C_direction         is pin_D6_direction
--
var volatile bit    TRISD_TRISD7              at TRISD : 7
var volatile bit    pin_D7_direction          at TRISD : 7
alias               pin_SPP7_direction        is pin_D7_direction
alias               pin_P1D_direction         is pin_D7_direction
--
var volatile bit    TRISD_RD0                 at TRISD : 0
var volatile bit    TRISD_RD1                 at TRISD : 1
var volatile bit    TRISD_RD2                 at TRISD : 2
var volatile bit    TRISD_RD3                 at TRISD : 3
var volatile bit    TRISD_RD4                 at TRISD : 4
var volatile bit    TRISD_RD5                 at TRISD : 5
var volatile bit    TRISD_RD6                 at TRISD : 6
var volatile bit    TRISD_RD7                 at TRISD : 7
-- ------------------------------------------------
var volatile byte   TRISE                     at { 0xF96 }
alias               PORTE_direction           is TRISE
--
procedure PORTE_low_direction'put(byte in x) is
   TRISE = (TRISE & 0xF0) | (x & 0x0F)
end procedure
function PORTE_low_direction'get() return byte is
   return (TRISE & 0x0F)
end function
--
procedure PORTE_high_direction'put(byte in x) is
   TRISE = (TRISE & 0x0F) | (x << 4)
end procedure
function PORTE_high_direction'get() return byte is
   return (TRISE >> 4)
end function
--
var volatile bit    TRISE_TRISE0              at TRISE : 0
var volatile bit    pin_E0_direction          at TRISE : 0
alias               pin_AN5_direction         is pin_E0_direction
alias               pin_CK1SPP_direction      is pin_E0_direction
--
var volatile bit    TRISE_TRISE1              at TRISE : 1
var volatile bit    pin_E1_direction          at TRISE : 1
alias               pin_AN6_direction         is pin_E1_direction
alias               pin_CK2SPP_direction      is pin_E1_direction
--
var volatile bit    TRISE_TRISE2              at TRISE : 2
var volatile bit    pin_E2_direction          at TRISE : 2
alias               pin_AN7_direction         is pin_E2_direction
alias               pin_OESPP_direction       is pin_E2_direction
--
var volatile bit    TRISE_RE0                 at TRISE : 0
var volatile bit    TRISE_RE1                 at TRISE : 1
var volatile bit    TRISE_RE2                 at TRISE : 2
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0xF9B }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
var volatile bit    OSCTUNE_INTSRC            at OSCTUNE : 7
var volatile bit    OSCTUNE_TUN0              at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN1              at OSCTUNE : 1
var volatile bit    OSCTUNE_TUN2              at OSCTUNE : 2
var volatile bit    OSCTUNE_TUN3              at OSCTUNE : 3
var volatile bit    OSCTUNE_TUN4              at OSCTUNE : 4
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0xF9D }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_CCP1IE               at PIE1 : 2
alias               PIE1_CCPIE                is PIE1_CCP1IE
var volatile bit    PIE1_SSPIE                at PIE1 : 3
var volatile bit    PIE1_TXIE                 at PIE1 : 4
var volatile bit    PIE1_RCIE                 at PIE1 : 5
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_SPPIE                at PIE1 : 7
var volatile bit    PIE1_TX1IE                at PIE1 : 4
var volatile bit    PIE1_RC1IE                at PIE1 : 5
var volatile bit    PIE1_PSPIE                at PIE1 : 7
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xF9E }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_CCP1IF               at PIR1 : 2
alias               PIR1_CCPIF                is PIR1_CCP1IF
var volatile bit    PIR1_SSPIF                at PIR1 : 3
var volatile bit    PIR1_TXIF                 at PIR1 : 4
var volatile bit    PIR1_RCIF                 at PIR1 : 5
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_SPPIF                at PIR1 : 7
var volatile bit    PIR1_TX1IF                at PIR1 : 4
var volatile bit    PIR1_RC1IF                at PIR1 : 5
var volatile bit    PIR1_PSPIF                at PIR1 : 7
-- ------------------------------------------------
var volatile byte   IPR1                      at { 0xF9F }
var volatile bit    IPR1_TMR1IP               at IPR1 : 0
var volatile bit    IPR1_TMR2IP               at IPR1 : 1
var volatile bit    IPR1_CCP1IP               at IPR1 : 2
alias               IPR1_CCPIP                is IPR1_CCP1IP
var volatile bit    IPR1_SSPIP                at IPR1 : 3
var volatile bit    IPR1_TXIP                 at IPR1 : 4
var volatile bit    IPR1_RCIP                 at IPR1 : 5
var volatile bit    IPR1_ADIP                 at IPR1 : 6
var volatile bit    IPR1_SPPIP                at IPR1 : 7
var volatile bit    IPR1_TX1IP                at IPR1 : 4
var volatile bit    IPR1_RC1IP                at IPR1 : 5
var volatile bit    IPR1_PSPIP                at IPR1 : 7
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0xFA0 }
var volatile bit    PIE2_CCP2IE               at PIE2 : 0
var volatile bit    PIE2_TMR3IE               at PIE2 : 1
var volatile bit    PIE2_HLVDIE               at PIE2 : 2
var volatile bit    PIE2_BCLIE                at PIE2 : 3
var volatile bit    PIE2_EEIE                 at PIE2 : 4
var volatile bit    PIE2_USBIE                at PIE2 : 5
var volatile bit    PIE2_CMIE                 at PIE2 : 6
var volatile bit    PIE2_OSCFIE               at PIE2 : 7
var volatile bit    PIE2_LVDIE                at PIE2 : 2
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xFA1 }
var volatile bit    PIR2_CCP2IF               at PIR2 : 0
var volatile bit    PIR2_TMR3IF               at PIR2 : 1
var volatile bit    PIR2_HLVDIF               at PIR2 : 2
var volatile bit    PIR2_BCLIF                at PIR2 : 3
var volatile bit    PIR2_EEIF                 at PIR2 : 4
var volatile bit    PIR2_USBIF                at PIR2 : 5
var volatile bit    PIR2_CMIF                 at PIR2 : 6
var volatile bit    PIR2_OSCFIF               at PIR2 : 7
var volatile bit    PIR2_LVDIF                at PIR2 : 2
-- ------------------------------------------------
var volatile byte   IPR2                      at { 0xFA2 }
var volatile bit    IPR2_CCP2IP               at IPR2 : 0
var volatile bit    IPR2_TMR3IP               at IPR2 : 1
var volatile bit    IPR2_HLVDIP               at IPR2 : 2
var volatile bit    IPR2_BCLIP                at IPR2 : 3
var volatile bit    IPR2_EEIP                 at IPR2 : 4
var volatile bit    IPR2_USBIP                at IPR2 : 5
var volatile bit    IPR2_CMIP                 at IPR2 : 6
var volatile bit    IPR2_OSCFIP               at IPR2 : 7
var volatile bit    IPR2_LVDIP                at IPR2 : 2
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0xFA6 }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_FREE               at EECON1 : 4
var volatile bit    EECON1_CFGS               at EECON1 : 6
var volatile bit    EECON1_EEPGD              at EECON1 : 7
var volatile bit    EECON1_EEFS               at EECON1 : 6
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0xFA7 }
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0xFA8 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0xFA9 }
-- ------------------------------------------------
var volatile byte   RCSTA                     at { 0xFAB }
var volatile bit    RCSTA_RX9D                at RCSTA : 0
var volatile bit    RCSTA_OERR                at RCSTA : 1
var volatile bit    RCSTA_FERR                at RCSTA : 2
var volatile bit    RCSTA_ADDEN               at RCSTA : 3
var volatile bit    RCSTA_CREN                at RCSTA : 4
var volatile bit    RCSTA_SREN                at RCSTA : 5
var volatile bit    RCSTA_RX9                 at RCSTA : 6
var volatile bit    RCSTA_SPEN                at RCSTA : 7
var volatile bit    RCSTA_ADEN                at RCSTA : 3
var volatile bit    RCSTA_SRENA               at RCSTA : 5
-- ------------------------------------------------
var volatile byte   TXSTA                     at { 0xFAC }
var volatile bit    TXSTA_TX9D                at TXSTA : 0
var volatile bit    TXSTA_TRMT                at TXSTA : 1
var volatile bit    TXSTA_BRGH                at TXSTA : 2
var volatile bit    TXSTA_SENDB               at TXSTA : 3
var volatile bit    TXSTA_SYNC                at TXSTA : 4
var volatile bit    TXSTA_TXEN                at TXSTA : 5
var volatile bit    TXSTA_TX9                 at TXSTA : 6
var volatile bit    TXSTA_CSRC                at TXSTA : 7
var volatile bit    TXSTA_TX9D1               at TXSTA : 0
var volatile bit    TXSTA_TRMT1               at TXSTA : 1
var volatile bit    TXSTA_BRGH1               at TXSTA : 2
var volatile bit    TXSTA_SENDB1              at TXSTA : 3
var volatile bit    TXSTA_SYNC1               at TXSTA : 4
var volatile bit    TXSTA_TXEN1               at TXSTA : 5
var volatile bit    TXSTA_TX91                at TXSTA : 6
var volatile bit    TXSTA_CSRC1               at TXSTA : 7
-- ------------------------------------------------
var volatile byte   TXREG                     at { 0xFAD }
-- ------------------------------------------------
var volatile byte   RCREG                     at { 0xFAE }
-- ------------------------------------------------
var volatile byte   SPBRG                     at { 0xFAF }
alias               SPBRGL                    is SPBRG
-- ------------------------------------------------
var volatile byte   SPBRGH                    at { 0xFB0 }
-- ------------------------------------------------
var volatile byte   T3CON                     at { 0xFB1 }
var volatile bit    T3CON_TMR3ON              at T3CON : 0
var volatile bit    T3CON_TMR3CS              at T3CON : 1
var volatile bit    T3CON_NT3SYNC             at T3CON : 2
alias               T3CON_T3SYNC              is T3CON_NT3SYNC
var volatile bit    T3CON_T3CCP1              at T3CON : 3
var volatile bit*2  T3CON_T3CKPS              at T3CON : 4
var volatile bit    T3CON_T3CCP2              at T3CON : 6
var volatile bit    T3CON_RD16                at T3CON : 7
var volatile bit    T3CON_T3CKPS0             at T3CON : 4
var volatile bit    T3CON_T3CKPS1             at T3CON : 5
var volatile bit    T3CON_T3NSYNC             at T3CON : 2
var volatile bit    T3CON_SOSCEN3             at T3CON : 3
var volatile bit    T3CON_RD163               at T3CON : 7
var volatile bit    T3CON_T3RD16              at T3CON : 7
-- ------------------------------------------------
var volatile word   TMR3                      at { 0xFB2 }
-- ------------------------------------------------
var volatile byte   TMR3L                     at { 0xFB2 }
-- ------------------------------------------------
var volatile byte   TMR3H                     at { 0xFB3 }
-- ------------------------------------------------
var volatile byte   CMCON                     at { 0xFB4 }
var volatile bit*3  CMCON_CM                  at CMCON : 0
var volatile bit    CMCON_CIS                 at CMCON : 3
var volatile bit    CMCON_C1INV               at CMCON : 4
var volatile bit    CMCON_C2INV               at CMCON : 5
var volatile bit    CMCON_C1OUT               at CMCON : 6
var volatile bit    CMCON_C2OUT               at CMCON : 7
var volatile bit    CMCON_CM0                 at CMCON : 0
var volatile bit    CMCON_CM1                 at CMCON : 1
var volatile bit    CMCON_CM2                 at CMCON : 2
var volatile bit    CMCON_CMEN0               at CMCON : 0
var volatile bit    CMCON_CMEN1               at CMCON : 1
var volatile bit    CMCON_CMEN2               at CMCON : 2
-- ------------------------------------------------
var volatile byte   CVRCON                    at { 0xFB5 }
var volatile bit*4  CVRCON_CVR                at CVRCON : 0
var volatile bit    CVRCON_CVRSS              at CVRCON : 4
var volatile bit    CVRCON_CVRR               at CVRCON : 5
var volatile bit    CVRCON_CVROE              at CVRCON : 6
var volatile bit    CVRCON_CVREN              at CVRCON : 7
var volatile bit    CVRCON_CVR0               at CVRCON : 0
var volatile bit    CVRCON_CVR1               at CVRCON : 1
var volatile bit    CVRCON_CVR2               at CVRCON : 2
var volatile bit    CVRCON_CVR3               at CVRCON : 3
var volatile bit    CVRCON_CVREF              at CVRCON : 4
var volatile bit    CVRCON_CVROEN             at CVRCON : 6
-- ------------------------------------------------
var volatile byte   ECCP1AS                   at { 0xFB6 }
var volatile bit*2  ECCP1AS_PSSBD             at ECCP1AS : 0
var volatile bit*2  ECCP1AS_PSSAC             at ECCP1AS : 2
var volatile bit*3  ECCP1AS_ECCPAS            at ECCP1AS : 4
var volatile bit    ECCP1AS_ECCPASE           at ECCP1AS : 7
var volatile bit    ECCP1AS_PSSBD0            at ECCP1AS : 0
var volatile bit    ECCP1AS_PSSBD1            at ECCP1AS : 1
var volatile bit    ECCP1AS_PSSAC0            at ECCP1AS : 2
var volatile bit    ECCP1AS_PSSAC1            at ECCP1AS : 3
var volatile bit    ECCP1AS_ECCPAS0           at ECCP1AS : 4
var volatile bit    ECCP1AS_ECCPAS1           at ECCP1AS : 5
var volatile bit    ECCP1AS_ECCPAS2           at ECCP1AS : 6
-- ------------------------------------------------
var volatile byte   ECCP1DEL                  at { 0xFB7 }
var volatile bit*7  ECCP1DEL_PDC              at ECCP1DEL : 0
var volatile bit    ECCP1DEL_PRSEN            at ECCP1DEL : 7
var volatile bit    ECCP1DEL_PDC0             at ECCP1DEL : 0
var volatile bit    ECCP1DEL_PDC1             at ECCP1DEL : 1
var volatile bit    ECCP1DEL_PDC2             at ECCP1DEL : 2
var volatile bit    ECCP1DEL_PDC3             at ECCP1DEL : 3
var volatile bit    ECCP1DEL_PDC4             at ECCP1DEL : 4
var volatile bit    ECCP1DEL_PDC5             at ECCP1DEL : 5
var volatile bit    ECCP1DEL_PDC6             at ECCP1DEL : 6
-- ------------------------------------------------
var volatile byte   BAUDCON                   at { 0xFB8 }
var volatile bit    BAUDCON_ABDEN             at BAUDCON : 0
var volatile bit    BAUDCON_WUE               at BAUDCON : 1
var volatile bit    BAUDCON_BRG16             at BAUDCON : 3
var volatile bit    BAUDCON_TXCKP             at BAUDCON : 4
var volatile bit    BAUDCON_RXDTP             at BAUDCON : 5
var volatile bit    BAUDCON_RCIDL             at BAUDCON : 6
var volatile bit    BAUDCON_ABDOVF            at BAUDCON : 7
var volatile bit    BAUDCON_SCKP              at BAUDCON : 4
var volatile bit    BAUDCON_RCMT              at BAUDCON : 6
var volatile bit    BAUDCON_RXCKP             at BAUDCON : 5
-- ------------------------------------------------
var volatile byte   CCP2CON                   at { 0xFBA }
var volatile bit*4  CCP2CON_CCP2M             at CCP2CON : 0
alias               CCP2CON_MODE              is CCP2CON_CCP2M
var volatile bit*2  CCP2CON_DC2B              at CCP2CON : 4
var volatile bit    CCP2CON_CCP2M0            at CCP2CON : 0
var volatile bit    CCP2CON_CCP2M1            at CCP2CON : 1
var volatile bit    CCP2CON_CCP2M2            at CCP2CON : 2
var volatile bit    CCP2CON_CCP2M3            at CCP2CON : 3
var volatile bit    CCP2CON_DC2B0             at CCP2CON : 4
var volatile bit    CCP2CON_DC2B1             at CCP2CON : 5
-- ------------------------------------------------
var volatile word   CCPR2                     at { 0xFBB }
-- ------------------------------------------------
var volatile byte   CCPR2L                    at { 0xFBB }
-- ------------------------------------------------
var volatile byte   CCPR2H                    at { 0xFBC }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0xFBD }
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
alias               CCP1CON_MODE              is CCP1CON_CCP1M
var volatile bit*2  CCP1CON_DC1B              at CCP1CON : 4
var volatile bit*2  CCP1CON_P1M               at CCP1CON : 6
var volatile bit    CCP1CON_CCP1M0            at CCP1CON : 0
var volatile bit    CCP1CON_CCP1M1            at CCP1CON : 1
var volatile bit    CCP1CON_CCP1M2            at CCP1CON : 2
var volatile bit    CCP1CON_CCP1M3            at CCP1CON : 3
var volatile bit    CCP1CON_DC1B0             at CCP1CON : 4
var volatile bit    CCP1CON_DC1B1             at CCP1CON : 5
var volatile bit    CCP1CON_P1M0              at CCP1CON : 6
var volatile bit    CCP1CON_P1M1              at CCP1CON : 7
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0xFBE }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0xFBE }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0xFBF }
-- ------------------------------------------------
var volatile byte   ADCON2                    at { 0xFC0 }
var volatile bit*3  ADCON2_ADCS               at ADCON2 : 0
var volatile bit*3  ADCON2_ACQT               at ADCON2 : 3
var volatile bit    ADCON2_ADFM               at ADCON2 : 7
var volatile bit    ADCON2_ADCS0              at ADCON2 : 0
var volatile bit    ADCON2_ADCS1              at ADCON2 : 1
var volatile bit    ADCON2_ADCS2              at ADCON2 : 2
var volatile bit    ADCON2_ACQT0              at ADCON2 : 3
var volatile bit    ADCON2_ACQT1              at ADCON2 : 4
var volatile bit    ADCON2_ACQT2              at ADCON2 : 5
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0xFC1 }
var volatile bit*4  ADCON1_PCFG               at ADCON1 : 0
var volatile bit*2  ADCON1_VCFG               at ADCON1 : 4
var volatile bit    ADCON1_PCFG0              at ADCON1 : 0
var volatile bit    ADCON1_PCFG1              at ADCON1 : 1
var volatile bit    ADCON1_PCFG2              at ADCON1 : 2
var volatile bit    ADCON1_PCFG3              at ADCON1 : 3
var volatile bit    ADCON1_VCFG0              at ADCON1 : 4
var volatile bit    ADCON1_VCFG1              at ADCON1 : 5
var volatile bit    ADCON1_CHSN3              at ADCON1 : 3
var volatile bit    ADCON1_VCFG01             at ADCON1 : 4
var volatile bit    ADCON1_VCFG11             at ADCON1 : 5
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0xFC2 }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 1
var volatile bit*4  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_GO_DONE            at ADCON0 : 1
var volatile bit    ADCON0_CHS0               at ADCON0 : 2
var volatile bit    ADCON0_CHS1               at ADCON0 : 3
var volatile bit    ADCON0_CHS2               at ADCON0 : 4
var volatile bit    ADCON0_CHS3               at ADCON0 : 5
var volatile bit    ADCON0_DONE               at ADCON0 : 1
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_GODONE             at ADCON0 : 1
-- ------------------------------------------------
var volatile word   ADRES                     at { 0xFC3 }
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0xFC3 }
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0xFC4 }
-- ------------------------------------------------
var volatile byte   SSPCON2                   at { 0xFC5 }
var volatile bit    SSPCON2_SEN               at SSPCON2 : 0
var volatile bit    SSPCON2_RSEN              at SSPCON2 : 1
var volatile bit    SSPCON2_PEN               at SSPCON2 : 2
var volatile bit    SSPCON2_RCEN              at SSPCON2 : 3
var volatile bit    SSPCON2_ACKEN             at SSPCON2 : 4
var volatile bit    SSPCON2_ACKDT             at SSPCON2 : 5
var volatile bit    SSPCON2_ACKSTAT           at SSPCON2 : 6
var volatile bit    SSPCON2_GCEN              at SSPCON2 : 7
-- ------------------------------------------------
var volatile byte   SSPCON1                   at { 0xFC6 }
var volatile bit*4  SSPCON1_SSPM              at SSPCON1 : 0
var volatile bit    SSPCON1_CKP               at SSPCON1 : 4
var volatile bit    SSPCON1_SSPEN             at SSPCON1 : 5
var volatile bit    SSPCON1_SSPOV             at SSPCON1 : 6
var volatile bit    SSPCON1_WCOL              at SSPCON1 : 7
var volatile bit    SSPCON1_SSPM0             at SSPCON1 : 0
var volatile bit    SSPCON1_SSPM1             at SSPCON1 : 1
var volatile bit    SSPCON1_SSPM2             at SSPCON1 : 2
var volatile bit    SSPCON1_SSPM3             at SSPCON1 : 3
-- ------------------------------------------------
var volatile byte   SSPSTAT                   at { 0xFC7 }
var volatile bit    SSPSTAT_BF                at SSPSTAT : 0
var volatile bit    SSPSTAT_UA                at SSPSTAT : 1
var volatile bit    SSPSTAT_R_NW              at SSPSTAT : 2
var volatile bit    SSPSTAT_S                 at SSPSTAT : 3
var volatile bit    SSPSTAT_P                 at SSPSTAT : 4
var volatile bit    SSPSTAT_D_NA              at SSPSTAT : 5
var volatile bit    SSPSTAT_CKE               at SSPSTAT : 6
var volatile bit    SSPSTAT_SMP               at SSPSTAT : 7
var volatile bit    SSPSTAT_R_W               at SSPSTAT : 2
var volatile bit    SSPSTAT_D_A               at SSPSTAT : 5
var volatile bit    SSPSTAT_I2C_READ          at SSPSTAT : 2
var volatile bit    SSPSTAT_I2C_START         at SSPSTAT : 3
var volatile bit    SSPSTAT_I2C_STOP          at SSPSTAT : 4
var volatile bit    SSPSTAT_I2C_DAT           at SSPSTAT : 5
var volatile bit    SSPSTAT_NW                at SSPSTAT : 2
var volatile bit    SSPSTAT_NA                at SSPSTAT : 5
var volatile bit    SSPSTAT_NWRITE            at SSPSTAT : 2
var volatile bit    SSPSTAT_NADDRESS          at SSPSTAT : 5
var volatile bit    SSPSTAT_READ_WRITE        at SSPSTAT : 2
var volatile bit    SSPSTAT_DATA_ADDRESS      at SSPSTAT : 5
var volatile bit    SSPSTAT_R                 at SSPSTAT : 2
var volatile bit    SSPSTAT_D                 at SSPSTAT : 5
var volatile bit    SSPSTAT_RW                at SSPSTAT : 2
var volatile bit    SSPSTAT_START             at SSPSTAT : 3
var volatile bit    SSPSTAT_STOP              at SSPSTAT : 4
var volatile bit    SSPSTAT_DA                at SSPSTAT : 5
var volatile bit    SSPSTAT_NOT_W             at SSPSTAT : 2
var volatile bit    SSPSTAT_NOT_A             at SSPSTAT : 5
-- ------------------------------------------------
var volatile byte   SSPADD                    at { 0xFC8 }
-- ------------------------------------------------
var volatile byte   SSPBUF                    at { 0xFC9 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0xFCA }
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_T2CKPS0             at T2CON : 0
var volatile bit    T2CON_T2CKPS1             at T2CON : 1
var volatile bit    T2CON_T2OUTPS0            at T2CON : 3
var volatile bit    T2CON_T2OUTPS1            at T2CON : 4
var volatile bit    T2CON_T2OUTPS2            at T2CON : 5
var volatile bit    T2CON_T2OUTPS3            at T2CON : 6
var volatile bit    T2CON_TOUTPS0             at T2CON : 3
var volatile bit    T2CON_TOUTPS1             at T2CON : 4
var volatile bit    T2CON_TOUTPS2             at T2CON : 5
var volatile bit    T2CON_TOUTPS3             at T2CON : 6
-- ------------------------------------------------
var volatile byte   PR2                       at { 0xFCB }
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0xFCC }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0xFCD }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
alias               T1CON_T1SYNC              is T1CON_NT1SYNC
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1RUN               at T1CON : 6
var volatile bit    T1CON_RD16                at T1CON : 7
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
var volatile bit    T1CON_SOSCEN              at T1CON : 3
var volatile bit    T1CON_T1RD16              at T1CON : 7
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xFCE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xFCE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xFCF }
-- ------------------------------------------------
var volatile byte   RCON                      at { 0xFD0 }
var volatile bit    RCON_NBOR                 at RCON : 0
var volatile bit    RCON_NPOR                 at RCON : 1
var volatile bit    RCON_NPD                  at RCON : 2
var volatile bit    RCON_NTO                  at RCON : 3
var volatile bit    RCON_NRI                  at RCON : 4
var volatile bit    RCON_SBOREN               at RCON : 6
var volatile bit    RCON_IPEN                 at RCON : 7
var volatile bit    RCON_BOR                  at RCON : 0
var volatile bit    RCON_POR                  at RCON : 1
var volatile bit    RCON_PD                   at RCON : 2
var volatile bit    RCON_TO                   at RCON : 3
var volatile bit    RCON_RI                   at RCON : 4
var volatile bit    RCON_NIPEN                at RCON : 7
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0xFD1 }
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
var volatile bit    WDTCON_SWDTE              at WDTCON : 0
-- ------------------------------------------------
var volatile byte   HLVDCON                   at { 0xFD2 }
var volatile bit*4  HLVDCON_HLVDL             at HLVDCON : 0
var volatile bit    HLVDCON_HLVDEN            at HLVDCON : 4
var volatile bit    HLVDCON_IRVST             at HLVDCON : 5
var volatile bit    HLVDCON_VDIRMAG           at HLVDCON : 7
var volatile bit    HLVDCON_HLVDL0            at HLVDCON : 0
var volatile bit    HLVDCON_HLVDL1            at HLVDCON : 1
var volatile bit    HLVDCON_HLVDL2            at HLVDCON : 2
var volatile bit    HLVDCON_HLVDL3            at HLVDCON : 3
var volatile bit    HLVDCON_LVDL0             at HLVDCON : 0
var volatile bit    HLVDCON_LVDL1             at HLVDCON : 1
var volatile bit    HLVDCON_LVDL2             at HLVDCON : 2
var volatile bit    HLVDCON_LVDL3             at HLVDCON : 3
var volatile bit    HLVDCON_LVDEN             at HLVDCON : 4
var volatile bit    HLVDCON_IVRST             at HLVDCON : 5
var volatile bit    HLVDCON_LVV0              at HLVDCON : 0
var volatile bit    HLVDCON_LVV1              at HLVDCON : 1
var volatile bit    HLVDCON_LVV2              at HLVDCON : 2
var volatile bit    HLVDCON_LVV3              at HLVDCON : 3
var volatile bit    HLVDCON_BGST              at HLVDCON : 5
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0xFD3 }
var volatile bit*2  OSCCON_SCS                at OSCCON : 0
var volatile bit    OSCCON_IOFS               at OSCCON : 2
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_IDLEN              at OSCCON : 7
var volatile bit    OSCCON_SCS0               at OSCCON : 0
var volatile bit    OSCCON_SCS1               at OSCCON : 1
var volatile bit    OSCCON_FLTS               at OSCCON : 2
var volatile bit    OSCCON_IRCF0              at OSCCON : 4
var volatile bit    OSCCON_IRCF1              at OSCCON : 5
var volatile bit    OSCCON_IRCF2              at OSCCON : 6
-- ------------------------------------------------
var volatile byte   T0CON                     at { 0xFD5 }
var volatile bit*3  T0CON_T0PS                at T0CON : 0
var volatile bit    T0CON_PSA                 at T0CON : 3
var volatile bit    T0CON_T0SE                at T0CON : 4
var volatile bit    T0CON_T0CS                at T0CON : 5
var volatile bit    T0CON_T08BIT              at T0CON : 6
var volatile bit    T0CON_TMR0ON              at T0CON : 7
var volatile bit    T0CON_T0PS0               at T0CON : 0
var volatile bit    T0CON_T0PS1               at T0CON : 1
var volatile bit    T0CON_T0PS2               at T0CON : 2
-- ------------------------------------------------
var volatile word   TMR0                      at { 0xFD6 }
-- ------------------------------------------------
var volatile byte   TMR0L                     at { 0xFD6 }
-- ------------------------------------------------
var volatile byte   TMR0H                     at { 0xFD7 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0xFD8 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_OV                 at STATUS : 3
var volatile bit    STATUS_N                  at STATUS : 4
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile bit    STATUS_OVERFLOW           at STATUS : 3
var volatile bit    STATUS_NEGATIVE           at STATUS : 4
var volatile byte   _status                   at { 0xFD8 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _ov                       =  3
const        byte   _n                        =  4
const        byte   _carry                    =  0
const        byte   _zero                     =  2
const        byte   _overflow                 =  3
const        byte   _negative                 =  4
const        byte   _banked                   =  1
const        byte   _access                   =  0
-- ------------------------------------------------
var volatile word   FSR2                      at { 0xFD9 }
-- ------------------------------------------------
var volatile byte   FSR2L                     at { 0xFD9 }
-- ------------------------------------------------
var volatile byte   FSR2H                     at { 0xFDA }
var volatile bit*4  FSR2H_FSR2H               at FSR2H : 0
-- ------------------------------------------------
var volatile byte   PLUSW2                    at { 0xFDB }
-- ------------------------------------------------
var volatile byte   PREINC2                   at { 0xFDC }
-- ------------------------------------------------
var volatile byte   POSTDEC2                  at { 0xFDD }
-- ------------------------------------------------
var volatile byte   POSTINC2                  at { 0xFDE }
-- ------------------------------------------------
var volatile byte   INDF2                     at { 0xFDF }
-- ------------------------------------------------
var volatile byte   BSR                       at { 0xFE0 }
var volatile bit*4  BSR_BSR                   at BSR : 0
var volatile byte   _bsr                      at { 0xFE0 }
-- ------------------------------------------------
var volatile word   FSR1                      at { 0xFE1 }
var volatile word   _fsr1                     at { 0xFE1 }
-- ------------------------------------------------
var volatile byte   FSR1L                     at { 0xFE1 }
var volatile byte   _fsr1l                    at { 0xFE1 }
-- ------------------------------------------------
var volatile byte   FSR1H                     at { 0xFE2 }
var volatile bit*4  FSR1H_FSR1H               at FSR1H : 0
var volatile byte   _fsr1h                    at { 0xFE2 }
-- ------------------------------------------------
var volatile byte   PLUSW1                    at { 0xFE3 }
-- ------------------------------------------------
var volatile byte   PREINC1                   at { 0xFE4 }
-- ------------------------------------------------
var volatile byte   POSTDEC1                  at { 0xFE5 }
-- ------------------------------------------------
var volatile byte   POSTINC1                  at { 0xFE6 }
-- ------------------------------------------------
var volatile byte   INDF1                     at { 0xFE7 }
-- ------------------------------------------------
var volatile byte   WREG                      at { 0xFE8 }
-- ------------------------------------------------
var volatile word   FSR0                      at { 0xFE9 }
var volatile word   _fsr0                     at { 0xFE9 }
-- ------------------------------------------------
var volatile byte   FSR0L                     at { 0xFE9 }
var volatile byte   _fsr0l                    at { 0xFE9 }
-- ------------------------------------------------
var volatile byte   FSR0H                     at { 0xFEA }
var volatile bit*4  FSR0H_FSR0H               at FSR0H : 0
var volatile byte   _fsr0h                    at { 0xFEA }
-- ------------------------------------------------
var volatile byte   PLUSW0                    at { 0xFEB }
-- ------------------------------------------------
var volatile byte   PREINC0                   at { 0xFEC }
-- ------------------------------------------------
var volatile byte   POSTDEC0                  at { 0xFED }
-- ------------------------------------------------
var volatile byte   POSTINC0                  at { 0xFEE }
-- ------------------------------------------------
var volatile byte   INDF0                     at { 0xFEF }
var volatile byte   _ind                      at { 0xFEF }
-- ------------------------------------------------
var volatile byte   INTCON3                   at { 0xFF0 }
var volatile bit    INTCON3_INT1IF            at INTCON3 : 0
var volatile bit    INTCON3_INT2IF            at INTCON3 : 1
var volatile bit    INTCON3_INT1IE            at INTCON3 : 3
var volatile bit    INTCON3_INT2IE            at INTCON3 : 4
var volatile bit    INTCON3_INT1IP            at INTCON3 : 6
var volatile bit    INTCON3_INT2IP            at INTCON3 : 7
var volatile bit    INTCON3_INT1F             at INTCON3 : 0
var volatile bit    INTCON3_INT2F             at INTCON3 : 1
var volatile bit    INTCON3_INT1E             at INTCON3 : 3
var volatile bit    INTCON3_INT2E             at INTCON3 : 4
var volatile bit    INTCON3_INT1P             at INTCON3 : 6
var volatile bit    INTCON3_INT2P             at INTCON3 : 7
-- ------------------------------------------------
var volatile byte   INTCON2                   at { 0xFF1 }
var volatile bit    INTCON2_RBIP              at INTCON2 : 0
var volatile bit    INTCON2_TMR0IP            at INTCON2 : 2
var volatile bit    INTCON2_INTEDG2           at INTCON2 : 4
var volatile bit    INTCON2_INTEDG1           at INTCON2 : 5
var volatile bit    INTCON2_INTEDG0           at INTCON2 : 6
var volatile bit    INTCON2_NRBPU             at INTCON2 : 7
var volatile bit    INTCON2_T0IP              at INTCON2 : 2
var volatile bit    INTCON2_RBPU              at INTCON2 : 7
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xFF2 }
var volatile bit    INTCON_RBIF               at INTCON : 0
var volatile bit    INTCON_INT0IF             at INTCON : 1
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_INT0IE             at INTCON : 4
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_PEIE_GIEL          at INTCON : 6
var volatile bit    INTCON_GIE_GIEH           at INTCON : 7
var volatile bit    INTCON_INT0F              at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_INT0E              at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_GIEL               at INTCON : 6
var volatile bit    INTCON_GIEH               at INTCON : 7
-- ------------------------------------------------
var volatile word   PROD                      at { 0xFF3 }
-- ------------------------------------------------
var volatile byte   PRODL                     at { 0xFF3 }
-- ------------------------------------------------
var volatile byte   PRODH                     at { 0xFF4 }
-- ------------------------------------------------
var volatile byte   TABLAT                    at { 0xFF5 }
var volatile byte   _tablat                   at { 0xFF5 }
-- ------------------------------------------------
var volatile byte*3 TBLPTR                    at { 0xFF6 }
var volatile byte*3 _tblptr                   at { 0xFF6 }
-- ------------------------------------------------
var volatile byte   TBLPTRL                   at { 0xFF6 }
var volatile byte   _tblptrl                  at { 0xFF6 }
-- ------------------------------------------------
var volatile byte   TBLPTRH                   at { 0xFF7 }
var volatile byte   _tblptrh                  at { 0xFF7 }
-- ------------------------------------------------
var volatile byte   TBLPTRU                   at { 0xFF8 }
var volatile bit*5  TBLPTRU_TBLPTRU           at TBLPTRU : 0
var volatile byte   _tblptru                  at { 0xFF8 }
-- ------------------------------------------------
var volatile byte*3 PCLAT                     at { 0xFF9 }
var volatile byte*3 _pclat                    at { 0xFF9 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0xFF9 }
var volatile byte   _pcl                      at { 0xFF9 }
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xFFA }
var volatile byte   _pclath                   at { 0xFFA }
-- ------------------------------------------------
var volatile byte   PCLATU                    at { 0xFFB }
var volatile bit*5  PCLATU_PCU                at PCLATU : 0
var volatile byte   _pclatu                   at { 0xFFB }
-- ------------------------------------------------
var volatile byte   STKPTR                    at { 0xFFC }
var volatile bit*5  STKPTR_STKPTR             at STKPTR : 0
var volatile bit    STKPTR_STKUNF             at STKPTR : 6
var volatile bit    STKPTR_STKFUL             at STKPTR : 7
var volatile bit    STKPTR_STKPTR0            at STKPTR : 0
var volatile bit    STKPTR_STKPTR1            at STKPTR : 1
var volatile bit    STKPTR_STKPTR2            at STKPTR : 2
var volatile bit    STKPTR_STKPTR3            at STKPTR : 3
var volatile bit    STKPTR_STKPTR4            at STKPTR : 4
var volatile bit    STKPTR_STKOVF             at STKPTR : 7
-- ------------------------------------------------
var volatile byte*3 TOS                       at { 0xFFD }
-- ------------------------------------------------
var volatile byte   TOSL                      at { 0xFFD }
-- ------------------------------------------------
var volatile byte   TOSH                      at { 0xFFE }
-- ------------------------------------------------
var volatile byte   TOSU                      at { 0xFFF }
var volatile bit*5  TOSU_TOSU                 at TOSU : 0
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 3
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000
   ADCON1 = 0b0000_1111
   ADCON2 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CMCON  = 0b0000_0111
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   adc_off()
   comparator_off()
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
const word USB_BDT_ADDRESS  = 0x0400
--
-- Free shared memory: 0x1-0x5F
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG1L (0x300000)
--
pragma fuse_def PLLDIV:0  0x7 {          -- PLL Prescaler Selection bits
       P12 = 0x7                         -- Divide by 12 (48 MHz oscillator input)
       P10 = 0x6                         -- Divide by 10 (40 MHz oscillator input)
       P6 = 0x5                          -- Divide by 6 (24 MHz oscillator input)
       P5 = 0x4                          -- Divide by 5 (20 MHz oscillator input)
       P4 = 0x3                          -- Divide by 4 (16 MHz oscillator input)
       P3 = 0x2                          -- Divide by 3 (12 MHz oscillator input)
       P2 = 0x1                          -- Divide by 2 (8 MHz oscillator input)
       P1 = 0x0                          -- No prescale (4 MHz oscillator input drives PLL directly)
       }
pragma fuse_def CPUDIV:0  0x18 {         -- System Clock Postscaler Selection bits
       P4 = 0x18                         -- [Primary Oscillator Src: /4][96 MHz PLL Src: /6]
       P3 = 0x10                         -- [Primary Oscillator Src: /3][96 MHz PLL Src: /4]
       P2 = 0x8                          -- [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
       P1 = 0x0                          -- [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
       }
pragma fuse_def USBDIV:0  0x20 {         -- USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
       P2 = 0x20                         -- USB clock source comes from the 96 MHz PLL divided by 2
       P1 = 0x0                          -- USB clock source comes directly from the primary oscillator block with no postscale
       }
--
-- CONFIG1H (0x300001)
--
pragma fuse_def OSC:1  0xF {             -- Oscillator Selection bits
       HS_PLL = 0xE                      -- HS oscillator, PLL enabled (HSPLL)
       HS = 0xC                          -- HS oscillator (HS)
       INTOSC_NOCLKOUT_USB_HS = 0xB      -- Internal oscillator, HS oscillator used by USB (INTHS)
       INTOSC_NOCLKOUT_USB_XT = 0xA      -- Internal oscillator, XT used by USB (INTXT)
       INTOSC_CLKOUT_USB_EC = 0x9        -- Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
       INTOSC_NOCLKOUT_USB_EC = 0x8      -- Internal oscillator, port function on RA6, EC used by USB (INTIO)
       EC_CLKOUT_PLL = 0x7               -- EC oscillator, PLL enabled, CLKO function on RA6 (ECPLL)
       EC_NOCLKOUT_PLL = 0x6             -- EC oscillator, PLL enabled, port function on RA6 (ECPIO)
       EC_CLKOUT = 0x5                   -- EC oscillator, CLKO function on RA6 (EC)
       EC_NOCLKOUT = 0x4                 -- EC oscillator, port function on RA6 (ECIO)
       XT_PLL = 0x2                      -- XT oscillator, PLL enabled (XTPLL)
       XT = 0x0                          -- XT oscillator (XT)
       }
pragma fuse_def FCMEN:1  0x40 {          -- Fail-Safe Clock Monitor Enable bit
       ENABLED = 0x40                    -- Fail-Safe Clock Monitor enabled
       DISABLED = 0x0                    -- Fail-Safe Clock Monitor disabled
       }
pragma fuse_def IESO:1  0x80 {           -- Internal/External Oscillator Switchover bit
       ENABLED = 0x80                    -- Oscillator Switchover mode enabled
       DISABLED = 0x0                    -- Oscillator Switchover mode disabled
       }
--
-- CONFIG2L (0x300002)
--
pragma fuse_def PWRTE:2  0x1 {           -- Power-up Timer Enable bit
       DISABLED = 0x1                    -- PWRT disabled
       ENABLED = 0x0                     -- PWRT enabled
       }
pragma fuse_def BROWNOUT:2  0x6 {        -- Brown-out Reset Enable bits
       ENABLED = 0x6                     -- Brown-out Reset enabled in hardware only (SBOREN is disabled)
       RUNONLY = 0x4                     -- Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)
       CONTROL = 0x2                     -- Brown-out Reset enabled and controlled by software (SBOREN is enabled)
       DISABLED = 0x0                    -- Brown-out Reset disabled in hardware and software
       }
pragma fuse_def VOLTAGE:2  0x18 {        -- Brown-out Reset Voltage bits
       MINIMUM = 0x18                    -- Minimum setting
       MEDIUM2 = 0x10                    -- 
       MEDIUM1 = 0x8                     -- 
       MAXIMUM = 0x0                     -- Maximum setting
       }
pragma fuse_def VREGEN:2  0x20 {         -- USB Voltage Regulator Enable bit
       ENABLED = 0x20                    -- USB voltage regulator enabled
       DISABLED = 0x0                    -- USB voltage regulator disabled
       }
--
-- CONFIG2H (0x300003)
--
pragma fuse_def WDT:3  0x1 {             -- Watchdog Timer Enable bit
       ENABLED = 0x1                     -- WDT enabled
       CONTROL = 0x0                     -- WDT disabled (control is placed on the SWDTEN bit)
       }
pragma fuse_def WDTPS:3  0x1E {          -- Watchdog Timer Postscale Select bits
       P32K = 0x1E                       -- 1:32768
       P16K = 0x1C                       -- 1:16384
       P8K = 0x1A                        -- 1:8192
       P4K = 0x18                        -- 1:4096
       P2K = 0x16                        -- 1:2048
       P1K = 0x14                        -- 1:1024
       P512  = 0x12                      -- 1:512
       P256  = 0x10                      -- 1:256
       P128  = 0xE                       -- 1:128
       P64  = 0xC                        -- 1:64
       P32  = 0xA                        -- 1:32
       P16  = 0x8                        -- 1:16
       P8  = 0x6                         -- 1:8
       P4  = 0x4                         -- 1:4
       P2  = 0x2                         -- 1:2
       P1  = 0x0                         -- 1:1
       }
--
-- CONFIG3H (0x300005)
--
pragma fuse_def CCP2MUX:5  0x1 {         -- CCP2 MUX bit
       pin_C1 = 0x1                      -- CCP2 input/output is multiplexed with RC1
       pin_B3 = 0x0                      -- CCP2 input/output is multiplexed with RB3
       }
pragma fuse_def PBADEN:5  0x2 {          -- PORTB A/D Enable bit
       ANALOG = 0x2                      -- PORTB<4:0> pins are configured as analog input channels on Reset
       DIGITAL = 0x0                     -- PORTB<4:0> pins are configured as digital I/O on Reset
       }
pragma fuse_def LPT1OSC:5  0x4 {         -- Low-Power Timer 1 Oscillator Enable bit
       LOW_POWER = 0x4                   -- Timer1 configured for low-power operation
       HIGH_POWER = 0x0                  -- Timer1 configured for higher power operation
       }
pragma fuse_def MCLR:5  0x80 {           -- MCLR Pin Enable bit
       EXTERNAL = 0x80                   -- MCLR pin enabled; RE3 input pin disabled
       INTERNAL = 0x0                    -- RE3 input pin enabled; MCLR pin disabled
       }
--
-- CONFIG4L (0x300006)
--
pragma fuse_def STVR:6  0x1 {            -- Stack Full/Underflow Reset Enable bit
       ENABLED = 0x1                     -- Stack full/underflow will cause Reset
       DISABLED = 0x0                    -- Stack full/underflow will not cause Reset
       }
pragma fuse_def LVP:6  0x4 {             -- Single-Supply ICSP Enable bit
       ENABLED = 0x4                     -- Single-Supply ICSP enabled
       DISABLED = 0x0                    -- Single-Supply ICSP disabled
       }
pragma fuse_def ICPRT:6  0x20 {          -- Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
       ENABLED = 0x20                    -- ICPORT enabled
       DISABLED = 0x0                    -- ICPORT disabled
       }
pragma fuse_def XINST:6  0x40 {          -- Extended Instruction Set Enable bit
--     ENABLED = 0x40                    -- NOTE: not supported by JALV2
       DISABLED = 0x0                    -- Instruction set extension and Indexed Addressing mode disabled (Legacy mode)
       }
pragma fuse_def DEBUG:6  0x80 {          -- Background Debugger Enable bit
       DISABLED = 0x80                   -- Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins
       ENABLED = 0x0                     -- Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug
       }
--
-- CONFIG5L (0x300008)
--
pragma fuse_def CP0:8  0x1 {             -- Code Protection bit
       DISABLED = 0x1                    -- Block 0 (000800-001FFFh) is not code-protected
       ENABLED = 0x0                     -- Block 0 (000800-001FFFh) is code-protected
       }
pragma fuse_def CP1:8  0x2 {             -- Code Protection bit
       DISABLED = 0x2                    -- Block 1 (002000-003FFFh) is not code-protected
       ENABLED = 0x0                     -- Block 1 (002000-003FFFh) is code-protected
       }
pragma fuse_def CP2:8  0x4 {             -- Code Protection bit
       DISABLED = 0x4                    -- Block 2 (004000-005FFFh) is not code-protected
       ENABLED = 0x0                     -- Block 2 (004000-005FFFh) is code-protected
       }
pragma fuse_def CP3:8  0x8 {             -- Code Protection bit
       DISABLED = 0x8                    -- Block 3 (006000-007FFFh) is not code-protected
       ENABLED = 0x0                     -- Block 3 (006000-007FFFh) is code-protected
       }
--
-- CONFIG5H (0x300009)
--
pragma fuse_def CPB:9  0x40 {            -- Boot Block Code Protection bit
       DISABLED = 0x40                   -- Boot block (000000-0007FFh) is not code-protected
       ENABLED = 0x0                     -- Boot block (000000-0007FFh) is code-protected
       }
pragma fuse_def CPD:9  0x80 {            -- Data EEPROM Code Protection bit
       DISABLED = 0x80                   -- Data EEPROM is not code-protected
       ENABLED = 0x0                     -- Data EEPROM is code-protected
       }
--
-- CONFIG6L (0x30000A)
--
pragma fuse_def WRT0:10  0x1 {           -- Write Protection bit
       DISABLED = 0x1                    -- Block 0 (000800-001FFFh) is not write-protected
       ENABLED = 0x0                     -- Block 0 (000800-001FFFh) is write-protected
       }
pragma fuse_def WRT1:10  0x2 {           -- Write Protection bit
       DISABLED = 0x2                    -- Block 1 (002000-003FFFh) is not write-protected
       ENABLED = 0x0                     -- Block 1 (002000-003FFFh) is write-protected
       }
pragma fuse_def WRT2:10  0x4 {           -- Write Protection bit
       DISABLED = 0x4                    -- Block 2 (004000-005FFFh) is not write-protected
       ENABLED = 0x0                     -- Block 2 (004000-005FFFh) is write-protected
       }
pragma fuse_def WRT3:10  0x8 {           -- Write Protection bit
       DISABLED = 0x8                    -- Block 3 (006000-007FFFh) is not write-protected
       ENABLED = 0x0                     -- Block 3 (006000-007FFFh) is write-protected
       }
--
-- CONFIG6H (0x30000B)
--
pragma fuse_def WRTC:11  0x20 {          -- Configuration Register Write Protection bit
       DISABLED = 0x20                   -- Configuration registers (300000-3000FFh) are not write-protected
       ENABLED = 0x0                     -- Configuration registers (300000-3000FFh) are write-protected
       }
pragma fuse_def WRTB:11  0x40 {          -- Boot Block Write Protection bit
       DISABLED = 0x40                   -- Boot block (000000-0007FFh) is not write-protected
       ENABLED = 0x0                     -- Boot block (000000-0007FFh) is write-protected
       }
pragma fuse_def WRTD:11  0x80 {          -- Data EEPROM Write Protection bit
       DISABLED = 0x80                   -- Data EEPROM is not write-protected
       ENABLED = 0x0                     -- Data EEPROM is write-protected
       }
--
-- CONFIG7L (0x30000C)
--
pragma fuse_def EBTR0:12  0x1 {          -- Table Read Protection bit
       DISABLED = 0x1                    -- Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 0 (000800-001FFFh) is protected from table reads executed in other blocks
       }
pragma fuse_def EBTR1:12  0x2 {          -- Table Read Protection bit
       DISABLED = 0x2                    -- Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 1 (002000-003FFFh) is protected from table reads executed in other blocks
       }
pragma fuse_def EBTR2:12  0x4 {          -- Table Read Protection bit
       DISABLED = 0x4                    -- Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 2 (004000-005FFFh) is protected from table reads executed in other blocks
       }
pragma fuse_def EBTR3:12  0x8 {          -- Table Read Protection bit
       DISABLED = 0x8                    -- Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 3 (006000-007FFFh) is protected from table reads executed in other blocks
       }
--
-- CONFIG7H (0x30000D)
--
pragma fuse_def EBTRB:13  0x40 {         -- Boot Block Table Read Protection bit
       DISABLED = 0x40                   -- Boot block (000000-0007FFh) is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Boot block (000000-0007FFh) is protected from table reads executed in other blocks
       }
--

-- ------------------------------------------------
-- Title: JalV2 device include file for 18lf2431
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic18lf2431, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures to force the use of the LATx register
--      for output when PORTx or pin_xy is addressed.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC18LF2431.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Fri Mar  7 10:07:22 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x08C0            -- ID for PIC programmer
const  word  CHIP_ID     = 0xA209            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "18LF2431"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_16       -- (banks=16)
pragma  target  chip     18LF2431
pragma  target  bank     0x0100
pragma  stack            31
pragma  code             16384
pragma  eeprom           0xF00000,256
pragma  ID               0x200000,8
pragma  data             0x0-0x2FF
pragma  shared           0x0-0x5F,0xF60-0xFFF
--
var volatile byte _pic_accum at 0x0      -- (compiler)
--
const word   _FUSES_CT             = 14
const byte*3 _FUSE_BASE[_FUSES_CT] = {
                                       0x300000,
                                       0x300001,
                                       0x300002,
                                       0x300003,
                                       0x300004,
                                       0x300005,
                                       0x300006,
                                       0x300007,
                                       0x300008,
                                       0x300009,
                                       0x30000A,
                                       0x30000B,
                                       0x30000C,
                                       0x30000D 
                                     }
const byte   _FUSES[_FUSES_CT]     = {
                                       0xFF,     -- RESERVED
                                       0xCF,     -- CONFIG1H
                                       0x0F,     -- CONFIG2L
                                       0x3F,     -- CONFIG2H
                                       0x3C,     -- CONFIG3L
                                       0x9D,     -- CONFIG3H
                                       0x85,     -- CONFIG4L
                                       0xFF,     -- RESERVED
                                       0x0F,     -- CONFIG5L
                                       0xC0,     -- CONFIG5H
                                       0x0F,     -- CONFIG6L
                                       0xE0,     -- CONFIG6H
                                       0x0F,     -- CONFIG7L
                                       0x40      -- CONFIG7H
                                     }
--
-- ------------------------------------------------
var volatile byte   DFLTCON                   at { 0xF60 }
var volatile bit*3  DFLTCON_FLTCK             at DFLTCON : 0
var volatile bit    DFLTCON_FLT1EN            at DFLTCON : 3
var volatile bit    DFLTCON_FLT2EN            at DFLTCON : 4
var volatile bit    DFLTCON_FLT3EN            at DFLTCON : 5
var volatile bit    DFLTCON_FLT4EN            at DFLTCON : 6
var volatile bit    DFLTCON_FLTCK0            at DFLTCON : 0
var volatile bit    DFLTCON_FLTCK1            at DFLTCON : 1
var volatile bit    DFLTCON_FLTCK2            at DFLTCON : 2
-- ------------------------------------------------
var volatile byte   CAP3CON                   at { 0xF61 }
var volatile bit*4  CAP3CON_CAP3M             at CAP3CON : 0
var volatile bit    CAP3CON_CAP3TMR           at CAP3CON : 5
var volatile bit    CAP3CON_CAP3REN           at CAP3CON : 6
var volatile bit    CAP3CON_CAP3M0            at CAP3CON : 0
var volatile bit    CAP3CON_CAP3M1            at CAP3CON : 1
var volatile bit    CAP3CON_CAP3M2            at CAP3CON : 2
var volatile bit    CAP3CON_CAP3M3            at CAP3CON : 3
-- ------------------------------------------------
var volatile byte   CAP2CON                   at { 0xF62 }
var volatile bit*4  CAP2CON_CAP2M             at CAP2CON : 0
var volatile bit    CAP2CON_CAP2TMR           at CAP2CON : 5
var volatile bit    CAP2CON_CAP2REN           at CAP2CON : 6
var volatile bit    CAP2CON_CAP2M0            at CAP2CON : 0
var volatile bit    CAP2CON_CAP2M1            at CAP2CON : 1
var volatile bit    CAP2CON_CAP2M2            at CAP2CON : 2
var volatile bit    CAP2CON_CAP2M3            at CAP2CON : 3
-- ------------------------------------------------
var volatile byte   CAP1CON                   at { 0xF63 }
var volatile bit*4  CAP1CON_CAP1M             at CAP1CON : 0
var volatile bit    CAP1CON_CAP1TMR           at CAP1CON : 5
var volatile bit    CAP1CON_CAP1REN           at CAP1CON : 6
var volatile bit    CAP1CON_CAP1M0            at CAP1CON : 0
var volatile bit    CAP1CON_CAP1M1            at CAP1CON : 1
var volatile bit    CAP1CON_CAP1M2            at CAP1CON : 2
var volatile bit    CAP1CON_CAP1M3            at CAP1CON : 3
-- ------------------------------------------------
var volatile byte   CAP3BUFL                  at { 0xF64 }
-- ------------------------------------------------
var volatile byte   CAP3BUFH                  at { 0xF65 }
-- ------------------------------------------------
var volatile byte   CAP2BUFL                  at { 0xF66 }
-- ------------------------------------------------
var volatile byte   CAP2BUFH                  at { 0xF67 }
-- ------------------------------------------------
var volatile byte   CAP1BUFL                  at { 0xF68 }
-- ------------------------------------------------
var volatile byte   CAP1BUFH                  at { 0xF69 }
-- ------------------------------------------------
var volatile byte   OVDCONS                   at { 0xF6A }
var volatile bit    OVDCONS_POUT0             at OVDCONS : 0
var volatile bit    OVDCONS_POUT1             at OVDCONS : 1
var volatile bit    OVDCONS_POUT2             at OVDCONS : 2
var volatile bit    OVDCONS_POUT3             at OVDCONS : 3
var volatile bit    OVDCONS_POUT4             at OVDCONS : 4
var volatile bit    OVDCONS_POUT5             at OVDCONS : 5
var volatile bit    OVDCONS_POUT6             at OVDCONS : 6
var volatile bit    OVDCONS_POUT7             at OVDCONS : 7
-- ------------------------------------------------
var volatile byte   OVDCOND                   at { 0xF6B }
var volatile bit    OVDCOND_POVD0             at OVDCOND : 0
var volatile bit    OVDCOND_POVD1             at OVDCOND : 1
var volatile bit    OVDCOND_POVD2             at OVDCOND : 2
var volatile bit    OVDCOND_POVD3             at OVDCOND : 3
var volatile bit    OVDCOND_POVD4             at OVDCOND : 4
var volatile bit    OVDCOND_POVD5             at OVDCOND : 5
var volatile bit    OVDCOND_POVD6             at OVDCOND : 6
var volatile bit    OVDCOND_POVD7             at OVDCOND : 7
-- ------------------------------------------------
var volatile byte   FLTCONFIG                 at { 0xF6C }
var volatile bit    FLTCONFIG_FLTAEN          at FLTCONFIG : 0
var volatile bit    FLTCONFIG_FLTAMOD         at FLTCONFIG : 1
var volatile bit    FLTCONFIG_FLTAS           at FLTCONFIG : 2
var volatile bit    FLTCONFIG_FLTCON          at FLTCONFIG : 3
var volatile bit    FLTCONFIG_FLTBEN          at FLTCONFIG : 4
var volatile bit    FLTCONFIG_FLTBMOD         at FLTCONFIG : 5
var volatile bit    FLTCONFIG_FLTBS           at FLTCONFIG : 6
var volatile bit    FLTCONFIG_BRFEN           at FLTCONFIG : 7
-- ------------------------------------------------
var volatile byte   DTCON                     at { 0xF6D }
var volatile bit*6  DTCON_DTA                 at DTCON : 0
var volatile bit*2  DTCON_DTAPS               at DTCON : 6
var volatile bit    DTCON_DT0                 at DTCON : 0
var volatile bit    DTCON_DT1                 at DTCON : 1
var volatile bit    DTCON_DT2                 at DTCON : 2
var volatile bit    DTCON_DT3                 at DTCON : 3
var volatile bit    DTCON_DT4                 at DTCON : 4
var volatile bit    DTCON_DT5                 at DTCON : 5
var volatile bit    DTCON_DTPS0               at DTCON : 6
var volatile bit    DTCON_DTPS1               at DTCON : 7
var volatile bit    DTCON_DTA0                at DTCON : 0
var volatile bit    DTCON_DTA1                at DTCON : 1
var volatile bit    DTCON_DTA2                at DTCON : 2
var volatile bit    DTCON_DTA3                at DTCON : 3
var volatile bit    DTCON_DTA4                at DTCON : 4
var volatile bit    DTCON_DTA5                at DTCON : 5
var volatile bit    DTCON_DTAPS0              at DTCON : 6
var volatile bit    DTCON_DTAPS1              at DTCON : 7
-- ------------------------------------------------
var volatile byte   PWMCON1                   at { 0xF6E }
var volatile bit    PWMCON1_OSYNC             at PWMCON1 : 0
var volatile bit    PWMCON1_UDIS              at PWMCON1 : 1
var volatile bit    PWMCON1_SEVTDIR           at PWMCON1 : 3
var volatile bit*4  PWMCON1_SEVOPS            at PWMCON1 : 4
var volatile bit    PWMCON1_SEVOPS0           at PWMCON1 : 4
var volatile bit    PWMCON1_SEVOPS1           at PWMCON1 : 5
var volatile bit    PWMCON1_SEVOPS2           at PWMCON1 : 6
var volatile bit    PWMCON1_SEVOPS3           at PWMCON1 : 7
-- ------------------------------------------------
var volatile byte   PWMCON0                   at { 0xF6F }
var volatile bit*4  PWMCON0_PMOD              at PWMCON0 : 0
var volatile bit*3  PWMCON0_PWMEN             at PWMCON0 : 4
var volatile bit    PWMCON0_PMOD0             at PWMCON0 : 0
var volatile bit    PWMCON0_PMOD1             at PWMCON0 : 1
var volatile bit    PWMCON0_PMOD2             at PWMCON0 : 2
var volatile bit    PWMCON0_PMOD3             at PWMCON0 : 3
var volatile bit    PWMCON0_PWMEN0            at PWMCON0 : 4
var volatile bit    PWMCON0_PWMEN1            at PWMCON0 : 5
var volatile bit    PWMCON0_PWMEN2            at PWMCON0 : 6
-- ------------------------------------------------
var volatile byte   SEVTCMPH                  at { 0xF70 }
var volatile bit*4  SEVTCMPH_SEVTCMPH         at SEVTCMPH : 0
-- ------------------------------------------------
var volatile byte   SEVTCMPL                  at { 0xF71 }
-- ------------------------------------------------
var volatile byte   PDC2H                     at { 0xF74 }
var volatile bit*6  PDC2H_PDC2H               at PDC2H : 0
-- ------------------------------------------------
var volatile byte   PDC2L                     at { 0xF75 }
-- ------------------------------------------------
var volatile byte   PDC1H                     at { 0xF76 }
var volatile bit*6  PDC1H_PDC1H               at PDC1H : 0
-- ------------------------------------------------
var volatile byte   PDC1L                     at { 0xF77 }
-- ------------------------------------------------
var volatile byte   PDC0H                     at { 0xF78 }
var volatile bit*6  PDC0H_PDC0H               at PDC0H : 0
-- ------------------------------------------------
var volatile byte   PDC0L                     at { 0xF79 }
-- ------------------------------------------------
var volatile byte   PTPERH                    at { 0xF7A }
var volatile bit*4  PTPERH_PTPERH             at PTPERH : 0
-- ------------------------------------------------
var volatile byte   PTPERL                    at { 0xF7B }
-- ------------------------------------------------
var volatile byte   PTMRH                     at { 0xF7C }
var volatile bit*4  PTMRH_PTMRH               at PTMRH : 0
-- ------------------------------------------------
var volatile byte   PTMRL                     at { 0xF7D }
-- ------------------------------------------------
var volatile byte   PTCON1                    at { 0xF7E }
var volatile bit    PTCON1_PTDIR              at PTCON1 : 6
var volatile bit    PTCON1_PTEN               at PTCON1 : 7
-- ------------------------------------------------
var volatile byte   PTCON0                    at { 0xF7F }
var volatile bit*2  PTCON0_PTMOD              at PTCON0 : 0
var volatile bit*2  PTCON0_PTCKPS             at PTCON0 : 2
var volatile bit*4  PTCON0_PTOPS              at PTCON0 : 4
var volatile bit    PTCON0_PTMOD0             at PTCON0 : 0
var volatile bit    PTCON0_PTMOD1             at PTCON0 : 1
var volatile bit    PTCON0_PTCKPS0            at PTCON0 : 2
var volatile bit    PTCON0_PTCKPS1            at PTCON0 : 3
var volatile bit    PTCON0_PTOPS0             at PTCON0 : 4
var volatile bit    PTCON0_PTOPS1             at PTCON0 : 5
var volatile bit    PTCON0_PTOPS2             at PTCON0 : 6
var volatile bit    PTCON0_PTOPS3             at PTCON0 : 7
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0xF80 }
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    PORTA_RA6                 at PORTA : 6
var volatile bit    PORTA_RA7                 at PORTA : 7
var volatile bit    PORTA_AN0                 at PORTA : 0
var volatile bit    PORTA_AN1                 at PORTA : 1
var volatile bit    PORTA_AN2                 at PORTA : 2
var volatile bit    PORTA_AN3                 at PORTA : 3
var volatile bit    PORTA_AN4                 at PORTA : 4
var volatile bit    PORTA_OSC2                at PORTA : 6
var volatile bit    PORTA_OSC1                at PORTA : 7
var volatile bit    PORTA_VREFM               at PORTA : 2
var volatile bit    PORTA_VREFP               at PORTA : 3
var volatile bit    PORTA_CLKO                at PORTA : 6
var volatile bit    PORTA_CLKI                at PORTA : 7
var volatile bit    PORTA_ULPWUIN             at PORTA : 0
var volatile bit    PORTA_RJPU                at PORTA : 7
-- ------------------------------------------------
var volatile byte   PORTB                     at { 0xF81 }
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    PORTB_CCP2_PA2            at PORTB : 3
-- ------------------------------------------------
var volatile byte   PORTC                     at { 0xF82 }
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    PORTC_RC2                 at PORTC : 2
var volatile bit    PORTC_RC3                 at PORTC : 3
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    PORTC_RC6                 at PORTC : 6
var volatile bit    PORTC_RC7                 at PORTC : 7
var volatile bit    PORTC_T1OSO               at PORTC : 0
var volatile bit    PORTC_T1OSI               at PORTC : 1
var volatile bit    PORTC_CCP1                at PORTC : 2
var volatile bit    PORTC_INT0                at PORTC : 3
var volatile bit    PORTC_INT1                at PORTC : 4
var volatile bit    PORTC_INT2                at PORTC : 5
var volatile bit    PORTC_TX                  at PORTC : 6
var volatile bit    PORTC_RX                  at PORTC : 7
var volatile bit    PORTC_T13CKI              at PORTC : 0
var volatile bit    PORTC_CCP2                at PORTC : 1
var volatile bit    PORTC_T0CKI               at PORTC : 3
var volatile bit    PORTC_SDA                 at PORTC : 4
var volatile bit    PORTC_SCK                 at PORTC : 5
var volatile bit    PORTC_CK                  at PORTC : 6
var volatile bit    PORTC_DT                  at PORTC : 7
var volatile bit    PORTC_NFLTA               at PORTC : 1
var volatile bit    PORTC_NFLTB               at PORTC : 2
var volatile bit    PORTC_T5CKI               at PORTC : 3
var volatile bit    PORTC_SDI                 at PORTC : 4
var volatile bit    PORTC_SCL                 at PORTC : 5
var volatile bit    PORTC_NSS                 at PORTC : 6
var volatile bit    PORTC_SDO                 at PORTC : 7
var volatile bit    PORTC_FLTA                at PORTC : 1
var volatile bit    PORTC_FLTB                at PORTC : 2
var volatile bit    PORTC_SS                  at PORTC : 6
var volatile bit    PORTC_PA2                 at PORTC : 1
var volatile bit    PORTC_PA1                 at PORTC : 2
-- ------------------------------------------------
var volatile byte   PORTE                     at { 0xF84 }
var volatile bit    PORTE_RE3                 at PORTE : 3
var volatile bit    pin_E3                    at PORTE : 3
var volatile bit    PORTE_MCLR                at PORTE : 3
var volatile bit    PORTE_CCP9E               at PORTE : 3
var volatile bit    PORTE_PC3E                at PORTE : 3
-- ------------------------------------------------
var volatile word   TMR5                      at { 0xF87 }
-- ------------------------------------------------
var volatile byte   TMR5L                     at { 0xF87 }
-- ------------------------------------------------
var volatile byte   TMR5H                     at { 0xF88 }
-- ------------------------------------------------
var volatile byte   LATA                      at { 0xF89 }
--
procedure PORTA'put(byte in x at LATA) is
   pragma inline
end procedure
--
procedure PORTA_low'put(byte in x) is
   LATA = (LATA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   LATA = (LATA & 0x0F) | (x << 4)
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    LATA_LATA0                at LATA : 0
var volatile bit    pin_A0                    at PORTA : 0
alias               pin_AN0                   is pin_A0
--
procedure pin_A0'put(bit in x at LATA : 0) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA1                at LATA : 1
var volatile bit    pin_A1                    at PORTA : 1
alias               pin_AN1                   is pin_A1
--
procedure pin_A1'put(bit in x at LATA : 1) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA2                at LATA : 2
var volatile bit    pin_A2                    at PORTA : 2
alias               pin_AN2                   is pin_A2
alias               pin_VREF_NEG              is pin_A2
alias               pin_CAP1                  is pin_A2
alias               pin_INDX                  is pin_A2
--
procedure pin_A2'put(bit in x at LATA : 2) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA3                at LATA : 3
var volatile bit    pin_A3                    at PORTA : 3
alias               pin_AN3                   is pin_A3
alias               pin_VREF_POS              is pin_A3
alias               pin_CAP2                  is pin_A3
alias               pin_QEA                   is pin_A3
--
procedure pin_A3'put(bit in x at LATA : 3) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA4                at LATA : 4
var volatile bit    pin_A4                    at PORTA : 4
alias               pin_AN4                   is pin_A4
alias               pin_CAP3                  is pin_A4
alias               pin_QEB                   is pin_A4
--
procedure pin_A4'put(bit in x at LATA : 4) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA6                at LATA : 6
var volatile bit    pin_A6                    at PORTA : 6
alias               pin_OSC2                  is pin_A6
alias               pin_CLKO                  is pin_A6
--
procedure pin_A6'put(bit in x at LATA : 6) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA7                at LATA : 7
var volatile bit    pin_A7                    at PORTA : 7
alias               pin_OSC1                  is pin_A7
alias               pin_CLKI                  is pin_A7
--
procedure pin_A7'put(bit in x at LATA : 7) is
   pragma inline
end procedure
--
var volatile bit    LATA_LA0                  at LATA : 0
var volatile bit    LATA_LA1                  at LATA : 1
var volatile bit    LATA_LA2                  at LATA : 2
var volatile bit    LATA_LA3                  at LATA : 3
var volatile bit    LATA_LA4                  at LATA : 4
var volatile bit    LATA_LA6                  at LATA : 6
var volatile bit    LATA_LA7                  at LATA : 7
-- ------------------------------------------------
var volatile byte   LATB                      at { 0xF8A }
--
procedure PORTB'put(byte in x at LATB) is
   pragma inline
end procedure
--
procedure PORTB_low'put(byte in x) is
   LATB = (LATB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   LATB = (LATB & 0x0F) | (x << 4)
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    LATB_LATB0                at LATB : 0
var volatile bit    pin_B0                    at PORTB : 0
alias               pin_PWM0                  is pin_B0
--
procedure pin_B0'put(bit in x at LATB : 0) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB1                at LATB : 1
var volatile bit    pin_B1                    at PORTB : 1
alias               pin_PWM1                  is pin_B1
--
procedure pin_B1'put(bit in x at LATB : 1) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB2                at LATB : 2
var volatile bit    pin_B2                    at PORTB : 2
alias               pin_PWM2                  is pin_B2
--
procedure pin_B2'put(bit in x at LATB : 2) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB3                at LATB : 3
var volatile bit    pin_B3                    at PORTB : 3
alias               pin_PWM3                  is pin_B3
--
procedure pin_B3'put(bit in x at LATB : 3) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB4                at LATB : 4
var volatile bit    pin_B4                    at PORTB : 4
alias               pin_KBI0                  is pin_B4
alias               pin_PWM5                  is pin_B4
--
procedure pin_B4'put(bit in x at LATB : 4) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB5                at LATB : 5
var volatile bit    pin_B5                    at PORTB : 5
alias               pin_KBI1                  is pin_B5
alias               pin_PWM4                  is pin_B5
alias               pin_PGM                   is pin_B5
--
procedure pin_B5'put(bit in x at LATB : 5) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB6                at LATB : 6
var volatile bit    pin_B6                    at PORTB : 6
alias               pin_KBI2                  is pin_B6
--
procedure pin_B6'put(bit in x at LATB : 6) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB7                at LATB : 7
var volatile bit    pin_B7                    at PORTB : 7
alias               pin_KBI3                  is pin_B7
--
procedure pin_B7'put(bit in x at LATB : 7) is
   pragma inline
end procedure
--
var volatile bit    LATB_LB0                  at LATB : 0
var volatile bit    LATB_LB1                  at LATB : 1
var volatile bit    LATB_LB2                  at LATB : 2
var volatile bit    LATB_LB3                  at LATB : 3
var volatile bit    LATB_LB4                  at LATB : 4
var volatile bit    LATB_LB5                  at LATB : 5
var volatile bit    LATB_LB6                  at LATB : 6
var volatile bit    LATB_LB7                  at LATB : 7
-- ------------------------------------------------
var volatile byte   LATC                      at { 0xF8B }
--
procedure PORTC'put(byte in x at LATC) is
   pragma inline
end procedure
--
procedure PORTC_low'put(byte in x) is
   LATC = (LATC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   LATC = (LATC & 0x0F) | (x << 4)
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    LATC_LATC0                at LATC : 0
var volatile bit    pin_C0                    at PORTC : 0
alias               pin_T1OSO                 is pin_C0
alias               pin_T1CKI                 is pin_C0
--
procedure pin_C0'put(bit in x at LATC : 0) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC1                at LATC : 1
var volatile bit    pin_C1                    at PORTC : 1
alias               pin_T1OSI                 is pin_C1
alias               pin_CCP2                  is pin_C1
alias               pin_FLTA                  is pin_C1
--
procedure pin_C1'put(bit in x at LATC : 1) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC2                at LATC : 2
var volatile bit    pin_C2                    at PORTC : 2
alias               pin_CCP1                  is pin_C2
alias               pin_FLTB                  is pin_C2
--
procedure pin_C2'put(bit in x at LATC : 2) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC3                at LATC : 3
var volatile bit    pin_C3                    at PORTC : 3
alias               pin_T0CKI                 is pin_C3
alias               pin_T5CKI                 is pin_C3
--
procedure pin_C3'put(bit in x at LATC : 3) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC4                at LATC : 4
var volatile bit    pin_C4                    at PORTC : 4
alias               pin_SDI                   is pin_C4
alias               pin_SDA                   is pin_C4
--
procedure pin_C4'put(bit in x at LATC : 4) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC5                at LATC : 5
var volatile bit    pin_C5                    at PORTC : 5
alias               pin_SCK                   is pin_C5
alias               pin_SCL                   is pin_C5
--
procedure pin_C5'put(bit in x at LATC : 5) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC6                at LATC : 6
var volatile bit    pin_C6                    at PORTC : 6
alias               pin_TX                    is pin_C6
alias               pin_CK                    is pin_C6
alias               pin_SS                    is pin_C6
--
procedure pin_C6'put(bit in x at LATC : 6) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC7                at LATC : 7
var volatile bit    pin_C7                    at PORTC : 7
alias               pin_RX                    is pin_C7
alias               pin_DT                    is pin_C7
alias               pin_SDO                   is pin_C7
--
procedure pin_C7'put(bit in x at LATC : 7) is
   pragma inline
end procedure
--
var volatile bit    LATC_LC0                  at LATC : 0
var volatile bit    LATC_LC1                  at LATC : 1
var volatile bit    LATC_LC2                  at LATC : 2
var volatile bit    LATC_LC3                  at LATC : 3
var volatile bit    LATC_LC4                  at LATC : 4
var volatile bit    LATC_LC5                  at LATC : 5
var volatile bit    LATC_LC6                  at LATC : 6
var volatile bit    LATC_LC7                  at LATC : 7
-- ------------------------------------------------
var volatile word   PR5                       at { 0xF90 }
-- ------------------------------------------------
var volatile byte   PR5L                      at { 0xF90 }
-- ------------------------------------------------
var volatile byte   PR5H                      at { 0xF91 }
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0xF92 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_AN0_direction         is pin_A0_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_AN1_direction         is pin_A1_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_AN2_direction         is pin_A2_direction
alias               pin_VREF_NEG_direction    is pin_A2_direction
alias               pin_CAP1_direction        is pin_A2_direction
alias               pin_INDX_direction        is pin_A2_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_AN3_direction         is pin_A3_direction
alias               pin_VREF_POS_direction    is pin_A3_direction
alias               pin_CAP2_direction        is pin_A3_direction
alias               pin_QEA_direction         is pin_A3_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_AN4_direction         is pin_A4_direction
alias               pin_CAP3_direction        is pin_A4_direction
alias               pin_QEB_direction         is pin_A4_direction
--
var volatile bit    TRISA_TRISA6              at TRISA : 6
var volatile bit    pin_A6_direction          at TRISA : 6
alias               pin_OSC2_direction        is pin_A6_direction
alias               pin_CLKO_direction        is pin_A6_direction
--
var volatile bit    TRISA_TRISA7              at TRISA : 7
var volatile bit    pin_A7_direction          at TRISA : 7
alias               pin_OSC1_direction        is pin_A7_direction
alias               pin_CLKI_direction        is pin_A7_direction
--
var volatile bit    TRISA_RA0                 at TRISA : 0
var volatile bit    TRISA_RA1                 at TRISA : 1
var volatile bit    TRISA_RA2                 at TRISA : 2
var volatile bit    TRISA_RA3                 at TRISA : 3
var volatile bit    TRISA_RA4                 at TRISA : 4
var volatile bit    TRISA_RA6                 at TRISA : 6
var volatile bit    TRISA_RA7                 at TRISA : 7
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0xF93 }
alias               PORTB_direction           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB0              at TRISB : 0
var volatile bit    pin_B0_direction          at TRISB : 0
alias               pin_PWM0_direction        is pin_B0_direction
--
var volatile bit    TRISB_TRISB1              at TRISB : 1
var volatile bit    pin_B1_direction          at TRISB : 1
alias               pin_PWM1_direction        is pin_B1_direction
--
var volatile bit    TRISB_TRISB2              at TRISB : 2
var volatile bit    pin_B2_direction          at TRISB : 2
alias               pin_PWM2_direction        is pin_B2_direction
--
var volatile bit    TRISB_TRISB3              at TRISB : 3
var volatile bit    pin_B3_direction          at TRISB : 3
alias               pin_PWM3_direction        is pin_B3_direction
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
var volatile bit    pin_B4_direction          at TRISB : 4
alias               pin_KBI0_direction        is pin_B4_direction
alias               pin_PWM5_direction        is pin_B4_direction
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
var volatile bit    pin_B5_direction          at TRISB : 5
alias               pin_KBI1_direction        is pin_B5_direction
alias               pin_PWM4_direction        is pin_B5_direction
alias               pin_PGM_direction         is pin_B5_direction
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
var volatile bit    pin_B6_direction          at TRISB : 6
alias               pin_KBI2_direction        is pin_B6_direction
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
var volatile bit    pin_B7_direction          at TRISB : 7
alias               pin_KBI3_direction        is pin_B7_direction
--
var volatile bit    TRISB_RB0                 at TRISB : 0
var volatile bit    TRISB_RB1                 at TRISB : 1
var volatile bit    TRISB_RB2                 at TRISB : 2
var volatile bit    TRISB_RB3                 at TRISB : 3
var volatile bit    TRISB_RB4                 at TRISB : 4
var volatile bit    TRISB_RB5                 at TRISB : 5
var volatile bit    TRISB_RB6                 at TRISB : 6
var volatile bit    TRISB_RB7                 at TRISB : 7
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0xF94 }
alias               PORTC_direction           is TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
var volatile bit    pin_C0_direction          at TRISC : 0
alias               pin_T1OSO_direction       is pin_C0_direction
alias               pin_T1CKI_direction       is pin_C0_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
var volatile bit    pin_C1_direction          at TRISC : 1
alias               pin_T1OSI_direction       is pin_C1_direction
alias               pin_CCP2_direction        is pin_C1_direction
alias               pin_FLTA_direction        is pin_C1_direction
--
var volatile bit    TRISC_TRISC2              at TRISC : 2
var volatile bit    pin_C2_direction          at TRISC : 2
alias               pin_CCP1_direction        is pin_C2_direction
alias               pin_FLTB_direction        is pin_C2_direction
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
var volatile bit    pin_C3_direction          at TRISC : 3
alias               pin_T0CKI_direction       is pin_C3_direction
alias               pin_T5CKI_direction       is pin_C3_direction
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
var volatile bit    pin_C4_direction          at TRISC : 4
alias               pin_SDI_direction         is pin_C4_direction
alias               pin_SDA_direction         is pin_C4_direction
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
var volatile bit    pin_C5_direction          at TRISC : 5
alias               pin_SCK_direction         is pin_C5_direction
alias               pin_SCL_direction         is pin_C5_direction
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
var volatile bit    pin_C6_direction          at TRISC : 6
alias               pin_TX_direction          is pin_C6_direction
alias               pin_CK_direction          is pin_C6_direction
alias               pin_SS_direction          is pin_C6_direction
--
var volatile bit    TRISC_TRISC7              at TRISC : 7
var volatile bit    pin_C7_direction          at TRISC : 7
alias               pin_RX_direction          is pin_C7_direction
alias               pin_DT_direction          is pin_C7_direction
alias               pin_SDO_direction         is pin_C7_direction
--
var volatile bit    TRISC_RC0                 at TRISC : 0
var volatile bit    TRISC_RC1                 at TRISC : 1
var volatile bit    TRISC_RC2                 at TRISC : 2
var volatile bit    TRISC_RC3                 at TRISC : 3
var volatile bit    TRISC_RC4                 at TRISC : 4
var volatile bit    TRISC_RC5                 at TRISC : 5
var volatile bit    TRISC_RC6                 at TRISC : 6
var volatile bit    TRISC_RC7                 at TRISC : 7
-- ------------------------------------------------
var volatile byte   ADCHS                     at { 0xF99 }
var volatile bit*2  ADCHS_SASEL               at ADCHS : 0
var volatile bit*2  ADCHS_SCSEL               at ADCHS : 2
var volatile bit*2  ADCHS_SBSEL               at ADCHS : 4
var volatile bit*2  ADCHS_SDSEL               at ADCHS : 6
var volatile bit    ADCHS_GASEL0              at ADCHS : 0
var volatile bit    ADCHS_GASEL1              at ADCHS : 1
var volatile bit    ADCHS_GCSEL0              at ADCHS : 2
var volatile bit    ADCHS_GCSEL1              at ADCHS : 3
var volatile bit    ADCHS_GBSEL0              at ADCHS : 4
var volatile bit    ADCHS_GBSEL1              at ADCHS : 5
var volatile bit    ADCHS_GDSEL0              at ADCHS : 6
var volatile bit    ADCHS_GDSEL1              at ADCHS : 7
var volatile bit    ADCHS_SASEL0              at ADCHS : 0
var volatile bit    ADCHS_SASEL1              at ADCHS : 1
var volatile bit    ADCHS_SCSEL0              at ADCHS : 2
var volatile bit    ADCHS_SCSEL1              at ADCHS : 3
var volatile bit    ADCHS_SBSEL0              at ADCHS : 4
var volatile bit    ADCHS_SBSEL1              at ADCHS : 5
var volatile bit    ADCHS_SDSEL0              at ADCHS : 6
var volatile bit    ADCHS_SDSEL1              at ADCHS : 7
-- ------------------------------------------------
var volatile byte   ADCON3                    at { 0xF9A }
var volatile bit*5  ADCON3_SSRC               at ADCON3 : 0
var volatile bit*2  ADCON3_ADRS               at ADCON3 : 6
var volatile bit    ADCON3_SSRC0              at ADCON3 : 0
var volatile bit    ADCON3_SSRC1              at ADCON3 : 1
var volatile bit    ADCON3_SSRC2              at ADCON3 : 2
var volatile bit    ADCON3_SSRC3              at ADCON3 : 3
var volatile bit    ADCON3_SSRC4              at ADCON3 : 4
var volatile bit    ADCON3_ADRS0              at ADCON3 : 6
var volatile bit    ADCON3_ADRS1              at ADCON3 : 7
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0xF9B }
var volatile bit*6  OSCTUNE_TUN               at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN0              at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN1              at OSCTUNE : 1
var volatile bit    OSCTUNE_TUN2              at OSCTUNE : 2
var volatile bit    OSCTUNE_TUN3              at OSCTUNE : 3
var volatile bit    OSCTUNE_TUN4              at OSCTUNE : 4
var volatile bit    OSCTUNE_TUN5              at OSCTUNE : 5
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0xF9D }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_TMR2IE               at PIE1 : 1
var volatile bit    PIE1_CCP1IE               at PIE1 : 2
alias               PIE1_CCPIE                is PIE1_CCP1IE
var volatile bit    PIE1_SSPIE                at PIE1 : 3
var volatile bit    PIE1_TXIE                 at PIE1 : 4
var volatile bit    PIE1_RCIE                 at PIE1 : 5
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_TBIE                 at PIE1 : 4
var volatile bit    PIE1_TX1IE                at PIE1 : 4
var volatile bit    PIE1_RC1IE                at PIE1 : 5
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xF9E }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_TMR2IF               at PIR1 : 1
var volatile bit    PIR1_CCP1IF               at PIR1 : 2
alias               PIR1_CCPIF                is PIR1_CCP1IF
var volatile bit    PIR1_SSPIF                at PIR1 : 3
var volatile bit    PIR1_TXIF                 at PIR1 : 4
var volatile bit    PIR1_RCIF                 at PIR1 : 5
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_TBIF                 at PIR1 : 4
var volatile bit    PIR1_TX1IF                at PIR1 : 4
var volatile bit    PIR1_RC1IF                at PIR1 : 5
-- ------------------------------------------------
var volatile byte   IPR1                      at { 0xF9F }
var volatile bit    IPR1_TMR1IP               at IPR1 : 0
var volatile bit    IPR1_TMR2IP               at IPR1 : 1
var volatile bit    IPR1_CCP1IP               at IPR1 : 2
alias               IPR1_CCPIP                is IPR1_CCP1IP
var volatile bit    IPR1_SSPIP                at IPR1 : 3
var volatile bit    IPR1_TXIP                 at IPR1 : 4
var volatile bit    IPR1_RCIP                 at IPR1 : 5
var volatile bit    IPR1_ADIP                 at IPR1 : 6
var volatile bit    IPR1_TBIP                 at IPR1 : 4
var volatile bit    IPR1_TX1IP                at IPR1 : 4
var volatile bit    IPR1_RC1IP                at IPR1 : 5
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0xFA0 }
var volatile bit    PIE2_CCP2IE               at PIE2 : 0
var volatile bit    PIE2_LVDIE                at PIE2 : 2
var volatile bit    PIE2_EEIE                 at PIE2 : 4
var volatile bit    PIE2_OSFIE                at PIE2 : 7
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xFA1 }
var volatile bit    PIR2_CCP2IF               at PIR2 : 0
var volatile bit    PIR2_LVDIF                at PIR2 : 2
var volatile bit    PIR2_EEIF                 at PIR2 : 4
var volatile bit    PIR2_OSFIF                at PIR2 : 7
-- ------------------------------------------------
var volatile byte   IPR2                      at { 0xFA2 }
var volatile bit    IPR2_CCP2IP               at IPR2 : 0
var volatile bit    IPR2_LVDIP                at IPR2 : 2
var volatile bit    IPR2_EEIP                 at IPR2 : 4
var volatile bit    IPR2_OSFIP                at IPR2 : 7
-- ------------------------------------------------
var volatile byte   PIE3                      at { 0xFA3 }
var volatile bit    PIE3_TMR5IE               at PIE3 : 0
var volatile bit    PIE3_IC1IE                at PIE3 : 1
var volatile bit    PIE3_IC2QEIE              at PIE3 : 2
var volatile bit    PIE3_IC3DRIE              at PIE3 : 3
var volatile bit    PIE3_PTIE                 at PIE3 : 4
var volatile bit    PIE3_RXB0IE               at PIE3 : 0
var volatile bit    PIE3_RXB1IE               at PIE3 : 1
var volatile bit    PIE3_TXB0IE               at PIE3 : 2
var volatile bit    PIE3_TXB1IE               at PIE3 : 3
var volatile bit    PIE3_TXB2IE               at PIE3 : 4
var volatile bit    PIE3_RXBNIE               at PIE3 : 1
var volatile bit    PIE3_TXBNIE               at PIE3 : 4
-- ------------------------------------------------
var volatile byte   PIR3                      at { 0xFA4 }
var volatile bit    PIR3_TMR5IF               at PIR3 : 0
var volatile bit    PIR3_IC1IF                at PIR3 : 1
var volatile bit    PIR3_IC2QEIF              at PIR3 : 2
var volatile bit    PIR3_IC3DRIF              at PIR3 : 3
var volatile bit    PIR3_PTIF                 at PIR3 : 4
var volatile bit    PIR3_RXBNIF               at PIR3 : 1
var volatile bit    PIR3_TXBNIF               at PIR3 : 4
-- ------------------------------------------------
var volatile byte   IPR3                      at { 0xFA5 }
var volatile bit    IPR3_TMR5IP               at IPR3 : 0
var volatile bit    IPR3_IC1IP                at IPR3 : 1
var volatile bit    IPR3_IC2QEIP              at IPR3 : 2
var volatile bit    IPR3_IC3DRIP              at IPR3 : 3
var volatile bit    IPR3_PTIP                 at IPR3 : 4
var volatile bit    IPR3_RXBNIP               at IPR3 : 1
var volatile bit    IPR3_TXBNIP               at IPR3 : 4
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0xFA6 }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_FREE               at EECON1 : 4
var volatile bit    EECON1_CFGS               at EECON1 : 6
var volatile bit    EECON1_EEPGD              at EECON1 : 7
var volatile bit    EECON1_EEFS               at EECON1 : 6
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0xFA7 }
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0xFA8 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0xFA9 }
-- ------------------------------------------------
var volatile byte   BAUDCON                   at { 0xFAA }
var volatile bit    BAUDCON_ABDEN             at BAUDCON : 0
var volatile bit    BAUDCON_WUE               at BAUDCON : 1
var volatile bit    BAUDCON_BRG16             at BAUDCON : 3
var volatile bit    BAUDCON_TXCKP             at BAUDCON : 4
var volatile bit    BAUDCON_RXDTP             at BAUDCON : 5
var volatile bit    BAUDCON_RCIDL             at BAUDCON : 6
var volatile bit    BAUDCON_ABDOVF            at BAUDCON : 7
var volatile bit    BAUDCON_SCKP              at BAUDCON : 4
var volatile bit    BAUDCON_RCMT              at BAUDCON : 6
var volatile bit    BAUDCON_RXCKP             at BAUDCON : 5
-- ------------------------------------------------
var volatile byte   RCSTA                     at { 0xFAB }
var volatile bit    RCSTA_RX9D                at RCSTA : 0
var volatile bit    RCSTA_OERR                at RCSTA : 1
var volatile bit    RCSTA_FERR                at RCSTA : 2
var volatile bit    RCSTA_ADDEN               at RCSTA : 3
var volatile bit    RCSTA_CREN                at RCSTA : 4
var volatile bit    RCSTA_SREN                at RCSTA : 5
var volatile bit    RCSTA_RX9                 at RCSTA : 6
var volatile bit    RCSTA_SPEN                at RCSTA : 7
var volatile bit    RCSTA_ADEN                at RCSTA : 3
var volatile bit    RCSTA_SRENA               at RCSTA : 5
-- ------------------------------------------------
var volatile byte   TXSTA                     at { 0xFAC }
var volatile bit    TXSTA_TX9D                at TXSTA : 0
var volatile bit    TXSTA_TRMT                at TXSTA : 1
var volatile bit    TXSTA_BRGH                at TXSTA : 2
var volatile bit    TXSTA_SENDB               at TXSTA : 3
var volatile bit    TXSTA_SYNC                at TXSTA : 4
var volatile bit    TXSTA_TXEN                at TXSTA : 5
var volatile bit    TXSTA_TX9                 at TXSTA : 6
var volatile bit    TXSTA_CSRC                at TXSTA : 7
var volatile bit    TXSTA_TX9D1               at TXSTA : 0
var volatile bit    TXSTA_TRMT1               at TXSTA : 1
var volatile bit    TXSTA_BRGH1               at TXSTA : 2
var volatile bit    TXSTA_SENDB1              at TXSTA : 3
var volatile bit    TXSTA_SYNC1               at TXSTA : 4
var volatile bit    TXSTA_TXEN1               at TXSTA : 5
var volatile bit    TXSTA_TX91                at TXSTA : 6
var volatile bit    TXSTA_CSRC1               at TXSTA : 7
-- ------------------------------------------------
var volatile byte   TXREG                     at { 0xFAD }
-- ------------------------------------------------
var volatile byte   RCREG                     at { 0xFAE }
-- ------------------------------------------------
var volatile byte   SPBRG                     at { 0xFAF }
alias               SPBRGL                    is SPBRG
-- ------------------------------------------------
var volatile byte   SPBRGH                    at { 0xFB0 }
-- ------------------------------------------------
var volatile byte   QEICON                    at { 0xFB6 }
var volatile bit*2  QEICON_PDEC               at QEICON : 0
var volatile bit*3  QEICON_QEIM               at QEICON : 2
var volatile bit    QEICON_UP_NDOWN           at QEICON : 5
var volatile bit    QEICON_ERROR              at QEICON : 6
var volatile bit    QEICON_NVELM              at QEICON : 7
var volatile bit    QEICON_PDEC0              at QEICON : 0
var volatile bit    QEICON_PDEC1              at QEICON : 1
var volatile bit    QEICON_QEIM0              at QEICON : 2
var volatile bit    QEICON_QEIM1              at QEICON : 3
var volatile bit    QEICON_QEIM2              at QEICON : 4
var volatile bit    QEICON_UP_DOWN            at QEICON : 5
var volatile bit    QEICON_VELM               at QEICON : 7
var volatile bit    QEICON_UP                 at QEICON : 5
var volatile bit    QEICON_DOWN               at QEICON : 5
var volatile bit    QEICON_NDOWN              at QEICON : 5
var volatile bit    QEICON_UPDOWN             at QEICON : 5
-- ------------------------------------------------
var volatile byte   T5CON                     at { 0xFB7 }
var volatile bit    T5CON_TMR5ON              at T5CON : 0
var volatile bit    T5CON_TMR5CS              at T5CON : 1
var volatile bit    T5CON_NT5SYNC             at T5CON : 2
alias               T5CON_T5SYNC              is T5CON_NT5SYNC
var volatile bit*2  T5CON_T5PS                at T5CON : 3
var volatile bit    T5CON_T5MOD               at T5CON : 5
var volatile bit    T5CON_NRESEN              at T5CON : 6
var volatile bit    T5CON_T5SEN               at T5CON : 7
var volatile bit    T5CON_T5PS0               at T5CON : 3
var volatile bit    T5CON_T5PS1               at T5CON : 4
var volatile bit    T5CON_RESEN               at T5CON : 6
var volatile bit    T5CON_RD165               at T5CON : 1
var volatile bit    T5CON_SOSCEN5             at T5CON : 3
-- ------------------------------------------------
var volatile byte   ANSEL0                    at { 0xFB8 }
var volatile bit    ANSEL0_ANS0               at ANSEL0 : 0
var volatile bit    ANSEL0_ANS1               at ANSEL0 : 1
var volatile bit    ANSEL0_ANS2               at ANSEL0 : 2
var volatile bit    ANSEL0_ANS3               at ANSEL0 : 3
var volatile bit    ANSEL0_ANS4               at ANSEL0 : 4
-- ------------------------------------------------
var volatile byte   CCP2CON                   at { 0xFBA }
var volatile bit*4  CCP2CON_CCP2M             at CCP2CON : 0
alias               CCP2CON_MODE              is CCP2CON_CCP2M
var volatile bit*2  CCP2CON_DC2B              at CCP2CON : 4
var volatile bit    CCP2CON_CCP2M0            at CCP2CON : 0
var volatile bit    CCP2CON_CCP2M1            at CCP2CON : 1
var volatile bit    CCP2CON_CCP2M2            at CCP2CON : 2
var volatile bit    CCP2CON_CCP2M3            at CCP2CON : 3
var volatile bit    CCP2CON_CCP2Y             at CCP2CON : 4
var volatile bit    CCP2CON_CCP2X             at CCP2CON : 5
var volatile bit    CCP2CON_DC2B0             at CCP2CON : 4
var volatile bit    CCP2CON_DC2B1             at CCP2CON : 5
-- ------------------------------------------------
var volatile word   CCPR2                     at { 0xFBB }
-- ------------------------------------------------
var volatile byte   CCPR2L                    at { 0xFBB }
-- ------------------------------------------------
var volatile byte   CCPR2H                    at { 0xFBC }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0xFBD }
var volatile bit*4  CCP1CON_CCP1M             at CCP1CON : 0
alias               CCP1CON_MODE              is CCP1CON_CCP1M
var volatile bit*2  CCP1CON_DC1B              at CCP1CON : 4
var volatile bit    CCP1CON_CCP1M0            at CCP1CON : 0
var volatile bit    CCP1CON_CCP1M1            at CCP1CON : 1
var volatile bit    CCP1CON_CCP1M2            at CCP1CON : 2
var volatile bit    CCP1CON_CCP1M3            at CCP1CON : 3
var volatile bit    CCP1CON_CCP1Y             at CCP1CON : 4
var volatile bit    CCP1CON_CCP1X             at CCP1CON : 5
var volatile bit    CCP1CON_DC1B0             at CCP1CON : 4
var volatile bit    CCP1CON_DC1B1             at CCP1CON : 5
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0xFBE }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0xFBE }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0xFBF }
-- ------------------------------------------------
var volatile byte   ADCON2                    at { 0xFC0 }
var volatile bit*3  ADCON2_ADCS               at ADCON2 : 0
var volatile bit*4  ADCON2_ACQT               at ADCON2 : 3
var volatile bit    ADCON2_ADFM               at ADCON2 : 7
var volatile bit    ADCON2_ADCS0              at ADCON2 : 0
var volatile bit    ADCON2_ADCS1              at ADCON2 : 1
var volatile bit    ADCON2_ADCS2              at ADCON2 : 2
var volatile bit    ADCON2_ACQT0              at ADCON2 : 3
var volatile bit    ADCON2_ACQT1              at ADCON2 : 4
var volatile bit    ADCON2_ACQT2              at ADCON2 : 5
var volatile bit    ADCON2_ACQT3              at ADCON2 : 6
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0xFC1 }
var volatile bit*2  ADCON1_ADPNT              at ADCON1 : 0
var volatile bit    ADCON1_BFOVFL             at ADCON1 : 2
var volatile bit    ADCON1_BFEMT              at ADCON1 : 3
var volatile bit    ADCON1_FIFOEN             at ADCON1 : 4
var volatile bit*2  ADCON1_VCFG               at ADCON1 : 6
var volatile bit    ADCON1_ADPNT0             at ADCON1 : 0
var volatile bit    ADCON1_ADPNT1             at ADCON1 : 1
var volatile bit    ADCON1_VCFG0              at ADCON1 : 6
var volatile bit    ADCON1_VCFG1              at ADCON1 : 7
var volatile bit    ADCON1_FFOVFL             at ADCON1 : 2
var volatile bit    ADCON1_CHSN3              at ADCON1 : 3
var volatile bit    ADCON1_VCFG01             at ADCON1 : 4
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0xFC2 }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 1
var volatile bit*2  ADCON0_ACMOD              at ADCON0 : 2
var volatile bit    ADCON0_ACSCH              at ADCON0 : 4
var volatile bit    ADCON0_ACONV              at ADCON0 : 5
var volatile bit    ADCON0_GO_DONE            at ADCON0 : 1
var volatile bit    ADCON0_ACMOD0             at ADCON0 : 2
var volatile bit    ADCON0_ACMOD1             at ADCON0 : 3
var volatile bit    ADCON0_DONE               at ADCON0 : 1
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_GODONE             at ADCON0 : 1
-- ------------------------------------------------
var volatile word   ADRES                     at { 0xFC3 }
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0xFC3 }
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0xFC4 }
-- ------------------------------------------------
var volatile byte   SSPCON                    at { 0xFC6 }
var volatile bit*4  SSPCON_SSPM               at SSPCON : 0
var volatile bit    SSPCON_CKP                at SSPCON : 4
var volatile bit    SSPCON_SSPEN              at SSPCON : 5
var volatile bit    SSPCON_SSPOV              at SSPCON : 6
var volatile bit    SSPCON_WCOL               at SSPCON : 7
var volatile bit    SSPCON_SSPM0              at SSPCON : 0
var volatile bit    SSPCON_SSPM1              at SSPCON : 1
var volatile bit    SSPCON_SSPM2              at SSPCON : 2
var volatile bit    SSPCON_SSPM3              at SSPCON : 3
--
alias               SSPCON1                   is SSPCON
alias               SSPCON1_SSPM              is SSPCON_SSPM
alias               SSPCON1_CKP               is SSPCON_CKP
alias               SSPCON1_SSPEN             is SSPCON_SSPEN
alias               SSPCON1_SSPOV             is SSPCON_SSPOV
alias               SSPCON1_WCOL              is SSPCON_WCOL
alias               SSPCON1_SSPM0             is SSPCON_SSPM0
alias               SSPCON1_SSPM1             is SSPCON_SSPM1
alias               SSPCON1_SSPM2             is SSPCON_SSPM2
alias               SSPCON1_SSPM3             is SSPCON_SSPM3
-- ------------------------------------------------
var volatile byte   SSPSTAT                   at { 0xFC7 }
var volatile bit    SSPSTAT_BF                at SSPSTAT : 0
var volatile bit    SSPSTAT_UA                at SSPSTAT : 1
var volatile bit    SSPSTAT_R_NW              at SSPSTAT : 2
var volatile bit    SSPSTAT_S                 at SSPSTAT : 3
var volatile bit    SSPSTAT_P                 at SSPSTAT : 4
var volatile bit    SSPSTAT_D_NA              at SSPSTAT : 5
var volatile bit    SSPSTAT_CKE               at SSPSTAT : 6
var volatile bit    SSPSTAT_SMP               at SSPSTAT : 7
var volatile bit    SSPSTAT_R_W               at SSPSTAT : 2
var volatile bit    SSPSTAT_D_A               at SSPSTAT : 5
var volatile bit    SSPSTAT_NW                at SSPSTAT : 2
var volatile bit    SSPSTAT_NA                at SSPSTAT : 5
var volatile bit    SSPSTAT_NWRITE            at SSPSTAT : 2
var volatile bit    SSPSTAT_NADDRESS          at SSPSTAT : 5
var volatile bit    SSPSTAT_READ_WRITE        at SSPSTAT : 2
var volatile bit    SSPSTAT_DATA_ADDRESS      at SSPSTAT : 5
var volatile bit    SSPSTAT_R                 at SSPSTAT : 2
var volatile bit    SSPSTAT_D                 at SSPSTAT : 5
var volatile bit    SSPSTAT_RW                at SSPSTAT : 2
var volatile bit    SSPSTAT_START             at SSPSTAT : 3
var volatile bit    SSPSTAT_STOP              at SSPSTAT : 4
var volatile bit    SSPSTAT_DA                at SSPSTAT : 5
var volatile bit    SSPSTAT_NOT_W             at SSPSTAT : 2
var volatile bit    SSPSTAT_NOT_A             at SSPSTAT : 5
-- ------------------------------------------------
var volatile byte   SSPADD                    at { 0xFC8 }
-- ------------------------------------------------
var volatile byte   SSPBUF                    at { 0xFC9 }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0xFCA }
var volatile bit*2  T2CON_T2CKPS              at T2CON : 0
var volatile bit    T2CON_TMR2ON              at T2CON : 2
var volatile bit*4  T2CON_TOUTPS              at T2CON : 3
var volatile bit    T2CON_T2CKPS0             at T2CON : 0
var volatile bit    T2CON_T2CKPS1             at T2CON : 1
var volatile bit    T2CON_T2OUTPS0            at T2CON : 3
var volatile bit    T2CON_T2OUTPS1            at T2CON : 4
var volatile bit    T2CON_T2OUTPS2            at T2CON : 5
var volatile bit    T2CON_T2OUTPS3            at T2CON : 6
var volatile bit    T2CON_TOUTPS0             at T2CON : 3
var volatile bit    T2CON_TOUTPS1             at T2CON : 4
var volatile bit    T2CON_TOUTPS2             at T2CON : 5
var volatile bit    T2CON_TOUTPS3             at T2CON : 6
-- ------------------------------------------------
var volatile byte   PR2                       at { 0xFCB }
-- ------------------------------------------------
var volatile byte   TMR2                      at { 0xFCC }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0xFCD }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
alias               T1CON_T1SYNC              is T1CON_NT1SYNC
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1RUN               at T1CON : 6
var volatile bit    T1CON_RD16                at T1CON : 7
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
var volatile bit    T1CON_T1INSYNC            at T1CON : 2
var volatile bit    T1CON_SOSCEN              at T1CON : 3
var volatile bit    T1CON_T1RD16              at T1CON : 7
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xFCE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xFCE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xFCF }
-- ------------------------------------------------
var volatile byte   RCON                      at { 0xFD0 }
var volatile bit    RCON_NBOR                 at RCON : 0
var volatile bit    RCON_NPOR                 at RCON : 1
var volatile bit    RCON_NPD                  at RCON : 2
var volatile bit    RCON_NTO                  at RCON : 3
var volatile bit    RCON_NRI                  at RCON : 4
var volatile bit    RCON_IPEN                 at RCON : 7
var volatile bit    RCON_BOR                  at RCON : 0
var volatile bit    RCON_POR                  at RCON : 1
var volatile bit    RCON_PD                   at RCON : 2
var volatile bit    RCON_TO                   at RCON : 3
var volatile bit    RCON_RI                   at RCON : 4
var volatile bit    RCON_NIPEN                at RCON : 7
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0xFD1 }
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
var volatile bit    WDTCON_WDTW               at WDTCON : 7
-- ------------------------------------------------
var volatile byte   LVDCON                    at { 0xFD2 }
var volatile bit*4  LVDCON_LVDL               at LVDCON : 0
var volatile bit    LVDCON_LVDEN              at LVDCON : 4
var volatile bit    LVDCON_IRVST              at LVDCON : 5
var volatile bit    LVDCON_LVDL0              at LVDCON : 0
var volatile bit    LVDCON_LVDL1              at LVDCON : 1
var volatile bit    LVDCON_LVDL2              at LVDCON : 2
var volatile bit    LVDCON_LVDL3              at LVDCON : 3
var volatile bit    LVDCON_IVRST              at LVDCON : 5
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0xFD3 }
var volatile bit*2  OSCCON_SCS                at OSCCON : 0
var volatile bit    OSCCON_IOFS               at OSCCON : 2
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_IDLEN              at OSCCON : 7
var volatile bit    OSCCON_SCS0               at OSCCON : 0
var volatile bit    OSCCON_SCS1               at OSCCON : 1
var volatile bit    OSCCON_IRCF0              at OSCCON : 4
var volatile bit    OSCCON_IRCF1              at OSCCON : 5
var volatile bit    OSCCON_IRCF2              at OSCCON : 6
var volatile bit    OSCCON_FLTS               at OSCCON : 2
-- ------------------------------------------------
var volatile byte   T0CON                     at { 0xFD5 }
var volatile bit*3  T0CON_T0PS                at T0CON : 0
var volatile bit    T0CON_PSA                 at T0CON : 3
var volatile bit    T0CON_T0SE                at T0CON : 4
var volatile bit    T0CON_T0CS                at T0CON : 5
var volatile bit    T0CON_T016BIT             at T0CON : 6
var volatile bit    T0CON_TMR0ON              at T0CON : 7
var volatile bit    T0CON_T0PS0               at T0CON : 0
var volatile bit    T0CON_T0PS1               at T0CON : 1
var volatile bit    T0CON_T0PS2               at T0CON : 2
var volatile bit    T0CON_T0PS3               at T0CON : 3
-- ------------------------------------------------
var volatile word   TMR0                      at { 0xFD6 }
-- ------------------------------------------------
var volatile byte   TMR0L                     at { 0xFD6 }
-- ------------------------------------------------
var volatile byte   TMR0H                     at { 0xFD7 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0xFD8 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_OV                 at STATUS : 3
var volatile bit    STATUS_N                  at STATUS : 4
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile bit    STATUS_OVERFLOW           at STATUS : 3
var volatile bit    STATUS_NEGATIVE           at STATUS : 4
var volatile byte   _status                   at { 0xFD8 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _ov                       =  3
const        byte   _n                        =  4
const        byte   _carry                    =  0
const        byte   _zero                     =  2
const        byte   _overflow                 =  3
const        byte   _negative                 =  4
const        byte   _banked                   =  1
const        byte   _access                   =  0
-- ------------------------------------------------
var volatile word   FSR2                      at { 0xFD9 }
-- ------------------------------------------------
var volatile byte   FSR2L                     at { 0xFD9 }
-- ------------------------------------------------
var volatile byte   FSR2H                     at { 0xFDA }
var volatile bit*4  FSR2H_FSR2H               at FSR2H : 0
-- ------------------------------------------------
var volatile byte   PLUSW2                    at { 0xFDB }
-- ------------------------------------------------
var volatile byte   PREINC2                   at { 0xFDC }
-- ------------------------------------------------
var volatile byte   POSTDEC2                  at { 0xFDD }
-- ------------------------------------------------
var volatile byte   POSTINC2                  at { 0xFDE }
-- ------------------------------------------------
var volatile byte   INDF2                     at { 0xFDF }
-- ------------------------------------------------
var volatile byte   BSR                       at { 0xFE0 }
var volatile bit*4  BSR_BSR                   at BSR : 0
var volatile byte   _bsr                      at { 0xFE0 }
-- ------------------------------------------------
var volatile word   FSR1                      at { 0xFE1 }
var volatile word   _fsr1                     at { 0xFE1 }
-- ------------------------------------------------
var volatile byte   FSR1L                     at { 0xFE1 }
var volatile byte   _fsr1l                    at { 0xFE1 }
-- ------------------------------------------------
var volatile byte   FSR1H                     at { 0xFE2 }
var volatile bit*4  FSR1H_FSR1H               at FSR1H : 0
var volatile byte   _fsr1h                    at { 0xFE2 }
-- ------------------------------------------------
var volatile byte   PLUSW1                    at { 0xFE3 }
-- ------------------------------------------------
var volatile byte   PREINC1                   at { 0xFE4 }
-- ------------------------------------------------
var volatile byte   POSTDEC1                  at { 0xFE5 }
-- ------------------------------------------------
var volatile byte   POSTINC1                  at { 0xFE6 }
-- ------------------------------------------------
var volatile byte   INDF1                     at { 0xFE7 }
-- ------------------------------------------------
var volatile byte   WREG                      at { 0xFE8 }
-- ------------------------------------------------
var volatile word   FSR0                      at { 0xFE9 }
var volatile word   _fsr0                     at { 0xFE9 }
-- ------------------------------------------------
var volatile byte   FSR0L                     at { 0xFE9 }
var volatile byte   _fsr0l                    at { 0xFE9 }
-- ------------------------------------------------
var volatile byte   FSR0H                     at { 0xFEA }
var volatile bit*4  FSR0H_FSR0H               at FSR0H : 0
var volatile byte   _fsr0h                    at { 0xFEA }
-- ------------------------------------------------
var volatile byte   PLUSW0                    at { 0xFEB }
-- ------------------------------------------------
var volatile byte   PREINC0                   at { 0xFEC }
-- ------------------------------------------------
var volatile byte   POSTDEC0                  at { 0xFED }
-- ------------------------------------------------
var volatile byte   POSTINC0                  at { 0xFEE }
-- ------------------------------------------------
var volatile byte   INDF0                     at { 0xFEF }
var volatile byte   _ind                      at { 0xFEF }
-- ------------------------------------------------
var volatile byte   INTCON3                   at { 0xFF0 }
var volatile bit    INTCON3_INT1IF            at INTCON3 : 0
var volatile bit    INTCON3_INT2IF            at INTCON3 : 1
var volatile bit    INTCON3_INT1IE            at INTCON3 : 3
var volatile bit    INTCON3_INT2IE            at INTCON3 : 4
var volatile bit    INTCON3_INT1IP            at INTCON3 : 6
var volatile bit    INTCON3_INT2IP            at INTCON3 : 7
var volatile bit    INTCON3_INT1F             at INTCON3 : 0
var volatile bit    INTCON3_INT2F             at INTCON3 : 1
var volatile bit    INTCON3_INT1E             at INTCON3 : 3
var volatile bit    INTCON3_INT2E             at INTCON3 : 4
var volatile bit    INTCON3_INT1P             at INTCON3 : 6
var volatile bit    INTCON3_INT2P             at INTCON3 : 7
-- ------------------------------------------------
var volatile byte   INTCON2                   at { 0xFF1 }
var volatile bit    INTCON2_RBIP              at INTCON2 : 0
var volatile bit    INTCON2_TMR0IP            at INTCON2 : 2
var volatile bit    INTCON2_INTEDG2           at INTCON2 : 4
var volatile bit    INTCON2_INTEDG1           at INTCON2 : 5
var volatile bit    INTCON2_INTEDG0           at INTCON2 : 6
var volatile bit    INTCON2_NRBPU             at INTCON2 : 7
var volatile bit    INTCON2_T0IP              at INTCON2 : 2
var volatile bit    INTCON2_RBPU              at INTCON2 : 7
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xFF2 }
var volatile bit    INTCON_RBIF               at INTCON : 0
var volatile bit    INTCON_INT0IF             at INTCON : 1
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_INT0IE             at INTCON : 4
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_PEIE_GIEL          at INTCON : 6
var volatile bit    INTCON_GIE_GIEH           at INTCON : 7
var volatile bit    INTCON_INT0F              at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_INT0E              at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_GIEL               at INTCON : 6
var volatile bit    INTCON_GIEH               at INTCON : 7
-- ------------------------------------------------
var volatile word   PROD                      at { 0xFF3 }
-- ------------------------------------------------
var volatile byte   PRODL                     at { 0xFF3 }
-- ------------------------------------------------
var volatile byte   PRODH                     at { 0xFF4 }
-- ------------------------------------------------
var volatile byte   TABLAT                    at { 0xFF5 }
var volatile byte   _tablat                   at { 0xFF5 }
-- ------------------------------------------------
var volatile byte*3 TBLPTR                    at { 0xFF6 }
var volatile byte*3 _tblptr                   at { 0xFF6 }
-- ------------------------------------------------
var volatile byte   TBLPTRL                   at { 0xFF6 }
var volatile byte   _tblptrl                  at { 0xFF6 }
-- ------------------------------------------------
var volatile byte   TBLPTRH                   at { 0xFF7 }
var volatile byte   _tblptrh                  at { 0xFF7 }
-- ------------------------------------------------
var volatile byte   TBLPTRU                   at { 0xFF8 }
var volatile bit*5  TBLPTRU_TBLPTRU           at TBLPTRU : 0
var volatile bit    TBLPTRU_ACSS              at TBLPTRU : 5
var volatile byte   _tblptru                  at { 0xFF8 }
-- ------------------------------------------------
var volatile byte*3 PCLAT                     at { 0xFF9 }
var volatile byte*3 _pclat                    at { 0xFF9 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0xFF9 }
var volatile byte   _pcl                      at { 0xFF9 }
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xFFA }
var volatile byte   _pclath                   at { 0xFFA }
-- ------------------------------------------------
var volatile byte   PCLATU                    at { 0xFFB }
var volatile bit*5  PCLATU_PCU                at PCLATU : 0
var volatile byte   _pclatu                   at { 0xFFB }
-- ------------------------------------------------
var volatile byte   STKPTR                    at { 0xFFC }
var volatile bit*5  STKPTR_STKPTR             at STKPTR : 0
var volatile bit    STKPTR_STKUNF             at STKPTR : 6
var volatile bit    STKPTR_STKFUL             at STKPTR : 7
var volatile bit    STKPTR_STKPTR0            at STKPTR : 0
var volatile bit    STKPTR_STKPTR1            at STKPTR : 1
var volatile bit    STKPTR_STKPTR2            at STKPTR : 2
var volatile bit    STKPTR_STKPTR3            at STKPTR : 3
var volatile bit    STKPTR_STKPTR4            at STKPTR : 4
var volatile bit    STKPTR_STKOVF             at STKPTR : 7
-- ------------------------------------------------
var volatile byte*3 TOS                       at { 0xFFD }
-- ------------------------------------------------
var volatile byte   TOSL                      at { 0xFFD }
-- ------------------------------------------------
var volatile byte   TOSH                      at { 0xFFE }
-- ------------------------------------------------
var volatile byte   TOSU                      at { 0xFFF }
var volatile bit*5  TOSU_TOSU                 at TOSU : 0
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 3
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000
   ADCON1 = 0b0000_0000
   ADCON2 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   adc_off()
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0x1-0x5F
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG1H (0x300001)
--
pragma fuse_def OSC:1  0xF {             -- Oscillator Selection bits
       INTOSC_CLKOUT = 0x9               -- Internal oscillator block, CLKO function on RA6 and port function on RA7
       INTOSC_NOCLKOUT = 0x8             -- Internal oscillator block, port function on RA6 and port function on RA7
       RC_NOCLKOUT = 0x7                 -- External RC oscillator, port function on RA6
       HS_PLL = 0x6                      -- HS oscillator, PLL enabled (clock frequency = 4 x FOSC1)
       EC_NOCLKOUT = 0x5                 -- EC oscillator, port function on RA6
       EC_CLKOUT = 0x4                   -- EC oscillator, CLKO function on RA6
       RC_CLKOUT = 0x3                   -- External RC oscillator, CLKO function on RA6
       HS = 0x2                          -- HS oscillator
       XT = 0x1                          -- XT oscillator
       LP = 0x0                          -- LP oscillator
       }
pragma fuse_def FCMEN:1  0x40 {          -- Fail-Safe Clock Monitor Enable bit
       ENABLED = 0x40                    -- Fail-Safe Clock Monitor enabled
       DISABLED = 0x0                    -- Fail-Safe Clock Monitor disabled
       }
pragma fuse_def IESO:1  0x80 {           -- Internal External Oscillator Switchover bit
       ENABLED = 0x80                    -- Internal External Switchover mode enabled
       DISABLED = 0x0                    -- Internal External Switchover mode disabled
       }
--
-- CONFIG2L (0x300002)
--
pragma fuse_def PWRTE:2  0x1 {           -- Power-up Timer Enable bit
       DISABLED = 0x1                    -- PWRT disabled
       ENABLED = 0x0                     -- PWRT enabled
       }
pragma fuse_def BROWNOUT:2  0x2 {        -- Brown-out Reset Enable bits
       ENABLED = 0x2                     -- Brown-out Reset enabled
       DISABLED = 0x0                    -- Brown-out Reset disabled
       }
pragma fuse_def VOLTAGE:2  0xC {         -- Brown Out Reset Voltage bits
       RESERVED = 0xC                    -- Reserved
       V27 = 0x8                         -- VBOR set to 2.7V
       V42 = 0x4                         -- VBOR set to 4.2V
       V45 = 0x0                         -- VBOR set to 4.5V
       }
--
-- CONFIG2H (0x300003)
--
pragma fuse_def WDT:3  0x1 {             -- Watchdog Timer Enable bit
       ENABLED = 0x1                     -- WDT enabled
       CONTROL = 0x0                     -- WDT disabled (control is placed on the SWDTEN bit)
       }
pragma fuse_def WDTPS:3  0x1E {          -- Watchdog Timer Postscale Select bits
       P32K = 0x1E                       -- 1:32768
       P16K = 0x1C                       -- 1:16384
       P8K = 0x1A                        -- 1:8192
       P4K = 0x18                        -- 1:4096
       P2K = 0x16                        -- 1:2048
       P1K = 0x14                        -- 1:1024
       P512  = 0x12                      -- 1:512
       P256  = 0x10                      -- 1:256
       P128  = 0xE                       -- 1:128
       P64  = 0xC                        -- 1:64
       P32  = 0xA                        -- 1:32
       P16  = 0x8                        -- 1:16
       P8  = 0x6                         -- 1:8
       P4  = 0x4                         -- 1:4
       P2  = 0x2                         -- 1:2
       P1  = 0x0                         -- 1:1
       }
pragma fuse_def WINEN:3  0x20 {          -- Watchdog Timer Window Enable bit
       DISABLED = 0x20                   -- WDT window disabled
       ENABLED = 0x0                     -- WDT window enabledbled
       }
--
-- CONFIG3L (0x300004)
--
pragma fuse_def PWMPIN:4  0x4 {          -- PWM output pins Reset state control
       DISABLED = 0x4                    -- PWM outputs disabled upon Reset (default)
       ENABLED = 0x0                     -- PWM outputs drive active states upon Reset
       }
pragma fuse_def LPOL:4  0x8 {            -- Low-Side Transistors Polarity
       ACTIVE_HIGH = 0x8                 -- PWM0, 2, 4 and 6 are active-high
       ACTIVE_LOW = 0x0                  -- PWM0, 2, 4 and 6 are active-low
       }
pragma fuse_def HPOL:4  0x10 {           -- High-Side Transistors Polarity
       ACTIVE_HIGH = 0x10                -- PWM1, 3, 5 and 7 are active-high
       ACTIVE_LOW = 0x0                  -- PWM1, 3, 5 and 7 are active-low
       }
pragma fuse_def T1OSCMUX:4  0x20 {       -- Timer1 Oscillator MUX
       LP = 0x20                         -- Low-power Timer1 operation when microcontroller is in Sleep mode
       STANDARD = 0x0                    -- Standard (legacy) Timer1 oscillator operation
       }
--
-- CONFIG3H (0x300005)
--
pragma fuse_def MCLR:5  0x80 {           -- MCLR Pin Enable bit
       EXTERNAL = 0x80                   -- Enabled
       INTERNAL = 0x0                    -- Disabled
       }
--
-- CONFIG4L (0x300006)
--
pragma fuse_def STVR:6  0x1 {            -- Stack Full/Underflow Reset Enable bit
       ENABLED = 0x1                     -- Stack full/underflow will cause Reset
       DISABLED = 0x0                    -- Stack full/underflow will not cause Reset
       }
pragma fuse_def LVP:6  0x4 {             -- Low-Voltage ICSP Enable bit
       ENABLED = 0x4                     -- Low-voltage ICSP enabled
       DISABLED = 0x0                    -- Low-voltage ICSP disabled
       }
pragma fuse_def DEBUG:6  0x80 {          -- Background Debugger Enable bit
       DISABLED = 0x80                   -- Background debugger disabled; RB6 and RB7 configured as general purpose I/O pins
       ENABLED = 0x0                     -- Background debugger enabled; RB6 and RB7 are dedicated to In-Circuit Debug
       }
--
-- CONFIG5L (0x300008)
--
pragma fuse_def CP0:8  0x1 {             -- Code Protection bit
       DISABLED = 0x1                    -- Block 0 (000200-000FFFh) not code-protected
       ENABLED = 0x0                     -- Block 0 (000200-000FFFh) code-protected
       }
pragma fuse_def CP1:8  0x2 {             -- Code Protection bit
       DISABLED = 0x2                    -- Block 1 (001000-001FFF) not code-protected
       ENABLED = 0x0                     -- Block 1 (001000-001FFF) code-protected
       }
pragma fuse_def CP2:8  0x4 {             -- Code Protection bit
       DISABLED = 0x4                    -- Block 2 (002000-002FFFh) not code-protected
       ENABLED = 0x0                     -- Block 2 (002000-002FFFh) code-protected
       }
pragma fuse_def CP3:8  0x8 {             -- Code Protection bit
       DISABLED = 0x8                    -- Block 3 (003000-003FFFh) not code-protected
       ENABLED = 0x0                     -- Block 3 (003000-003FFFh) code-protected
       }
--
-- CONFIG5H (0x300009)
--
pragma fuse_def CPB:9  0x40 {            -- Boot Block Code Protection bit
       DISABLED = 0x40                   -- Boot Block (000000-0001FFh) not code-protected
       ENABLED = 0x0                     -- Boot Block (000000-0001FFh) code-protected
       }
pragma fuse_def CPD:9  0x80 {            -- Data EEPROM Code Protection bit
       DISABLED = 0x80                   -- Data EEPROM not code-protected
       ENABLED = 0x0                     -- Data EEPROM code-protected
       }
--
-- CONFIG6L (0x30000A)
--
pragma fuse_def WRT0:10  0x1 {           -- Write Protection bit
       DISABLED = 0x1                    -- Block 0 (000200-000FFFh) not write-protected
       ENABLED = 0x0                     -- Block 0 (000200-000FFFh) write-protected
       }
pragma fuse_def WRT1:10  0x2 {           -- Write Protection bit
       DISABLED = 0x2                    -- Block 1 (001000-001FFF) not write-protected
       ENABLED = 0x0                     -- Block 1 (001000-001FFF) write-protected
       }
pragma fuse_def WRT2:10  0x4 {           -- Write Protection bit
       DISABLED = 0x4                    -- Block 2 (002000-002FFFh) not write-protected
       ENABLED = 0x0                     -- Block 2 (002000-002FFFh) write-protected
       }
pragma fuse_def WRT3:10  0x8 {           -- Write Protection bit
       DISABLED = 0x8                    -- Block 3 (003000-003FFFh) not write-protected
       ENABLED = 0x0                     -- Block 3 (003000-003FFFh) write-protected
       }
--
-- CONFIG6H (0x30000B)
--
pragma fuse_def WRTC:11  0x20 {          -- Configuration Register Write Protection bit
       DISABLED = 0x20                   -- Configuration registers (300000-3000FFh) not write-protected
       ENABLED = 0x0                     -- Configuration registers (300000-3000FFh) write-protected
       }
pragma fuse_def WRTB:11  0x40 {          -- Boot Block Write Protection bit
       DISABLED = 0x40                   -- Boot Block (000000-0001FFh) not write-protected
       ENABLED = 0x0                     -- Boot Block (000000-0001FFh) write-protected
       }
pragma fuse_def WRTD:11  0x80 {          -- Data EEPROM Write Protection bit
       DISABLED = 0x80                   -- Data EEPROM not write-protected
       ENABLED = 0x0                     -- Data EEPROM write-protected
       }
--
-- CONFIG7L (0x30000C)
--
pragma fuse_def EBTR0:12  0x1 {          -- Table Read Protection bit
       DISABLED = 0x1                    -- Block 0 (000200-000FFFh) not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 0 (000200-000FFFh) protected from table reads executed in other blocks
       }
pragma fuse_def EBTR1:12  0x2 {          -- Table Read Protection bit
       DISABLED = 0x2                    -- Block 1 (001000-001FFF) not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 1 (001000-001FFF) protected from table reads executed in other blocks
       }
pragma fuse_def EBTR2:12  0x4 {          -- Table Read Protection bit
       DISABLED = 0x4                    -- Block 2 (002000-002FFFh) not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 2 (002000-002FFFh) protected from table reads executed in other blocks
       }
pragma fuse_def EBTR3:12  0x8 {          -- Table Read Protection bit
       DISABLED = 0x8                    -- Block 3 (003000-003FFFh) not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 3 (003000-003FFFh) protected from table reads executed in other blocks
       }
--
-- CONFIG7H (0x30000D)
--
pragma fuse_def EBTRB:13  0x40 {         -- Boot Block Table Read Protection bit
       DISABLED = 0x40                   -- Boot Block (000000-0001FFh) not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Boot Block (000000-0001FFh) not protected from table reads executed in other blocks
       }
--

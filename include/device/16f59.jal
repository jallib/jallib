-- ------------------------------------------------
-- Title: JalV2 device include file for 16f59
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f59, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC16F59.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Fri Mar  7 10:07:14 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x0000            -- ID for PIC programmer
const  word  CHIP_ID     = 0x6F59            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "16F59"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_12       -- (banks=4)
pragma  target  chip     16F59
pragma  target  bank     0x0020
pragma  target  page     0x0200
pragma  stack            2
pragma  code             2048
pragma  ID               0x800,4
pragma  data             0xA-0x1F,0x30-0x3F,0x50-0x5F,0x70-0x7F
pragma  shared           0xA-0xF
--
var volatile byte _pic_accum at 0xF      -- (compiler)
var volatile byte _pic_isr_w at 0xE      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0xFFF
const word   _FUSES                = 0xFFF
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0 }
var volatile byte   _ind                      at { 0x0 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2 }
var volatile byte   _pcl                      at { 0x2 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*3  STATUS_PA                 at STATUS : 5
var volatile bit    STATUS_PA0                at STATUS : 5
var volatile bit    STATUS_PA1                at STATUS : 6
var volatile bit    STATUS_PA2                at STATUS : 7
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _pa0                      =  5
const        byte   _pa1                      =  6
const        byte   _pa2                      =  7
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4 }
var volatile byte   _fsr                      at { 0x4 }
-- ------------------------------------------------
var volatile byte   PORTA_                    at { 0x5 }
--
var          byte   PORTA                     at PORTA_
var volatile byte   PORTA_shadow_             at 0xD
--
procedure PORTA'put(byte in x at PORTA_shadow_) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
procedure PORTA_low'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0xF0) | (x & 0x0F)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0x0F) | (x << 4)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    pin_A0                    at PORTA_ : 0
--
procedure pin_A0'put(bit in x at PORTA_shadow_ : 0) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    pin_A1                    at PORTA_ : 1
--
procedure pin_A1'put(bit in x at PORTA_shadow_ : 1) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    pin_A2                    at PORTA_ : 2
--
procedure pin_A2'put(bit in x at PORTA_shadow_ : 2) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA_ : 3
--
procedure pin_A3'put(bit in x at PORTA_shadow_ : 3) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    PORTA_T0CKI               at PORTA_ : 4
-- ------------------------------------------------
var volatile byte   PORTB_                    at { 0x6 }
--
var          byte   PORTB                     at PORTB_
var volatile byte   PORTB_shadow_             at 0xC
--
procedure PORTB'put(byte in x at PORTB_shadow_) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
procedure PORTB_low'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0xF0) | (x & 0x0F)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0x0F) | (x << 4)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    pin_B0                    at PORTB_ : 0
--
procedure pin_B0'put(bit in x at PORTB_shadow_ : 0) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    pin_B1                    at PORTB_ : 1
--
procedure pin_B1'put(bit in x at PORTB_shadow_ : 1) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    pin_B2                    at PORTB_ : 2
--
procedure pin_B2'put(bit in x at PORTB_shadow_ : 2) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    pin_B3                    at PORTB_ : 3
--
procedure pin_B3'put(bit in x at PORTB_shadow_ : 3) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    pin_B4                    at PORTB_ : 4
--
procedure pin_B4'put(bit in x at PORTB_shadow_ : 4) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    pin_B5                    at PORTB_ : 5
--
procedure pin_B5'put(bit in x at PORTB_shadow_ : 5) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    pin_B6                    at PORTB_ : 6
--
procedure pin_B6'put(bit in x at PORTB_shadow_ : 6) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    pin_B7                    at PORTB_ : 7
--
procedure pin_B7'put(bit in x at PORTB_shadow_ : 7) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTC_                    at { 0x7 }
--
var          byte   PORTC                     at PORTC_
var volatile byte   PORTC_shadow_             at 0xB
--
procedure PORTC'put(byte in x at PORTC_shadow_) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
procedure PORTC_low'put(byte in x) is
   PORTC_shadow_ = (PORTC_shadow_ & 0xF0) | (x & 0x0F)
   PORTC_ = PORTC_shadow_
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   PORTC_shadow_ = (PORTC_shadow_ & 0x0F) | (x << 4)
   PORTC_ = PORTC_shadow_
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    pin_C0                    at PORTC_ : 0
--
procedure pin_C0'put(bit in x at PORTC_shadow_ : 0) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    pin_C1                    at PORTC_ : 1
--
procedure pin_C1'put(bit in x at PORTC_shadow_ : 1) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC2                 at PORTC : 2
var volatile bit    pin_C2                    at PORTC_ : 2
--
procedure pin_C2'put(bit in x at PORTC_shadow_ : 2) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC3                 at PORTC : 3
var volatile bit    pin_C3                    at PORTC_ : 3
--
procedure pin_C3'put(bit in x at PORTC_shadow_ : 3) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    pin_C4                    at PORTC_ : 4
--
procedure pin_C4'put(bit in x at PORTC_shadow_ : 4) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    pin_C5                    at PORTC_ : 5
--
procedure pin_C5'put(bit in x at PORTC_shadow_ : 5) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC6                 at PORTC : 6
var volatile bit    pin_C6                    at PORTC_ : 6
--
procedure pin_C6'put(bit in x at PORTC_shadow_ : 6) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC7                 at PORTC : 7
var volatile bit    pin_C7                    at PORTC_ : 7
--
procedure pin_C7'put(bit in x at PORTC_shadow_ : 7) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTD_                    at { 0x8 }
--
var          byte   PORTD                     at PORTD_
var volatile byte   PORTD_shadow_             at 0xA
--
procedure PORTD'put(byte in x at PORTD_shadow_) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
procedure PORTD_low'put(byte in x) is
   PORTD_shadow_ = (PORTD_shadow_ & 0xF0) | (x & 0x0F)
   PORTD_ = PORTD_shadow_
end procedure
function PORTD_low'get() return byte is
   return (PORTD & 0x0F)
end function
--
procedure PORTD_high'put(byte in x) is
   PORTD_shadow_ = (PORTD_shadow_ & 0x0F) | (x << 4)
   PORTD_ = PORTD_shadow_
end procedure
function PORTD_high'get() return byte is
   return (PORTD >> 4)
end function
--
var volatile bit    PORTD_RD0                 at PORTD : 0
var volatile bit    pin_D0                    at PORTD_ : 0
--
procedure pin_D0'put(bit in x at PORTD_shadow_ : 0) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD1                 at PORTD : 1
var volatile bit    pin_D1                    at PORTD_ : 1
--
procedure pin_D1'put(bit in x at PORTD_shadow_ : 1) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD2                 at PORTD : 2
var volatile bit    pin_D2                    at PORTD_ : 2
--
procedure pin_D2'put(bit in x at PORTD_shadow_ : 2) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD3                 at PORTD : 3
var volatile bit    pin_D3                    at PORTD_ : 3
--
procedure pin_D3'put(bit in x at PORTD_shadow_ : 3) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD4                 at PORTD : 4
var volatile bit    pin_D4                    at PORTD_ : 4
--
procedure pin_D4'put(bit in x at PORTD_shadow_ : 4) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD5                 at PORTD : 5
var volatile bit    pin_D5                    at PORTD_ : 5
--
procedure pin_D5'put(bit in x at PORTD_shadow_ : 5) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD6                 at PORTD : 6
var volatile bit    pin_D6                    at PORTD_ : 6
--
procedure pin_D6'put(bit in x at PORTD_shadow_ : 6) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
var volatile bit    PORTD_RD7                 at PORTD : 7
var volatile bit    pin_D7                    at PORTD_ : 7
--
procedure pin_D7'put(bit in x at PORTD_shadow_ : 7) is
   pragma inline
   PORTD_ = PORTD_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTE_                    at { 0x9 }
--
var          byte   PORTE                     at PORTE_
var volatile byte  PORTE_shadow_            
--
procedure PORTE'put(byte in x at PORTE_shadow_) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
procedure PORTE_low'put(byte in x) is
   PORTE_shadow_ = (PORTE_shadow_ & 0xF0) | (x & 0x0F)
   PORTE_ = PORTE_shadow_
end procedure
function PORTE_low'get() return byte is
   return (PORTE & 0x0F)
end function
--
procedure PORTE_high'put(byte in x) is
   PORTE_shadow_ = (PORTE_shadow_ & 0x0F) | (x << 4)
   PORTE_ = PORTE_shadow_
end procedure
function PORTE_high'get() return byte is
   return (PORTE >> 4)
end function
--
var volatile bit    PORTE_RE4                 at PORTE : 4
var volatile bit    pin_E4                    at PORTE_ : 4
--
procedure pin_E4'put(bit in x at PORTE_shadow_ : 4) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
var volatile bit    PORTE_RE5                 at PORTE : 5
var volatile bit    pin_E5                    at PORTE_ : 5
--
procedure pin_E5'put(bit in x at PORTE_shadow_ : 5) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
var volatile bit    PORTE_RE6                 at PORTE : 6
var volatile bit    pin_E6                    at PORTE_ : 6
--
procedure pin_E6'put(bit in x at PORTE_shadow_ : 6) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
var volatile bit    PORTE_RE7                 at PORTE : 7
var volatile bit    pin_E7                    at PORTE_ : 7
--
procedure pin_E7'put(bit in x at PORTE_shadow_ : 7) is
   pragma inline
   PORTE_ = PORTE_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte  TRISA_shadow_             = 0b1111_1111
--
procedure PORTA_direction'put(byte in x at TRISA_shadow_) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA_shadow_ = (TRISA_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA_shadow_ = (TRISA_shadow_ & 0x0F) | (x << 4)
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A0_direction'put(bit in x at TRISA_shadow_: 0) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A1_direction'put(bit in x at TRISA_shadow_: 1) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A2_direction'put(bit in x at TRISA_shadow_: 2) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A3_direction'put(bit in x at TRISA_shadow_: 3) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A4_direction'put(bit in x at TRISA_shadow_: 4) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
-- ------------------------------------------------
var volatile byte  TRISB_shadow_             = 0b1111_1111
--
procedure PORTB_direction'put(byte in x at TRISB_shadow_) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB_shadow_ = (TRISB_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB_shadow_ = (TRISB_shadow_ & 0x0F) | (x << 4)
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B0_direction'put(bit in x at TRISB_shadow_: 0) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B1_direction'put(bit in x at TRISB_shadow_: 1) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B2_direction'put(bit in x at TRISB_shadow_: 2) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B3_direction'put(bit in x at TRISB_shadow_: 3) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B4_direction'put(bit in x at TRISB_shadow_: 4) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B5_direction'put(bit in x at TRISB_shadow_: 5) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B6_direction'put(bit in x at TRISB_shadow_: 6) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B7_direction'put(bit in x at TRISB_shadow_: 7) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
-- ------------------------------------------------
var volatile byte  TRISC_shadow_             = 0b1111_1111
--
procedure PORTC_direction'put(byte in x at TRISC_shadow_) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC_shadow_ = (TRISC_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC_shadow_ = (TRISC_shadow_ & 0x0F) | (x << 4)
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C0_direction'put(bit in x at TRISC_shadow_: 0) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C1_direction'put(bit in x at TRISC_shadow_: 1) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C2_direction'put(bit in x at TRISC_shadow_: 2) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C3_direction'put(bit in x at TRISC_shadow_: 3) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C4_direction'put(bit in x at TRISC_shadow_: 4) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C5_direction'put(bit in x at TRISC_shadow_: 5) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C6_direction'put(bit in x at TRISC_shadow_: 6) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C7_direction'put(bit in x at TRISC_shadow_: 7) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
-- ------------------------------------------------
var volatile byte  OPTION_REG_shadow_        = 0b1111_1111
--
procedure OPTION_REG'put(byte in x at OPTION_REG_shadow_) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS'put(bit*3 in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0PS                is OPTION_REG_PS
--
procedure OPTION_REG_PSA'put(bit in x at OPTION_REG_shadow_: 3) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_PSA                 is OPTION_REG_PSA
--
procedure OPTION_REG_T0SE'put(bit in x at OPTION_REG_shadow_: 4) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0SE                is OPTION_REG_T0SE
--
procedure OPTION_REG_T0CS'put(bit in x at OPTION_REG_shadow_: 5) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0CS                is OPTION_REG_T0CS
--
procedure OPTION_REG_PS0'put(bit in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS1'put(bit in x at OPTION_REG_shadow_: 1) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS2'put(bit in x at OPTION_REG_shadow_: 2) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
-- ------------------------------------------------
var volatile byte  TRISD_shadow_             = 0b1111_1111
--
procedure PORTD_direction'put(byte in x at TRISD_shadow_) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure PORTD_low_direction'put(byte in x) is
   TRISD_shadow_ = (TRISD_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure PORTD_high_direction'put(byte in x) is
   TRISD_shadow_ = (TRISD_shadow_ & 0x0F) | (x << 4)
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D0_direction'put(bit in x at TRISD_shadow_: 0) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D1_direction'put(bit in x at TRISD_shadow_: 1) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D2_direction'put(bit in x at TRISD_shadow_: 2) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D3_direction'put(bit in x at TRISD_shadow_: 3) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D4_direction'put(bit in x at TRISD_shadow_: 4) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D5_direction'put(bit in x at TRISD_shadow_: 5) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D6_direction'put(bit in x at TRISD_shadow_: 6) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
procedure pin_D7_direction'put(bit in x at TRISD_shadow_: 7) is
   pragma inline
   asm movf TRISD_shadow_,W
   asm tris 8
end procedure
--
-- ------------------------------------------------
var volatile byte  TRISE_shadow_             = 0b1111_1111
--
procedure PORTE_direction'put(byte in x at TRISE_shadow_) is
   pragma inline
   asm movf TRISE_shadow_,W
   asm tris 9
end procedure
--
procedure PORTE_low_direction'put(byte in x) is
   TRISE_shadow_ = (TRISE_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISE_shadow_,W
   asm tris 9
end procedure
--
procedure PORTE_high_direction'put(byte in x) is
   TRISE_shadow_ = (TRISE_shadow_ & 0x0F) | (x << 4)
   asm movf TRISE_shadow_,W
   asm tris 9
end procedure
--
procedure pin_E4_direction'put(bit in x at TRISE_shadow_: 4) is
   pragma inline
   asm movf TRISE_shadow_,W
   asm tris 9
end procedure
--
procedure pin_E5_direction'put(bit in x at TRISE_shadow_: 5) is
   pragma inline
   asm movf TRISE_shadow_,W
   asm tris 9
end procedure
--
procedure pin_E6_direction'put(bit in x at TRISE_shadow_: 6) is
   pragma inline
   asm movf TRISE_shadow_,W
   asm tris 9
end procedure
--
procedure pin_E7_direction'put(bit in x at TRISE_shadow_: 7) is
   pragma inline
   asm movf TRISE_shadow_,W
   asm tris 9
end procedure
--
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 0
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   OPTION_REG_T0CS = OFF        -- T0CKI pin input + output
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- No free shared memory!
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0xFFF)
--
pragma fuse_def OSC 0x3 {                -- Oscillator selection bits
       RC_CLKOUT = 0x3                   -- RC oscillator
       HS = 0x2                          -- HS oscillator
       XT = 0x1                          -- XT oscillator
       LP = 0x0                          -- LP oscillator
       }
pragma fuse_def WDT 0x4 {                -- Watchdog timer enable bit
       ENABLED = 0x4                     -- WDT enabled
       DISABLED = 0x0                    -- WDT disabled
       }
pragma fuse_def CP 0x8 {                 -- Code protection bit
       DISABLED = 0x8                    -- Code protection off
       ENABLED = 0x0                     -- Code protection on
       }
--

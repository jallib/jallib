-- ------------------------------------------------
-- Title: JalV2 device include file for 12f635
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic12f635, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC12F635.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:14 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x0FA0            -- ID for PIC programmer
const  word  CHIP_ID     = 0xF635            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "12F635"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_14       -- (banks=4)
pragma  target  chip     12F635
pragma  target  bank     0x0080
pragma  target  page     0x0800
pragma  stack            8
pragma  code             1024
pragma  eeprom           0x2100,128
pragma  ID               0x2000,4
pragma  data             0x40-0x7F
pragma  shared           0x70-0x7F
--
var volatile byte _pic_accum at 0x7F      -- (compiler)
var volatile byte _pic_isr_w at 0x7E      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0x2007
const word   _FUSES                = 0x3FFF
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x80,0x100,0x180 }
var volatile byte   _ind                      at { 0x0,0x80,0x100,0x180 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x101 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x82,0x102,0x182 }
var volatile byte   _pcl                      at { 0x2,0x82,0x102,0x182 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x83,0x103,0x183 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit*2  STATUS_RP                 at STATUS : 5
var volatile bit    STATUS_IRP                at STATUS : 7
var volatile bit    STATUS_RP0                at STATUS : 5
var volatile bit    STATUS_RP1                at STATUS : 6
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3,0x83,0x103,0x183 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _irp                      =  7
const        byte   _rp0                      =  5
const        byte   _rp1                      =  6
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x84,0x104,0x184 }
var volatile byte   _fsr                      at { 0x4,0x84,0x104,0x184 }
-- ------------------------------------------------
var volatile byte   GPIO_                     at { 0x5,0x105 }
alias               PORTA_                    is GPIO_
--
var          byte   PORTA                     at PORTA_
var volatile byte   PORTA_shadow_             at 0x7D
--
procedure PORTA'put(byte in x at PORTA_shadow_) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
procedure PORTA_low'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0xF0) | (x & 0x0F)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0x0F) | (x << 4)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    GPIO_GP0                  at GPIO_ : 0
var volatile bit    pin_A0                    at GPIO_ : 0
alias               pin_GP0                   is pin_A0
alias               pin_C1IN_POS              is pin_A0
alias               pin_ULPWU                 is pin_A0
--
procedure pin_A0'put(bit in x at PORTA_shadow_ : 0) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP1                  at GPIO_ : 1
var volatile bit    pin_A1                    at GPIO_ : 1
alias               pin_GP1                   is pin_A1
alias               pin_C1IN_NEG              is pin_A1
--
procedure pin_A1'put(bit in x at PORTA_shadow_ : 1) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP2                  at GPIO_ : 2
var volatile bit    pin_A2                    at GPIO_ : 2
alias               pin_GP2                   is pin_A2
alias               pin_T0CKI                 is pin_A2
alias               pin_C1OUT                 is pin_A2
--
procedure pin_A2'put(bit in x at PORTA_shadow_ : 2) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP3                  at GPIO_ : 3
var volatile bit    pin_A3                    at GPIO_ : 3
alias               pin_GP3                   is pin_A3
--
procedure pin_A3'put(bit in x at PORTA_shadow_ : 3) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP4                  at GPIO_ : 4
var volatile bit    pin_A4                    at GPIO_ : 4
alias               pin_GP4                   is pin_A4
alias               pin_T1G                   is pin_A4
alias               pin_OSC2                  is pin_A4
alias               pin_CLKOUT                is pin_A4
--
procedure pin_A4'put(bit in x at PORTA_shadow_ : 4) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP5                  at GPIO_ : 5
var volatile bit    pin_A5                    at GPIO_ : 5
alias               pin_GP5                   is pin_A5
alias               pin_T1CKI                 is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at PORTA_shadow_ : 5) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_RA0                  at GPIO_ : 0
var volatile bit    GPIO_RA1                  at GPIO_ : 1
var volatile bit    GPIO_RA2                  at GPIO_ : 2
var volatile bit    GPIO_RA3                  at GPIO_ : 3
var volatile bit    GPIO_RA4                  at GPIO_ : 4
var volatile bit    GPIO_RA5                  at GPIO_ : 5
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xA,0x8A,0x10A }
var volatile bit*5  PCLATH_PCLATH             at PCLATH : 0
var volatile byte   _pclath                   at { 0xA,0x8A,0x10A }
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xB,0x8B,0x10B,0x18B }
var volatile bit    INTCON_RAIF               at INTCON : 0
var volatile bit    INTCON_INTF               at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
alias               INTCON_TMR0IF             is INTCON_T0IF
var volatile bit    INTCON_RAIE               at INTCON : 3
var volatile bit    INTCON_INTE               at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
alias               INTCON_TMR0IE             is INTCON_T0IE
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xC }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_OSFIF                at PIR1 : 2
var volatile bit    PIR1_C1IF                 at PIR1 : 3
var volatile bit    PIR1_CRIF                 at PIR1 : 5
var volatile bit    PIR1_LVDIF                at PIR1 : 6
var volatile bit    PIR1_EEIF                 at PIR1 : 7
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xF }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x10 }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
alias               T1CON_T1SYNC              is T1CON_NT1SYNC
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_TMR1GE              at T1CON : 6
var volatile bit    T1CON_T1GINV              at T1CON : 7
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0x18 }
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
var volatile bit*4  WDTCON_WDTPS              at WDTCON : 1
var volatile bit    WDTCON_WDTPS0             at WDTCON : 1
var volatile bit    WDTCON_WDTPS1             at WDTCON : 2
var volatile bit    WDTCON_WDTPS2             at WDTCON : 3
var volatile bit    WDTCON_WDTPS3             at WDTCON : 4
-- ------------------------------------------------
var volatile byte   CMCON0                    at { 0x19 }
var volatile bit*3  CMCON0_CM                 at CMCON0 : 0
var volatile bit    CMCON0_CIS                at CMCON0 : 3
var volatile bit    CMCON0_CINV               at CMCON0 : 4
var volatile bit    CMCON0_COUT               at CMCON0 : 6
var volatile bit    CMCON0_CM0                at CMCON0 : 0
var volatile bit    CMCON0_CM1                at CMCON0 : 1
var volatile bit    CMCON0_CM2                at CMCON0 : 2
var volatile bit    CMCON0_C1OUT              at CMCON0 : 6
var volatile bit    CMCON0_C1INV              at CMCON0 : 4
-- ------------------------------------------------
var volatile byte   CMCON1                    at { 0x1A }
var volatile bit    CMCON1_CMSYNC             at CMCON1 : 0
var volatile bit    CMCON1_T1GSS              at CMCON1 : 1
var volatile bit    CMCON1_C1SYNC             at CMCON1 : 0
-- ------------------------------------------------
var volatile byte   OPTION_REG                at { 0x81,0x181 }
var volatile bit*3  OPTION_REG_PS             at OPTION_REG : 0
var volatile bit    OPTION_REG_PSA            at OPTION_REG : 3
alias               T0CON_PSA                 is OPTION_REG_PSA
var volatile bit    OPTION_REG_T0SE           at OPTION_REG : 4
alias               T0CON_T0SE                is OPTION_REG_T0SE
var volatile bit    OPTION_REG_T0CS           at OPTION_REG : 5
alias               T0CON_T0CS                is OPTION_REG_T0CS
var volatile bit    OPTION_REG_INTEDG         at OPTION_REG : 6
var volatile bit    OPTION_REG_NRAPU          at OPTION_REG : 7
var volatile bit    OPTION_REG_PS0            at OPTION_REG : 0
var volatile bit    OPTION_REG_PS1            at OPTION_REG : 1
var volatile bit    OPTION_REG_PS2            at OPTION_REG : 2
alias               T0CON_T0PS                is OPTION_REG_PS
-- ------------------------------------------------
var volatile byte   TRISIO                    at { 0x85,0x185 }
alias               TRISA                     is TRISIO
alias               PORTA_direction           is TRISIO
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISIO_TRISIO0            at TRISIO : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_GP0_direction         is pin_A0_direction
alias               pin_C1IN_POS_direction    is pin_A0_direction
alias               pin_ULPWU_direction       is pin_A0_direction
--
var volatile bit    TRISIO_TRISIO1            at TRISIO : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_GP1_direction         is pin_A1_direction
alias               pin_C1IN_NEG_direction    is pin_A1_direction
--
var volatile bit    TRISIO_TRISIO2            at TRISIO : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_GP2_direction         is pin_A2_direction
alias               pin_T0CKI_direction       is pin_A2_direction
alias               pin_C1OUT_direction       is pin_A2_direction
--
var volatile bit    TRISIO_TRISIO3            at TRISIO : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_GP3_direction         is pin_A3_direction
--
var volatile bit    TRISIO_TRISIO4            at TRISIO : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_GP4_direction         is pin_A4_direction
alias               pin_T1G_direction         is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_CLKOUT_direction      is pin_A4_direction
--
var volatile bit    TRISIO_TRISIO5            at TRISIO : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_GP5_direction         is pin_A5_direction
alias               pin_T1CKI_direction       is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
var volatile bit    TRISIO_TRISA0             at TRISIO : 0
--
var volatile bit    TRISIO_TRISA1             at TRISIO : 1
--
var volatile bit    TRISIO_TRISA2             at TRISIO : 2
--
var volatile bit    TRISIO_TRISA3             at TRISIO : 3
--
var volatile bit    TRISIO_TRISA4             at TRISIO : 4
--
var volatile bit    TRISIO_TRISA5             at TRISIO : 5
--
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x8C }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_OSFIE                at PIE1 : 2
var volatile bit    PIE1_C1IE                 at PIE1 : 3
var volatile bit    PIE1_CRIE                 at PIE1 : 5
var volatile bit    PIE1_LVDIE                at PIE1 : 6
var volatile bit    PIE1_EEIE                 at PIE1 : 7
-- ------------------------------------------------
var volatile byte   PCON                      at { 0x8E }
var volatile bit    PCON_NBOR                 at PCON : 0
var volatile bit    PCON_NPOR                 at PCON : 1
var volatile bit    PCON_NWUR                 at PCON : 3
var volatile bit    PCON_SBOREN               at PCON : 4
var volatile bit    PCON_ULPWUE               at PCON : 5
var volatile bit    PCON_NBOD                 at PCON : 0
var volatile bit    PCON_SBODEN               at PCON : 4
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0x8F }
var volatile bit    OSCCON_SCS                at OSCCON : 0
var volatile bit    OSCCON_LTS                at OSCCON : 1
var volatile bit    OSCCON_HTS                at OSCCON : 2
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_IRCF0              at OSCCON : 4
var volatile bit    OSCCON_IRCF1              at OSCCON : 5
var volatile bit    OSCCON_IRCF2              at OSCCON : 6
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x90 }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN0              at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN1              at OSCTUNE : 1
var volatile bit    OSCTUNE_TUN2              at OSCTUNE : 2
var volatile bit    OSCTUNE_TUN3              at OSCTUNE : 3
var volatile bit    OSCTUNE_TUN4              at OSCTUNE : 4
-- ------------------------------------------------
var volatile byte   LVDCON                    at { 0x94 }
var volatile bit*3  LVDCON_LVDL               at LVDCON : 0
var volatile bit    LVDCON_LVDEN              at LVDCON : 4
var volatile bit    LVDCON_IRVST              at LVDCON : 5
var volatile bit    LVDCON_LVDL0              at LVDCON : 0
var volatile bit    LVDCON_LVDL1              at LVDCON : 1
var volatile bit    LVDCON_LVDL2              at LVDCON : 2
var volatile bit    LVDCON_PLVDEN             at LVDCON : 4
-- ------------------------------------------------
var volatile byte   WPUDA                     at { 0x95 }
var volatile bit    WPUDA_WPUDA0              at WPUDA : 0
var volatile bit    WPUDA_WPUDA1              at WPUDA : 1
var volatile bit    WPUDA_WPUDA2              at WPUDA : 2
var volatile bit    WPUDA_WPUDA4              at WPUDA : 4
var volatile bit    WPUDA_WPUDA5              at WPUDA : 5
-- ------------------------------------------------
var volatile byte   IOCA                      at { 0x96 }
var volatile bit    IOCA_IOCA0                at IOCA : 0
var volatile bit    IOCA_IOCA1                at IOCA : 1
var volatile bit    IOCA_IOCA2                at IOCA : 2
var volatile bit    IOCA_IOCA3                at IOCA : 3
var volatile bit    IOCA_IOCA4                at IOCA : 4
var volatile bit    IOCA_IOCA5                at IOCA : 5
-- ------------------------------------------------
var volatile byte   WDA                       at { 0x97 }
var volatile bit    WDA_WDA0                  at WDA : 0
var volatile bit    WDA_WDA1                  at WDA : 1
var volatile bit    WDA_WDA2                  at WDA : 2
var volatile bit    WDA_WDA4                  at WDA : 4
var volatile bit    WDA_WDA5                  at WDA : 5
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0x99 }
var volatile bit*4  VRCON_VR                  at VRCON : 0
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit    VRCON_VREN                at VRCON : 7
var volatile bit    VRCON_VR0                 at VRCON : 0
var volatile bit    VRCON_VR1                 at VRCON : 1
var volatile bit    VRCON_VR2                 at VRCON : 2
var volatile bit    VRCON_VR3                 at VRCON : 3
-- ------------------------------------------------
var volatile byte   EEDAT                     at { 0x9A }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x9B }
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0x9C }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0x9D }
-- ------------------------------------------------
var volatile byte   CRCON                     at { 0x110 }
var volatile bit*2  CRCON_CRREG               at CRCON : 0
var volatile bit    CRCON_ENC_NDEC            at CRCON : 6
var volatile bit    CRCON_GO_NDONE            at CRCON : 7
var volatile bit    CRCON_CRREG0              at CRCON : 0
var volatile bit    CRCON_CRREG1              at CRCON : 1
var volatile bit    CRCON_ENC_DEC             at CRCON : 6
var volatile bit    CRCON_GO                  at CRCON : 7
-- ------------------------------------------------
var volatile byte   CRDAT0                    at { 0x111 }
-- ------------------------------------------------
var volatile byte   CRDAT1                    at { 0x112 }
-- ------------------------------------------------
var volatile byte   CRDAT2                    at { 0x113 }
-- ------------------------------------------------
var volatile byte   CRDAT3                    at { 0x114 }
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 0
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CMCON0 = 0b0000_0111
   CMCON1 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   comparator_off()
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0x70-0x7C
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0x2007)
--
pragma fuse_def OSC 0x7 {                -- Oscillator Selection bits
       RC_CLKOUT = 0x7                   -- RC oscillator: CLKOUT function on RA4/T1G/OSC2/CLKOUT pin, RC on RA5/T1CKI/OSC1/CLKIN
       RC_NOCLKOUT = 0x6                 -- RCIO oscillator: I/O function on RA4/T1G/OSC2/CLKOUT pin, RC on RA5/T1CKI/OSC1/CLKIN
       INTOSC_CLKOUT = 0x5               -- INTOSC oscillator: CLKOUT function on RA4/T1G/OSC2/CLKOUT pin, I/O function on RA5/T1CKI/OSC1/CLKIN
       INTOSC_NOCLKOUT = 0x4             -- INTOSCIO oscillator: I/O function on RA4/T1G/OSC2/CLKOUT pin, I/O function on RA5/T1CKI/OSC1/CLKIN
       EC_NOCLKOUT = 0x3                 -- EC: I/O function on RA4/T1G/OSC2/CLKOUT, CLKIN on RA5/T1CKI/OSC1/CLKIN
       HS = 0x2                          -- HS oscillator: High-speed crystal/resonator on RA5/T1CKI/OSC1/CLKIN and RA4/T1G/OSC2/CLKOUT
       XT = 0x1                          -- XT oscillator: Crystal/resonator on RA5/T1CKI/OSC1/CLKIN and RA4/T1G/OSC2/CLKOUT
       LP = 0x0                          -- LP oscillator: Low-power crystal on RA5/T1CKI/OSC1/CLKIN and RA4/T1G/OSC2/CLKOUT
       }
pragma fuse_def WDT 0x8 {                -- Watchdog Timer Enable bit
       ENABLED = 0x8                     -- WDT enabled
       CONTROL = 0x0                     -- WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
       }
pragma fuse_def PWRTE 0x10 {             -- Power-up Timer Enable bit
       DISABLED = 0x10                   -- PWRT disabled
       ENABLED = 0x0                     -- PWRT enabled
       }
pragma fuse_def MCLR 0x20 {              -- MCLR pin function select bit
       EXTERNAL = 0x20                   -- MCLR pin is MCLR function and weak internal pull-up is enabled
       INTERNAL = 0x0                    -- MCLR pin function is alternate function, MCLR function is internally disabled
       }
pragma fuse_def CP 0x40 {                -- Code Protection bit
       DISABLED = 0x40                   -- Program memory is not code protected
       ENABLED = 0x0                     -- Program memory is external read and write-protected
       }
pragma fuse_def CPD 0x80 {               -- Data Code Protection bit
       DISABLED = 0x80                   -- Data memory is not code protected
       ENABLED = 0x0                     -- Data memory is external read protected
       }
pragma fuse_def BROWNOUT 0x300 {         -- Brown-out Reset Selection bits
       ENABLED = 0x300                   -- BOD enabled and SBOdEN bit disabled
       RUNONLY = 0x200                   -- BOD enabled while running and disabled in Sleep. SBODEN bit disabled.
       CONTROL = 0x100                   -- SBODEN controls BOD function
       DISABLED = 0x0                    -- BOD and SBODEN disabled
       }
pragma fuse_def IESO 0x400 {             -- Internal-External Switchover bit
       ENABLED = 0x400                   -- Internal External Switchover mode enabled
       DISABLED = 0x0                    -- Internal External Switchover mode disabled
       }
pragma fuse_def FCMEN 0x800 {            -- Fail-Safe Clock Monitor Enable bit
       ENABLED = 0x800                   -- Fail-Safe Clock Monitor enabled
       DISABLED = 0x0                    -- Fail-Safe Clock Monitor disabled
       }
pragma fuse_def WURE 0x1000 {            -- Wake-Up Reset Enable bit
       CONTINUE = 0x1000                 -- Standard wake-up and continue enabled
       RESET = 0x0                       -- Wake-up and Reset enabled
       }
--

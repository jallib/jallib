-- ------------------------------------------------
-- Title: JalV2 device include file for 18f1230
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic18f1230, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures to force the use of the LATx register
--      for output when PORTx or pin_xy is addressed.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC18F1230.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:18 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x1E00            -- ID for PIC programmer
const  word  CHIP_ID     = 0x1230            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "18F1230"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_16       -- (banks=16)
pragma  target  chip     18F1230
pragma  target  bank     0x0100
pragma  stack            31
pragma  code             4096
pragma  eeprom           0xF00000,128
pragma  ID               0x200000,8
pragma  data             0x0-0xFF
pragma  shared           0x0-0x7F,0xF80-0xFFF
--
var volatile byte _pic_accum at 0x0      -- (compiler)
--
const word   _FUSES_CT             = 14
const byte*3 _FUSE_BASE[_FUSES_CT] = {
                                       0x300000,
                                       0x300001,
                                       0x300002,
                                       0x300003,
                                       0x300004,
                                       0x300005,
                                       0x300006,
                                       0x300007,
                                       0x300008,
                                       0x300009,
                                       0x30000A,
                                       0x30000B,
                                       0x30000C,
                                       0x30000D 
                                     }
const byte   _FUSES[_FUSES_CT]     = {
                                       0xFF,     -- RESERVED
                                       0x07,     -- CONFIG1H
                                       0x1F,     -- CONFIG2L
                                       0x1F,     -- CONFIG2H
                                       0x0E,     -- CONFIG3L
                                       0x81,     -- CONFIG3H
                                       0x81,     -- CONFIG4L
                                       0xFF,     -- RESERVED
                                       0x03,     -- CONFIG5L
                                       0xC0,     -- CONFIG5H
                                       0x03,     -- CONFIG6L
                                       0xE0,     -- CONFIG6H
                                       0x03,     -- CONFIG7L
                                       0x40      -- CONFIG7H
                                     }
--
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0xF80 }
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    PORTA_RA5                 at PORTA : 5
var volatile bit    PORTA_RA6                 at PORTA : 6
var volatile bit    PORTA_RA7                 at PORTA : 7
var volatile bit    PORTA_AN0                 at PORTA : 0
var volatile bit    PORTA_AN1                 at PORTA : 1
var volatile bit    PORTA_TX                  at PORTA : 2
var volatile bit    PORTA_RX                  at PORTA : 3
var volatile bit    PORTA_AN2                 at PORTA : 4
var volatile bit    PORTA_MCLR                at PORTA : 5
var volatile bit    PORTA_OSC2                at PORTA : 6
var volatile bit    PORTA_OSC1                at PORTA : 7
var volatile bit    PORTA_INT0                at PORTA : 0
var volatile bit    PORTA_INT1                at PORTA : 1
var volatile bit    PORTA_CK                  at PORTA : 2
var volatile bit    PORTA_DT                  at PORTA : 3
var volatile bit    PORTA_T0CKI               at PORTA : 4
var volatile bit    PORTA_CLKO                at PORTA : 6
var volatile bit    PORTA_CLKI                at PORTA : 7
var volatile bit    PORTA_KBI0                at PORTA : 0
var volatile bit    PORTA_KBI1                at PORTA : 1
var volatile bit    PORTA_VREFP               at PORTA : 4
var volatile bit    PORTA_T1OSO               at PORTA : 6
var volatile bit    PORTA_T1OSI               at PORTA : 7
var volatile bit    PORTA_CMP0                at PORTA : 0
var volatile bit    PORTA_AN3                 at PORTA : 6
var volatile bit    PORTA_T1CKI               at PORTA : 6
var volatile bit    PORTA_ULPWUIN             at PORTA : 0
var volatile bit    PORTA_LVDIN               at PORTA : 5
var volatile bit    PORTA_RJPU                at PORTA : 7
-- ------------------------------------------------
var volatile byte   PORTB                     at { 0xF81 }
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    PORTB_RB6                 at PORTB : 6
var volatile bit    PORTB_RB7                 at PORTB : 7
var volatile bit    PORTB_PWM0                at PORTB : 0
var volatile bit    PORTB_PWM1                at PORTB : 1
var volatile bit    PORTB_INT2                at PORTB : 2
var volatile bit    PORTB_INT3                at PORTB : 3
var volatile bit    PORTB_PWM2                at PORTB : 4
var volatile bit    PORTB_PWM3                at PORTB : 5
var volatile bit    PORTB_PWM4                at PORTB : 6
var volatile bit    PORTB_PWM5                at PORTB : 7
var volatile bit    PORTB_KBI2                at PORTB : 2
var volatile bit    PORTB_KBI3                at PORTB : 3
var volatile bit    PORTB_PGC                 at PORTB : 6
var volatile bit    PORTB_PGD                 at PORTB : 7
var volatile bit    PORTB_CMP2                at PORTB : 2
var volatile bit    PORTB_CMP1                at PORTB : 3
var volatile bit    PORTB_T1OSO               at PORTB : 2
var volatile bit    PORTB_T1OSI               at PORTB : 3
var volatile bit    PORTB_T1CKI               at PORTB : 2
var volatile bit    PORTB_CCP2_PA2            at PORTB : 3
-- ------------------------------------------------
var volatile byte   OVDCONS                   at { 0xF82 }
var volatile bit*6  OVDCONS_POUT              at OVDCONS : 0
var volatile bit    OVDCONS_POUT0             at OVDCONS : 0
var volatile bit    OVDCONS_POUT1             at OVDCONS : 1
var volatile bit    OVDCONS_POUT2             at OVDCONS : 2
var volatile bit    OVDCONS_POUT3             at OVDCONS : 3
var volatile bit    OVDCONS_POUT4             at OVDCONS : 4
var volatile bit    OVDCONS_POUT5             at OVDCONS : 5
-- ------------------------------------------------
var volatile byte   OVDCOND                   at { 0xF83 }
var volatile bit*6  OVDCOND_POVD              at OVDCOND : 0
var volatile bit    OVDCOND_POVD0             at OVDCOND : 0
var volatile bit    OVDCOND_POVD1             at OVDCOND : 1
var volatile bit    OVDCOND_POVD2             at OVDCOND : 2
var volatile bit    OVDCOND_POVD3             at OVDCOND : 3
var volatile bit    OVDCOND_POVD4             at OVDCOND : 4
var volatile bit    OVDCOND_POVD5             at OVDCOND : 5
-- ------------------------------------------------
var volatile byte   DTCON                     at { 0xF84 }
var volatile bit*6  DTCON_DTA                 at DTCON : 0
var volatile bit*2  DTCON_DTAPS               at DTCON : 6
var volatile bit    DTCON_DT0                 at DTCON : 0
var volatile bit    DTCON_DT1                 at DTCON : 1
var volatile bit    DTCON_DT2                 at DTCON : 2
var volatile bit    DTCON_DT3                 at DTCON : 3
var volatile bit    DTCON_DT4                 at DTCON : 4
var volatile bit    DTCON_DT5                 at DTCON : 5
var volatile bit    DTCON_DTPS0               at DTCON : 6
var volatile bit    DTCON_DTPS1               at DTCON : 7
-- ------------------------------------------------
var volatile byte   PWMCON1                   at { 0xF85 }
var volatile bit    PWMCON1_OSYNC             at PWMCON1 : 0
var volatile bit    PWMCON1_UDIS              at PWMCON1 : 1
var volatile bit    PWMCON1_SEVTDIR           at PWMCON1 : 3
var volatile bit*4  PWMCON1_SEVOPS            at PWMCON1 : 4
var volatile bit    PWMCON1_SEVOPS0           at PWMCON1 : 4
var volatile bit    PWMCON1_SEVOPS1           at PWMCON1 : 5
var volatile bit    PWMCON1_SEVOPS2           at PWMCON1 : 6
var volatile bit    PWMCON1_SEVOPS3           at PWMCON1 : 7
-- ------------------------------------------------
var volatile byte   PWMCON0                   at { 0xF86 }
var volatile bit*3  PWMCON0_PMOD              at PWMCON0 : 0
var volatile bit*3  PWMCON0_PWMEN             at PWMCON0 : 4
var volatile bit    PWMCON0_PMOD0             at PWMCON0 : 0
var volatile bit    PWMCON0_PMOD1             at PWMCON0 : 1
var volatile bit    PWMCON0_PMOD2             at PWMCON0 : 2
var volatile bit    PWMCON0_PWMEN0            at PWMCON0 : 4
var volatile bit    PWMCON0_PWMEN1            at PWMCON0 : 5
var volatile bit    PWMCON0_PWMEN2            at PWMCON0 : 6
-- ------------------------------------------------
var volatile byte   SEVTCMPH                  at { 0xF87 }
var volatile bit*4  SEVTCMPH_SEVTCMPH         at SEVTCMPH : 0
-- ------------------------------------------------
var volatile byte   SEVTCMPL                  at { 0xF88 }
-- ------------------------------------------------
var volatile byte   LATA                      at { 0xF89 }
--
procedure PORTA'put(byte in x at LATA) is
   pragma inline
end procedure
--
procedure PORTA_low'put(byte in x) is
   LATA = (LATA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   LATA = (LATA & 0x0F) | (x << 4)
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    LATA_LATA0                at LATA : 0
var volatile bit    pin_A0                    at PORTA : 0
alias               pin_AN0                   is pin_A0
alias               pin_KBI0                  is pin_A0
alias               pin_CMP0                  is pin_A0
--
procedure pin_A0'put(bit in x at LATA : 0) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA1                at LATA : 1
var volatile bit    pin_A1                    at PORTA : 1
alias               pin_AN1                   is pin_A1
alias               pin_KBI1                  is pin_A1
--
procedure pin_A1'put(bit in x at LATA : 1) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA2                at LATA : 2
var volatile bit    pin_A2                    at PORTA : 2
alias               pin_TX                    is pin_A2
alias               pin_CK                    is pin_A2
--
procedure pin_A2'put(bit in x at LATA : 2) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA3                at LATA : 3
var volatile bit    pin_A3                    at PORTA : 3
alias               pin_RX                    is pin_A3
alias               pin_DT                    is pin_A3
--
procedure pin_A3'put(bit in x at LATA : 3) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA4                at LATA : 4
var volatile bit    pin_A4                    at PORTA : 4
alias               pin_T0CKI                 is pin_A4
alias               pin_AN2                   is pin_A4
alias               pin_VREF_POS              is pin_A4
--
procedure pin_A4'put(bit in x at LATA : 4) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA5                at LATA : 5
var volatile bit    pin_A5                    at PORTA : 5
alias               pin_FLTA_RA5              is pin_A5
--
procedure pin_A5'put(bit in x at LATA : 5) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA6                at LATA : 6
var volatile bit    pin_A6                    at PORTA : 6
alias               pin_OSC2                  is pin_A6
alias               pin_CLKO                  is pin_A6
alias               pin_T1OSO_RA6             is pin_A6
alias               pin_T1CKI_RA6             is pin_A6
alias               pin_AN3                   is pin_A6
--
procedure pin_A6'put(bit in x at LATA : 6) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA7                at LATA : 7
var volatile bit    pin_A7                    at PORTA : 7
alias               pin_OSC1                  is pin_A7
alias               pin_CLKI                  is pin_A7
alias               pin_T1OSI_RA7             is pin_A7
alias               pin_FLTA_RA7              is pin_A7
--
procedure pin_A7'put(bit in x at LATA : 7) is
   pragma inline
end procedure
--
var volatile bit    LATA_LA0                  at LATA : 0
var volatile bit    LATA_LA1                  at LATA : 1
var volatile bit    LATA_LA2                  at LATA : 2
var volatile bit    LATA_LA3                  at LATA : 3
var volatile bit    LATA_LA4                  at LATA : 4
var volatile bit    LATA_LA5                  at LATA : 5
var volatile bit    LATA_LA6                  at LATA : 6
var volatile bit    LATA_LA7                  at LATA : 7
-- ------------------------------------------------
var volatile byte   LATB                      at { 0xF8A }
--
procedure PORTB'put(byte in x at LATB) is
   pragma inline
end procedure
--
procedure PORTB_low'put(byte in x) is
   LATB = (LATB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   LATB = (LATB & 0x0F) | (x << 4)
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit    LATB_LATB0                at LATB : 0
var volatile bit    pin_B0                    at PORTB : 0
alias               pin_PWM0                  is pin_B0
--
procedure pin_B0'put(bit in x at LATB : 0) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB1                at LATB : 1
var volatile bit    pin_B1                    at PORTB : 1
alias               pin_PWM1                  is pin_B1
--
procedure pin_B1'put(bit in x at LATB : 1) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB2                at LATB : 2
var volatile bit    pin_B2                    at PORTB : 2
alias               pin_KBI2                  is pin_B2
alias               pin_CMP2                  is pin_B2
alias               pin_T1OSO_RB2             is pin_B2
alias               pin_T1CKI_RB2             is pin_B2
--
procedure pin_B2'put(bit in x at LATB : 2) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB3                at LATB : 3
var volatile bit    pin_B3                    at PORTB : 3
alias               pin_KBI3                  is pin_B3
alias               pin_CMP1                  is pin_B3
alias               pin_T1OSI_RB3             is pin_B3
--
procedure pin_B3'put(bit in x at LATB : 3) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB4                at LATB : 4
var volatile bit    pin_B4                    at PORTB : 4
alias               pin_PWM2                  is pin_B4
--
procedure pin_B4'put(bit in x at LATB : 4) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB5                at LATB : 5
var volatile bit    pin_B5                    at PORTB : 5
alias               pin_PWM3                  is pin_B5
--
procedure pin_B5'put(bit in x at LATB : 5) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB6                at LATB : 6
var volatile bit    pin_B6                    at PORTB : 6
alias               pin_PWM4                  is pin_B6
--
procedure pin_B6'put(bit in x at LATB : 6) is
   pragma inline
end procedure
--
var volatile bit    LATB_LATB7                at LATB : 7
var volatile bit    pin_B7                    at PORTB : 7
alias               pin_PWM5                  is pin_B7
--
procedure pin_B7'put(bit in x at LATB : 7) is
   pragma inline
end procedure
--
var volatile bit    LATB_LB0                  at LATB : 0
var volatile bit    LATB_LB1                  at LATB : 1
var volatile bit    LATB_LB2                  at LATB : 2
var volatile bit    LATB_LB3                  at LATB : 3
var volatile bit    LATB_LB4                  at LATB : 4
var volatile bit    LATB_LB5                  at LATB : 5
var volatile bit    LATB_LB6                  at LATB : 6
var volatile bit    LATB_LB7                  at LATB : 7
-- ------------------------------------------------
var volatile byte   FLTCONFIG                 at { 0xF8B }
var volatile bit    FLTCONFIG_FLTAEN          at FLTCONFIG : 0
var volatile bit    FLTCONFIG_FLTAMOD         at FLTCONFIG : 1
var volatile bit    FLTCONFIG_FLTAS           at FLTCONFIG : 2
var volatile bit    FLTCONFIG_BRFEN           at FLTCONFIG : 7
-- ------------------------------------------------
var volatile byte   PDC2H                     at { 0xF8C }
var volatile bit*6  PDC2H_PDC2H               at PDC2H : 0
-- ------------------------------------------------
var volatile byte   PDC2L                     at { 0xF8D }
-- ------------------------------------------------
var volatile byte   PDC1H                     at { 0xF8E }
var volatile bit*6  PDC1H_PDC1H               at PDC1H : 0
-- ------------------------------------------------
var volatile byte   PDC1L                     at { 0xF8F }
-- ------------------------------------------------
var volatile byte   PDC0H                     at { 0xF90 }
var volatile bit*6  PDC0H_PDC0H               at PDC0H : 0
-- ------------------------------------------------
var volatile byte   PDC0L                     at { 0xF91 }
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0xF92 }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_AN0_direction         is pin_A0_direction
alias               pin_KBI0_direction        is pin_A0_direction
alias               pin_CMP0_direction        is pin_A0_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_AN1_direction         is pin_A1_direction
alias               pin_KBI1_direction        is pin_A1_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_TX_direction          is pin_A2_direction
alias               pin_CK_direction          is pin_A2_direction
--
var volatile bit    TRISA_TRISA3              at TRISA : 3
var volatile bit    pin_A3_direction          at TRISA : 3
alias               pin_RX_direction          is pin_A3_direction
alias               pin_DT_direction          is pin_A3_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_T0CKI_direction       is pin_A4_direction
alias               pin_AN2_direction         is pin_A4_direction
alias               pin_VREF_POS_direction    is pin_A4_direction
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_FLTA_RA5_direction    is pin_A5_direction
--
var volatile bit    TRISA_TRISA6              at TRISA : 6
var volatile bit    pin_A6_direction          at TRISA : 6
alias               pin_OSC2_direction        is pin_A6_direction
alias               pin_CLKO_direction        is pin_A6_direction
alias               pin_T1OSO_RA6_direction   is pin_A6_direction
alias               pin_T1CKI_RA6_direction   is pin_A6_direction
alias               pin_AN3_direction         is pin_A6_direction
--
var volatile bit    TRISA_TRISA7              at TRISA : 7
var volatile bit    pin_A7_direction          at TRISA : 7
alias               pin_OSC1_direction        is pin_A7_direction
alias               pin_CLKI_direction        is pin_A7_direction
alias               pin_T1OSI_RA7_direction   is pin_A7_direction
alias               pin_FLTA_RA7_direction    is pin_A7_direction
--
var volatile bit    TRISA_RA0                 at TRISA : 0
var volatile bit    TRISA_RA1                 at TRISA : 1
var volatile bit    TRISA_RA2                 at TRISA : 2
var volatile bit    TRISA_RA3                 at TRISA : 3
var volatile bit    TRISA_RA4                 at TRISA : 4
var volatile bit    TRISA_RA5                 at TRISA : 5
var volatile bit    TRISA_RA6                 at TRISA : 6
var volatile bit    TRISA_RA7                 at TRISA : 7
-- ------------------------------------------------
var volatile byte   TRISB                     at { 0xF93 }
alias               PORTB_direction           is TRISB
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB = (TRISB & 0xF0) | (x & 0x0F)
end procedure
function PORTB_low_direction'get() return byte is
   return (TRISB & 0x0F)
end function
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB = (TRISB & 0x0F) | (x << 4)
end procedure
function PORTB_high_direction'get() return byte is
   return (TRISB >> 4)
end function
--
var volatile bit    TRISB_TRISB0              at TRISB : 0
var volatile bit    pin_B0_direction          at TRISB : 0
alias               pin_PWM0_direction        is pin_B0_direction
--
var volatile bit    TRISB_TRISB1              at TRISB : 1
var volatile bit    pin_B1_direction          at TRISB : 1
alias               pin_PWM1_direction        is pin_B1_direction
--
var volatile bit    TRISB_TRISB2              at TRISB : 2
var volatile bit    pin_B2_direction          at TRISB : 2
alias               pin_KBI2_direction        is pin_B2_direction
alias               pin_CMP2_direction        is pin_B2_direction
alias               pin_T1OSO_RB2_direction   is pin_B2_direction
alias               pin_T1CKI_RB2_direction   is pin_B2_direction
--
var volatile bit    TRISB_TRISB3              at TRISB : 3
var volatile bit    pin_B3_direction          at TRISB : 3
alias               pin_KBI3_direction        is pin_B3_direction
alias               pin_CMP1_direction        is pin_B3_direction
alias               pin_T1OSI_RB3_direction   is pin_B3_direction
--
var volatile bit    TRISB_TRISB4              at TRISB : 4
var volatile bit    pin_B4_direction          at TRISB : 4
alias               pin_PWM2_direction        is pin_B4_direction
--
var volatile bit    TRISB_TRISB5              at TRISB : 5
var volatile bit    pin_B5_direction          at TRISB : 5
alias               pin_PWM3_direction        is pin_B5_direction
--
var volatile bit    TRISB_TRISB6              at TRISB : 6
var volatile bit    pin_B6_direction          at TRISB : 6
alias               pin_PWM4_direction        is pin_B6_direction
--
var volatile bit    TRISB_TRISB7              at TRISB : 7
var volatile bit    pin_B7_direction          at TRISB : 7
alias               pin_PWM5_direction        is pin_B7_direction
--
var volatile bit    TRISB_RB0                 at TRISB : 0
var volatile bit    TRISB_RB1                 at TRISB : 1
var volatile bit    TRISB_RB2                 at TRISB : 2
var volatile bit    TRISB_RB3                 at TRISB : 3
var volatile bit    TRISB_RB4                 at TRISB : 4
var volatile bit    TRISB_RB5                 at TRISB : 5
var volatile bit    TRISB_RB6                 at TRISB : 6
var volatile bit    TRISB_RB7                 at TRISB : 7
-- ------------------------------------------------
var volatile byte   PTPERH                    at { 0xF95 }
var volatile bit*4  PTPERH_PTPERH             at PTPERH : 0
-- ------------------------------------------------
var volatile byte   PTPERL                    at { 0xF96 }
-- ------------------------------------------------
var volatile byte   PTMRH                     at { 0xF97 }
var volatile bit*4  PTMRH_PTMRH               at PTMRH : 0
-- ------------------------------------------------
var volatile byte   PTMRL                     at { 0xF98 }
-- ------------------------------------------------
var volatile byte   PTCON1                    at { 0xF99 }
var volatile bit    PTCON1_PTDIR              at PTCON1 : 6
var volatile bit    PTCON1_PTEN               at PTCON1 : 7
-- ------------------------------------------------
var volatile byte   PTCON0                    at { 0xF9A }
var volatile bit*2  PTCON0_PTMOD              at PTCON0 : 0
var volatile bit*2  PTCON0_PTCKPS             at PTCON0 : 2
var volatile bit*4  PTCON0_PTOPS              at PTCON0 : 4
var volatile bit    PTCON0_PTMOD0             at PTCON0 : 0
var volatile bit    PTCON0_PTMOD1             at PTCON0 : 1
var volatile bit    PTCON0_PTCKPS0            at PTCON0 : 2
var volatile bit    PTCON0_PTCKPS1            at PTCON0 : 3
var volatile bit    PTCON0_PTOPS0             at PTCON0 : 4
var volatile bit    PTCON0_PTOPS1             at PTCON0 : 5
var volatile bit    PTCON0_PTOPS2             at PTCON0 : 6
var volatile bit    PTCON0_PTOPS3             at PTCON0 : 7
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0xF9B }
var volatile bit*5  OSCTUNE_TUN               at OSCTUNE : 0
var volatile bit    OSCTUNE_PLLEN             at OSCTUNE : 6
var volatile bit    OSCTUNE_INTSRC            at OSCTUNE : 7
var volatile bit    OSCTUNE_TUN0              at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN1              at OSCTUNE : 1
var volatile bit    OSCTUNE_TUN2              at OSCTUNE : 2
var volatile bit    OSCTUNE_TUN3              at OSCTUNE : 3
var volatile bit    OSCTUNE_TUN4              at OSCTUNE : 4
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0xF9D }
var volatile bit    PIE1_TMR1IE               at PIE1 : 0
var volatile bit    PIE1_CMP0IE               at PIE1 : 1
var volatile bit    PIE1_CMP1IE               at PIE1 : 2
var volatile bit    PIE1_CMP2IE               at PIE1 : 3
var volatile bit    PIE1_TXIE                 at PIE1 : 4
var volatile bit    PIE1_RCIE                 at PIE1 : 5
var volatile bit    PIE1_ADIE                 at PIE1 : 6
var volatile bit    PIE1_TX1IE                at PIE1 : 4
var volatile bit    PIE1_RC1IE                at PIE1 : 5
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0xF9E }
var volatile bit    PIR1_TMR1IF               at PIR1 : 0
var volatile bit    PIR1_CMP0IF               at PIR1 : 1
var volatile bit    PIR1_CMP1IF               at PIR1 : 2
var volatile bit    PIR1_CMP2IF               at PIR1 : 3
var volatile bit    PIR1_TXIF                 at PIR1 : 4
var volatile bit    PIR1_RCIF                 at PIR1 : 5
var volatile bit    PIR1_ADIF                 at PIR1 : 6
var volatile bit    PIR1_TX1IF                at PIR1 : 4
var volatile bit    PIR1_RC1IF                at PIR1 : 5
-- ------------------------------------------------
var volatile byte   IPR1                      at { 0xF9F }
var volatile bit    IPR1_TMR1IP               at IPR1 : 0
var volatile bit    IPR1_CMP0IP               at IPR1 : 1
var volatile bit    IPR1_CMP1IP               at IPR1 : 2
var volatile bit    IPR1_CMP2IP               at IPR1 : 3
var volatile bit    IPR1_TXIP                 at IPR1 : 4
var volatile bit    IPR1_RCIP                 at IPR1 : 5
var volatile bit    IPR1_ADIP                 at IPR1 : 6
var volatile bit    IPR1_TX1IP                at IPR1 : 4
var volatile bit    IPR1_RC1IP                at IPR1 : 5
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0xFA0 }
var volatile bit    PIE2_LVDIE                at PIE2 : 2
var volatile bit    PIE2_EEIE                 at PIE2 : 4
var volatile bit    PIE2_OSCFIE               at PIE2 : 7
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0xFA1 }
var volatile bit    PIR2_LVDIF                at PIR2 : 2
var volatile bit    PIR2_EEIF                 at PIR2 : 4
var volatile bit    PIR2_OSCFIF               at PIR2 : 7
-- ------------------------------------------------
var volatile byte   IPR2                      at { 0xFA2 }
var volatile bit    IPR2_LVDIP                at IPR2 : 2
var volatile bit    IPR2_EEIP                 at IPR2 : 4
var volatile bit    IPR2_OSCFIP               at IPR2 : 7
-- ------------------------------------------------
var volatile byte   PIE3                      at { 0xFA3 }
var volatile bit    PIE3_PTIE                 at PIE3 : 4
var volatile bit    PIE3_TXB2IE               at PIE3 : 4
var volatile bit    PIE3_TXBNIE               at PIE3 : 4
-- ------------------------------------------------
var volatile byte   PIR3                      at { 0xFA4 }
var volatile bit    PIR3_PTIF                 at PIR3 : 4
var volatile bit    PIR3_TXBNIF               at PIR3 : 4
-- ------------------------------------------------
var volatile byte   IPR3                      at { 0xFA5 }
var volatile bit    IPR3_PTIP                 at IPR3 : 4
var volatile bit    IPR3_TXBNIP               at IPR3 : 4
-- ------------------------------------------------
var volatile byte   EECON1                    at { 0xFA6 }
var volatile bit    EECON1_RD                 at EECON1 : 0
var volatile bit    EECON1_WR                 at EECON1 : 1
var volatile bit    EECON1_WREN               at EECON1 : 2
var volatile bit    EECON1_WRERR              at EECON1 : 3
var volatile bit    EECON1_FREE               at EECON1 : 4
var volatile bit    EECON1_CFGS               at EECON1 : 6
var volatile bit    EECON1_EEPGD              at EECON1 : 7
var volatile bit    EECON1_EEFS               at EECON1 : 6
-- ------------------------------------------------
var volatile byte   EECON2                    at { 0xFA7 }
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0xFA8 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0xFA9 }
-- ------------------------------------------------
var volatile byte   RCSTA                     at { 0xFAB }
var volatile bit    RCSTA_RX9D                at RCSTA : 0
var volatile bit    RCSTA_OERR                at RCSTA : 1
var volatile bit    RCSTA_FERR                at RCSTA : 2
var volatile bit    RCSTA_ADEN                at RCSTA : 3
var volatile bit    RCSTA_CREN                at RCSTA : 4
var volatile bit    RCSTA_SREN                at RCSTA : 5
var volatile bit    RCSTA_RX9                 at RCSTA : 6
var volatile bit    RCSTA_SPEN                at RCSTA : 7
var volatile bit    RCSTA_ADDEN               at RCSTA : 3
var volatile bit    RCSTA_SRENA               at RCSTA : 5
-- ------------------------------------------------
var volatile byte   TXSTA                     at { 0xFAC }
var volatile bit    TXSTA_TX9D                at TXSTA : 0
var volatile bit    TXSTA_TRMT                at TXSTA : 1
var volatile bit    TXSTA_BRGH                at TXSTA : 2
var volatile bit    TXSTA_SENDB               at TXSTA : 3
var volatile bit    TXSTA_SYNC                at TXSTA : 4
var volatile bit    TXSTA_TXEN                at TXSTA : 5
var volatile bit    TXSTA_TX9                 at TXSTA : 6
var volatile bit    TXSTA_CSRC                at TXSTA : 7
var volatile bit    TXSTA_TX9D1               at TXSTA : 0
var volatile bit    TXSTA_TRMT1               at TXSTA : 1
var volatile bit    TXSTA_BRGH1               at TXSTA : 2
var volatile bit    TXSTA_SENDB1              at TXSTA : 3
var volatile bit    TXSTA_SYNC1               at TXSTA : 4
var volatile bit    TXSTA_TXEN1               at TXSTA : 5
var volatile bit    TXSTA_TX91                at TXSTA : 6
var volatile bit    TXSTA_CSRC1               at TXSTA : 7
-- ------------------------------------------------
var volatile byte   TXREG                     at { 0xFAD }
-- ------------------------------------------------
var volatile byte   RCREG                     at { 0xFAE }
-- ------------------------------------------------
var volatile byte   SPBRG                     at { 0xFAF }
alias               SPBRGL                    is SPBRG
-- ------------------------------------------------
var volatile byte   SPBRGH                    at { 0xFB0 }
-- ------------------------------------------------
var volatile byte   CMCON                     at { 0xFB4 }
var volatile bit*3  CMCON_CMEN                at CMCON : 0
var volatile bit    CMCON_C0OUT               at CMCON : 5
var volatile bit    CMCON_C1OUT               at CMCON : 6
var volatile bit    CMCON_C2OUT               at CMCON : 7
var volatile bit    CMCON_CMEN0               at CMCON : 0
var volatile bit    CMCON_CMEN1               at CMCON : 1
var volatile bit    CMCON_CMEN2               at CMCON : 2
var volatile bit    CMCON_CM0                 at CMCON : 0
var volatile bit    CMCON_CM1                 at CMCON : 1
var volatile bit    CMCON_CM2                 at CMCON : 2
var volatile bit    CMCON_C2INV               at CMCON : 5
-- ------------------------------------------------
var volatile byte   CVRCON                    at { 0xFB5 }
var volatile bit*4  CVRCON_CVR                at CVRCON : 0
var volatile bit    CVRCON_CVRSS              at CVRCON : 4
var volatile bit    CVRCON_CVRR               at CVRCON : 5
var volatile bit    CVRCON_CVREN              at CVRCON : 7
var volatile bit    CVRCON_CVR0               at CVRCON : 0
var volatile bit    CVRCON_CVR1               at CVRCON : 1
var volatile bit    CVRCON_CVR2               at CVRCON : 2
var volatile bit    CVRCON_CVR3               at CVRCON : 3
var volatile bit    CVRCON_CVREF              at CVRCON : 4
-- ------------------------------------------------
var volatile byte   BAUDCON                   at { 0xFB8 }
var volatile bit    BAUDCON_ABDEN             at BAUDCON : 0
var volatile bit    BAUDCON_WUE               at BAUDCON : 1
var volatile bit    BAUDCON_BRG16             at BAUDCON : 3
var volatile bit    BAUDCON_TXCKP             at BAUDCON : 4
var volatile bit    BAUDCON_RXDTP             at BAUDCON : 5
var volatile bit    BAUDCON_RCIDL             at BAUDCON : 6
var volatile bit    BAUDCON_ABDOVF            at BAUDCON : 7
var volatile bit    BAUDCON_SCKP              at BAUDCON : 4
var volatile bit    BAUDCON_RCMT              at BAUDCON : 6
var volatile bit    BAUDCON_RXCKP             at BAUDCON : 5
-- ------------------------------------------------
var volatile byte   ADCON2                    at { 0xFC0 }
var volatile bit*3  ADCON2_ADCS               at ADCON2 : 0
var volatile bit*3  ADCON2_ACQT               at ADCON2 : 3
var volatile bit    ADCON2_ADFM               at ADCON2 : 7
var volatile bit    ADCON2_ADCS0              at ADCON2 : 0
var volatile bit    ADCON2_ADCS1              at ADCON2 : 1
var volatile bit    ADCON2_ADCS2              at ADCON2 : 2
var volatile bit    ADCON2_ACQT0              at ADCON2 : 3
var volatile bit    ADCON2_ACQT1              at ADCON2 : 4
var volatile bit    ADCON2_ACQT2              at ADCON2 : 5
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0xFC1 }
var volatile bit*4  ADCON1_PCFG               at ADCON1 : 0
var volatile bit    ADCON1_VCFG               at ADCON1 : 4
var volatile bit    ADCON1_PCFG0              at ADCON1 : 0
var volatile bit    ADCON1_PCFG1              at ADCON1 : 1
var volatile bit    ADCON1_PCFG2              at ADCON1 : 2
var volatile bit    ADCON1_PCFG3              at ADCON1 : 3
var volatile bit    ADCON1_VCFG0              at ADCON1 : 4
var volatile bit    ADCON1_CHSN3              at ADCON1 : 3
var volatile bit    ADCON1_VCFG01             at ADCON1 : 4
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0xFC2 }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 1
var volatile bit*2  ADCON0_CHS                at ADCON0 : 2
var volatile bit    ADCON0_SEVTEN             at ADCON0 : 7
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_CHS0               at ADCON0 : 2
var volatile bit    ADCON0_CHS1               at ADCON0 : 3
var volatile bit    ADCON0_DONE               at ADCON0 : 1
var volatile bit    ADCON0_NDONE              at ADCON0 : 1
var volatile bit    ADCON0_GO_DONE            at ADCON0 : 1
var volatile bit    ADCON0_GODONE             at ADCON0 : 1
var volatile bit    ADCON0_ADCAL              at ADCON0 : 7
-- ------------------------------------------------
var volatile word   ADRES                     at { 0xFC3 }
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0xFC3 }
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0xFC4 }
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0xFCD }
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_TMR1CS              at T1CON : 1
var volatile bit    T1CON_NT1SYNC             at T1CON : 2
alias               T1CON_T1SYNC              is T1CON_NT1SYNC
var volatile bit    T1CON_T1OSCEN             at T1CON : 3
var volatile bit*2  T1CON_T1CKPS              at T1CON : 4
var volatile bit    T1CON_T1RUN               at T1CON : 6
var volatile bit    T1CON_RD16                at T1CON : 7
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
var volatile bit    T1CON_SOSCEN              at T1CON : 3
var volatile bit    T1CON_T1RD16              at T1CON : 7
-- ------------------------------------------------
var volatile word   TMR1                      at { 0xFCE }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0xFCE }
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0xFCF }
-- ------------------------------------------------
var volatile byte   RCON                      at { 0xFD0 }
var volatile bit    RCON_NBOR                 at RCON : 0
var volatile bit    RCON_NPOR                 at RCON : 1
var volatile bit    RCON_NPD                  at RCON : 2
var volatile bit    RCON_NTO                  at RCON : 3
var volatile bit    RCON_NRI                  at RCON : 4
var volatile bit    RCON_SBOREN               at RCON : 6
var volatile bit    RCON_IPEN                 at RCON : 7
var volatile bit    RCON_BOR                  at RCON : 0
var volatile bit    RCON_POR                  at RCON : 1
var volatile bit    RCON_PD                   at RCON : 2
var volatile bit    RCON_TO                   at RCON : 3
var volatile bit    RCON_RI                   at RCON : 4
-- ------------------------------------------------
var volatile byte   WDTCON                    at { 0xFD1 }
var volatile bit    WDTCON_SWDTEN             at WDTCON : 0
var volatile bit    WDTCON_SWDTE              at WDTCON : 0
-- ------------------------------------------------
var volatile byte   LVDCON                    at { 0xFD2 }
var volatile bit*4  LVDCON_LVDL               at LVDCON : 0
var volatile bit    LVDCON_LVDEN              at LVDCON : 4
var volatile bit    LVDCON_IRVST              at LVDCON : 5
var volatile bit    LVDCON_LVDL0              at LVDCON : 0
var volatile bit    LVDCON_LVDL1              at LVDCON : 1
var volatile bit    LVDCON_LVDL2              at LVDCON : 2
var volatile bit    LVDCON_LVDL3              at LVDCON : 3
var volatile bit    LVDCON_IVRST              at LVDCON : 5
-- ------------------------------------------------
var volatile byte   OSCCON                    at { 0xFD3 }
var volatile bit*2  OSCCON_SCS                at OSCCON : 0
var volatile bit    OSCCON_IOFS               at OSCCON : 2
var volatile bit    OSCCON_OSTS               at OSCCON : 3
var volatile bit*3  OSCCON_IRCF               at OSCCON : 4
var volatile bit    OSCCON_IDLEN              at OSCCON : 7
var volatile bit    OSCCON_SCS0               at OSCCON : 0
var volatile bit    OSCCON_SCS1               at OSCCON : 1
var volatile bit    OSCCON_FLTS               at OSCCON : 2
var volatile bit    OSCCON_IRCF0              at OSCCON : 4
var volatile bit    OSCCON_IRCF1              at OSCCON : 5
var volatile bit    OSCCON_IRCF2              at OSCCON : 6
-- ------------------------------------------------
var volatile byte   T0CON                     at { 0xFD5 }
var volatile bit*3  T0CON_T0PS                at T0CON : 0
var volatile bit    T0CON_PSA                 at T0CON : 3
var volatile bit    T0CON_T0SE                at T0CON : 4
var volatile bit    T0CON_T0CS                at T0CON : 5
var volatile bit    T0CON_T016BIT             at T0CON : 6
var volatile bit    T0CON_TMR0ON              at T0CON : 7
var volatile bit    T0CON_T0PS0               at T0CON : 0
var volatile bit    T0CON_T0PS1               at T0CON : 1
var volatile bit    T0CON_T0PS2               at T0CON : 2
var volatile bit    T0CON_T08BIT              at T0CON : 6
-- ------------------------------------------------
var volatile word   TMR0                      at { 0xFD6 }
-- ------------------------------------------------
var volatile byte   TMR0L                     at { 0xFD6 }
-- ------------------------------------------------
var volatile byte   TMR0H                     at { 0xFD7 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0xFD8 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_OV                 at STATUS : 3
var volatile bit    STATUS_N                  at STATUS : 4
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile bit    STATUS_OVERFLOW           at STATUS : 3
var volatile bit    STATUS_NEGATIVE           at STATUS : 4
var volatile byte   _status                   at { 0xFD8 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _ov                       =  3
const        byte   _n                        =  4
const        byte   _carry                    =  0
const        byte   _zero                     =  2
const        byte   _overflow                 =  3
const        byte   _negative                 =  4
const        byte   _banked                   =  1
const        byte   _access                   =  0
-- ------------------------------------------------
var volatile word   FSR2                      at { 0xFD9 }
-- ------------------------------------------------
var volatile byte   FSR2L                     at { 0xFD9 }
-- ------------------------------------------------
var volatile byte   FSR2H                     at { 0xFDA }
var volatile bit*4  FSR2H_FSR2H               at FSR2H : 0
-- ------------------------------------------------
var volatile byte   PLUSW2                    at { 0xFDB }
-- ------------------------------------------------
var volatile byte   PREINC2                   at { 0xFDC }
-- ------------------------------------------------
var volatile byte   POSTDEC2                  at { 0xFDD }
-- ------------------------------------------------
var volatile byte   POSTINC2                  at { 0xFDE }
-- ------------------------------------------------
var volatile byte   INDF2                     at { 0xFDF }
-- ------------------------------------------------
var volatile byte   BSR                       at { 0xFE0 }
var volatile bit*4  BSR_BSR                   at BSR : 0
var volatile byte   _bsr                      at { 0xFE0 }
-- ------------------------------------------------
var volatile word   FSR1                      at { 0xFE1 }
var volatile word   _fsr1                     at { 0xFE1 }
-- ------------------------------------------------
var volatile byte   FSR1L                     at { 0xFE1 }
var volatile byte   _fsr1l                    at { 0xFE1 }
-- ------------------------------------------------
var volatile byte   FSR1H                     at { 0xFE2 }
var volatile bit*4  FSR1H_FSR1H               at FSR1H : 0
var volatile byte   _fsr1h                    at { 0xFE2 }
-- ------------------------------------------------
var volatile byte   PLUSW1                    at { 0xFE3 }
-- ------------------------------------------------
var volatile byte   PREINC1                   at { 0xFE4 }
-- ------------------------------------------------
var volatile byte   POSTDEC1                  at { 0xFE5 }
-- ------------------------------------------------
var volatile byte   POSTINC1                  at { 0xFE6 }
-- ------------------------------------------------
var volatile byte   INDF1                     at { 0xFE7 }
-- ------------------------------------------------
var volatile byte   WREG                      at { 0xFE8 }
-- ------------------------------------------------
var volatile word   FSR0                      at { 0xFE9 }
var volatile word   _fsr0                     at { 0xFE9 }
-- ------------------------------------------------
var volatile byte   FSR0L                     at { 0xFE9 }
var volatile byte   _fsr0l                    at { 0xFE9 }
-- ------------------------------------------------
var volatile byte   FSR0H                     at { 0xFEA }
var volatile bit*4  FSR0H_FSR0H               at FSR0H : 0
var volatile byte   _fsr0h                    at { 0xFEA }
-- ------------------------------------------------
var volatile byte   PLUSW0                    at { 0xFEB }
-- ------------------------------------------------
var volatile byte   PREINC0                   at { 0xFEC }
-- ------------------------------------------------
var volatile byte   POSTDEC0                  at { 0xFED }
-- ------------------------------------------------
var volatile byte   POSTINC0                  at { 0xFEE }
-- ------------------------------------------------
var volatile byte   INDF0                     at { 0xFEF }
var volatile byte   _ind                      at { 0xFEF }
-- ------------------------------------------------
var volatile byte   INTCON3                   at { 0xFF0 }
var volatile bit    INTCON3_INT1IF            at INTCON3 : 0
var volatile bit    INTCON3_INT2IF            at INTCON3 : 1
var volatile bit    INTCON3_INT3IF            at INTCON3 : 2
var volatile bit    INTCON3_INT1IE            at INTCON3 : 3
var volatile bit    INTCON3_INT2IE            at INTCON3 : 4
var volatile bit    INTCON3_INT3IE            at INTCON3 : 5
var volatile bit    INTCON3_INT1IP            at INTCON3 : 6
var volatile bit    INTCON3_INT2IP            at INTCON3 : 7
var volatile bit    INTCON3_INT1F             at INTCON3 : 0
var volatile bit    INTCON3_INT2F             at INTCON3 : 1
var volatile bit    INTCON3_INT3F             at INTCON3 : 2
var volatile bit    INTCON3_INT1E             at INTCON3 : 3
var volatile bit    INTCON3_INT2E             at INTCON3 : 4
var volatile bit    INTCON3_INT3E             at INTCON3 : 5
var volatile bit    INTCON3_INT1P             at INTCON3 : 6
var volatile bit    INTCON3_INT2P             at INTCON3 : 7
-- ------------------------------------------------
var volatile byte   INTCON2                   at { 0xFF1 }
var volatile bit    INTCON2_RBIP              at INTCON2 : 0
var volatile bit    INTCON2_INT3IP            at INTCON2 : 1
var volatile bit    INTCON2_TMR0IP            at INTCON2 : 2
var volatile bit    INTCON2_INTEDG3           at INTCON2 : 3
var volatile bit    INTCON2_INTEDG2           at INTCON2 : 4
var volatile bit    INTCON2_INTEDG1           at INTCON2 : 5
var volatile bit    INTCON2_INTEDG0           at INTCON2 : 6
var volatile bit    INTCON2_NRBPU             at INTCON2 : 7
var volatile bit    INTCON2_INT3P             at INTCON2 : 1
var volatile bit    INTCON2_RBPU              at INTCON2 : 7
-- ------------------------------------------------
var volatile byte   INTCON                    at { 0xFF2 }
var volatile bit    INTCON_RBIF               at INTCON : 0
var volatile bit    INTCON_INT0IF             at INTCON : 1
var volatile bit    INTCON_TMR0IF             at INTCON : 2
var volatile bit    INTCON_RBIE               at INTCON : 3
var volatile bit    INTCON_INT0IE             at INTCON : 4
var volatile bit    INTCON_TMR0IE             at INTCON : 5
var volatile bit    INTCON_PEIE_GIEL          at INTCON : 6
var volatile bit    INTCON_GIE_GIEH           at INTCON : 7
var volatile bit    INTCON_INT0F              at INTCON : 1
var volatile bit    INTCON_T0IF               at INTCON : 2
var volatile bit    INTCON_INT0E              at INTCON : 4
var volatile bit    INTCON_T0IE               at INTCON : 5
var volatile bit    INTCON_PEIE               at INTCON : 6
var volatile bit    INTCON_GIE                at INTCON : 7
var volatile bit    INTCON_GIEL               at INTCON : 6
var volatile bit    INTCON_GIEH               at INTCON : 7
-- ------------------------------------------------
var volatile word   PROD                      at { 0xFF3 }
-- ------------------------------------------------
var volatile byte   PRODL                     at { 0xFF3 }
-- ------------------------------------------------
var volatile byte   PRODH                     at { 0xFF4 }
-- ------------------------------------------------
var volatile byte   TABLAT                    at { 0xFF5 }
var volatile byte   _tablat                   at { 0xFF5 }
-- ------------------------------------------------
var volatile byte*3 TBLPTR                    at { 0xFF6 }
var volatile byte*3 _tblptr                   at { 0xFF6 }
-- ------------------------------------------------
var volatile byte   TBLPTRL                   at { 0xFF6 }
var volatile byte   _tblptrl                  at { 0xFF6 }
-- ------------------------------------------------
var volatile byte   TBLPTRH                   at { 0xFF7 }
var volatile byte   _tblptrh                  at { 0xFF7 }
-- ------------------------------------------------
var volatile byte   TBLPTRU                   at { 0xFF8 }
var volatile bit*5  TBLPTRU_TBLPTRU           at TBLPTRU : 0
var volatile bit    TBLPTRU_ACSS              at TBLPTRU : 5
var volatile byte   _tblptru                  at { 0xFF8 }
-- ------------------------------------------------
var volatile byte*3 PCLAT                     at { 0xFF9 }
var volatile byte*3 _pclat                    at { 0xFF9 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0xFF9 }
var volatile byte   _pcl                      at { 0xFF9 }
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0xFFA }
var volatile byte   _pclath                   at { 0xFFA }
-- ------------------------------------------------
var volatile byte   PCLATU                    at { 0xFFB }
var volatile bit*5  PCLATU_PCU                at PCLATU : 0
var volatile byte   _pclatu                   at { 0xFFB }
-- ------------------------------------------------
var volatile byte   STKPTR                    at { 0xFFC }
var volatile bit*5  STKPTR_STKPTR             at STKPTR : 0
var volatile bit    STKPTR_STKUNF             at STKPTR : 6
var volatile bit    STKPTR_STKFUL             at STKPTR : 7
var volatile bit    STKPTR_SP0                at STKPTR : 0
var volatile bit    STKPTR_SP1                at STKPTR : 1
var volatile bit    STKPTR_SP2                at STKPTR : 2
var volatile bit    STKPTR_SP3                at STKPTR : 3
var volatile bit    STKPTR_SP4                at STKPTR : 4
var volatile bit    STKPTR_STKOVF             at STKPTR : 7
-- ------------------------------------------------
var volatile byte*3 TOS                       at { 0xFFD }
-- ------------------------------------------------
var volatile byte   TOSL                      at { 0xFFD }
-- ------------------------------------------------
var volatile byte   TOSH                      at { 0xFFE }
-- ------------------------------------------------
var volatile byte   TOSU                      at { 0xFFF }
var volatile bit*5  TOSU_TOSU                 at TOSU : 0
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 3
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000
   ADCON1 = 0b0000_1111
   ADCON2 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CMCON  = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   adc_off()
   comparator_off()
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0x1-0x7F
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG1H (0x300001)
--
pragma fuse_def OSC:1  0xF {             -- Oscillator
       INTOSC_CLKOUT = 0x9               -- Internal oscillator, CLKO function on RA6, port function on RA7
       INTOSC_NOCLKOUT = 0x8             -- Internal oscillator, port function on RA6 and RA7
       RC_NOCLKOUT = 0x7                 -- External RC oscillator, port function on RA6
       HS_PLL = 0x6                      -- HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
       EC_NOCLKOUT = 0x5                 -- EC oscillator, port function on RA6
       EC_CLKOUT = 0x4                   -- EC oscillator, CLKO function on RA6
       RC_CLKOUT = 0x3                   -- External RC oscillator, CLKO function on RA6
       HS = 0x2                          -- HS Oscillator
       XT = 0x1                          -- XT Oscillator
       LP = 0x0                          -- LP Oscillator
       }
pragma fuse_def FCMEN:1  0x40 {          -- Fail-Safe Clock Monitor Enable bit
       ENABLED = 0x40                    -- Fail-Safe Clock Monitor enabled
       DISABLED = 0x0                    -- Fail-Safe Clock Monitor disabled
       }
pragma fuse_def IESO:1  0x80 {           -- Internal/External Oscillator Switchover bit
       ENABLED = 0x80                    -- Oscillator Switchover mode enabled
       DISABLED = 0x0                    -- Oscillator Switchover mode disabled
       }
--
-- CONFIG2L (0x300002)
--
pragma fuse_def PWRTE:2  0x1 {           -- Power-up Timer Enable bit
       DISABLED = 0x1                    -- PWRT disabled
       ENABLED = 0x0                     -- PWRT enabled
       }
pragma fuse_def BROWNOUT:2  0x6 {        -- Brown-out Reset Enable bits
       ENABLED = 0x6                     -- Brown-out Reset enabled in hardware only (SBOREN is disabled)
       RUNONLY = 0x4                     -- Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled)
       CONTROL = 0x2                     -- Brown-out Reset enabled and controlled by software (SBOREN is enabled)
       DISABLED = 0x0                    -- Brown-out Reset disabled in hardware and software
       }
pragma fuse_def VOLTAGE:2  0x18 {        -- Brown-out Reset Voltage bits
       MINIMUM = 0x18                    -- Minimum setting
       MEDIUM2 = 0x10                    -- 
       MEDIUM1 = 0x8                     -- 
       MAXIMUM = 0x0                     -- Maximum setting
       }
--
-- CONFIG2H (0x300003)
--
pragma fuse_def WDT:3  0x1 {             -- Watchdog Timer Enable bit
       ENABLED = 0x1                     -- WDT enabled
       CONTROL = 0x0                     -- WDT disabled (control is placed on the SWDTEN bit)
       }
pragma fuse_def WDTPS:3  0x1E {          -- Watchdog Timer Postscale Select bits
       P32K = 0x1E                       -- 1:32768
       P16K = 0x1C                       -- 1:16384
       P8K = 0x1A                        -- 1:8192
       P4K = 0x18                        -- 1:4096
       P2K = 0x16                        -- 1:2048
       P1K = 0x14                        -- 1:1024
       P512  = 0x12                      -- 1:512
       P256  = 0x10                      -- 1:256
       P128  = 0xE                       -- 1:128
       P64  = 0xC                        -- 1:64
       P32  = 0xA                        -- 1:32
       P16  = 0x8                        -- 1:16
       P8  = 0x6                         -- 1:8
       P4  = 0x4                         -- 1:4
       P2  = 0x2                         -- 1:2
       P1  = 0x0                         -- 1:1
       }
--
-- CONFIG3L (0x300004)
--
pragma fuse_def PWMPIN:4  0x2 {          -- PWM Output Pins Reset State Control bit
       DISABLED = 0x2                    -- PWM outputs disabled upon Reset
       ENABLED = 0x0                     -- PWM outputs drive active states upon Reset
       }
pragma fuse_def LPOL:4  0x4 {            -- Low-Side Transistors Polarity bit (Even PWM Output Polarity Control bit)
       ACTIVE_HIGH = 0x4                 -- PWM0, PWM2 and PWM4 are active-high (default)
       ACTIVE_LOW = 0x0                  -- PWM0, PWM2 and PWM4 are active-low
       }
pragma fuse_def HPOL:4  0x8 {            -- High Side Transistors Polarity bit (Odd PWM Output Polarity Control bit)
       ACTIVE_HIGH = 0x8                 -- PWM1, PWM3 and PWM5 are active-high (default)
       ACTIVE_LOW = 0x0                  -- PWM1, PWM3 and PWM5 are active-low
       }
--
-- CONFIG3H (0x300005)
--
pragma fuse_def FLTAMUX:5  0x1 {         -- FLTA Mux bit
       pin_A5 = 0x1                      -- FLTA input is muxed onto RA5
       pin_A7 = 0x0                      -- FLTA input is muxed onto RA7
       }
pragma fuse_def T1OSCMUX:5  0x8 {        -- T1OSO/T1CKI MUX bit
       pin_A6 = 0x8                      -- T1OSO/T1CKI pin resides on RA6
       pin_B2 = 0x0                      -- T1OSO/T1CKI pin resides on RB2
       }
pragma fuse_def MCLR:5  0x80 {           -- Master Clear Enable bit
       EXTERNAL = 0x80                   -- MCLR pin enabled, RA5 input pin disabled
       INTERNAL = 0x0                    -- RA5 input pin enabled, MCLR pin disabled
       }
--
-- CONFIG4L (0x300006)
--
pragma fuse_def STVR:6  0x1 {            -- Stack Overflow/Underflow Reset Enable bit
       ENABLED = 0x1                     -- Reset on stack overflow/underflow enabled
       DISABLED = 0x0                    -- Reset on stack overflow/underflow disabled
       }
pragma fuse_def BBSIZ:6  0x30 {          -- Boot Block Size Select bits
       W512 = 0x30                       -- 512 Words (1024 Bytes) Boot Block size
       W256 = 0x0                        -- 256 Words (512 Bytes) Boot Block size
       }
pragma fuse_def XINST:6  0x40 {          -- Extended Instruction Set Enable bit
--     ENABLED = 0x40                    -- NOTE: not supported by JALV2
       DISABLED = 0x0                    -- Instruction set extension and Indexed Addressing mode disabled
       }
pragma fuse_def DEBUG:6  0x80 {          -- Background Debugger Enable bit
       DISABLED = 0x80                   -- Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins
       ENABLED = 0x0                     -- Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug
       }
--
-- CONFIG5L (0x300008)
--
pragma fuse_def CP0:8  0x1 {             -- Code Protection bit Block 0 (000400-0007FF)
       DISABLED = 0x1                    -- Block 0 is not code-protected
       ENABLED = 0x0                     -- Block 0 is code-protected
       }
pragma fuse_def CP1:8  0x2 {             -- Code Protection bit Block 1 (000800-000FFF)
       DISABLED = 0x2                    -- Block 1 is not code-protected
       ENABLED = 0x0                     -- Block 1 is code-protected
       }
--
-- CONFIG5H (0x300009)
--
pragma fuse_def CPB:9  0x40 {            -- Code Protection bit (Boot Block Memory Area)
       DISABLED = 0x40                   -- Boot Block is not code-protected
       ENABLED = 0x0                     -- Boot Block is code-protected
       }
pragma fuse_def CPD:9  0x80 {            -- Code Protection bit (Data EEPROM)
       DISABLED = 0x80                   -- Data EEPROM is not code-protected
       ENABLED = 0x0                     -- Data EEPROM is code-protected
       }
--
-- CONFIG6L (0x30000A)
--
pragma fuse_def WRT0:10  0x1 {           -- Write Protection bit Block 0 (000400-0007FF)
       DISABLED = 0x1                    -- Block 0 is not write-protected
       ENABLED = 0x0                     -- Block 0 is write-protected
       }
pragma fuse_def WRT1:10  0x2 {           -- Write Protection bit Block 1 (000800-000FFF)
       DISABLED = 0x2                    -- Block 1 is not write-protected
       ENABLED = 0x0                     -- Block 1 is write-protected
       }
--
-- CONFIG6H (0x30000B)
--
pragma fuse_def WRTC:11  0x20 {          -- Write Protection bit (Configuration Registers)
       DISABLED = 0x20                   -- Configuration registers are not write-protected
       ENABLED = 0x0                     -- Configuration registers are write-protected
       }
pragma fuse_def WRTB:11  0x40 {          -- Write Protection bit (Boot Block Memory Area)
       DISABLED = 0x40                   -- Boot Block is not write-protected
       ENABLED = 0x0                     -- Boot Block is write-protected
       }
pragma fuse_def WRTD:11  0x80 {          -- Write Protection bit (Data EEPROM)
       DISABLED = 0x80                   -- Data EEPROM is not write-protected
       ENABLED = 0x0                     -- Data EEPROM is write-protected
       }
--
-- CONFIG7L (0x30000C)
--
pragma fuse_def EBTR0:12  0x1 {          -- Table Read Protection bit Block 0 (000400-0007FF)
       DISABLED = 0x1                    -- Block 0 is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 0 is protected from table reads executed in other blocks
       }
pragma fuse_def EBTR1:12  0x2 {          -- Table Read Protection bit Block 1 (000800-000FFF)
       DISABLED = 0x2                    -- Block 1 is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Block 1 is protected from table reads executed in other blocks
       }
--
-- CONFIG7H (0x30000D)
--
pragma fuse_def EBTRB:13  0x40 {         -- Table Read Protection bit (Boot Block Memory Area)
       DISABLED = 0x40                   -- Boot Block is not protected from table reads executed in other blocks
       ENABLED = 0x0                     -- Boot Block is protected from table reads executed in other blocks
       }
--

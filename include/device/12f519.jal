-- ------------------------------------------------
-- Title: JalV2 device include file for 12f519
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic12f519, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC12F519.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:14 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x0000            -- ID for PIC programmer
const  word  CHIP_ID     = 0xF519            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "12F519"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_12       -- (banks=2)
pragma  target  chip     12F519
pragma  target  bank     0x0020
pragma  target  page     0x0200
pragma  stack            2
pragma  code             1023               -- (excl high mem word)
pragma  eeprom           0x400,64
pragma  ID               0x440,4
pragma  data             0x7-0x1F,0x30-0x3F
pragma  shared           0x7-0xF
--
var volatile byte _pic_accum at 0xF      -- (compiler)
var volatile byte _pic_isr_w at 0xE      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0xFFF
const word   _FUSES                = 0xFFF
--
var volatile byte   osccal__  at  0x5
var volatile byte   fsr__     at  0x4
asm          bcf    fsr__,5                  -- select bank 0
asm          movwf  osccal__                 -- calibrate INTOSC
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x20 }
var volatile byte   _ind                      at { 0x0,0x20 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x22 }
var volatile byte   _pcl                      at { 0x2,0x22 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x23 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_PA0                at STATUS : 5
var volatile bit    STATUS_GPWUF              at STATUS : 7
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3,0x23 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _pa0                      =  5
const        byte   _gpwuf                    =  7
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x24 }
var volatile byte   _fsr                      at { 0x4,0x24 }
-- ------------------------------------------------
var volatile byte   OSCCAL                    at { 0x5 }
var volatile bit*7  OSCCAL_CAL                at OSCCAL : 1
var volatile bit    OSCCAL_CAL0               at OSCCAL : 1
var volatile bit    OSCCAL_CAL1               at OSCCAL : 2
var volatile bit    OSCCAL_CAL2               at OSCCAL : 3
var volatile bit    OSCCAL_CAL3               at OSCCAL : 4
var volatile bit    OSCCAL_CAL4               at OSCCAL : 5
var volatile bit    OSCCAL_CAL5               at OSCCAL : 6
var volatile bit    OSCCAL_CAL6               at OSCCAL : 7
-- ------------------------------------------------
var volatile byte   GPIO_                     at { 0x6 }
alias               PORTA_                    is GPIO_
--
var          byte   PORTA                     at PORTA_
var volatile byte   PORTA_shadow_             at 0xD
--
procedure PORTA'put(byte in x at PORTA_shadow_) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
procedure PORTA_low'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0xF0) | (x & 0x0F)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   PORTA_shadow_ = (PORTA_shadow_ & 0x0F) | (x << 4)
   PORTA_ = PORTA_shadow_
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    GPIO_GP0                  at GPIO_ : 0
var volatile bit    pin_A0                    at GPIO_ : 0
alias               pin_GP0                   is pin_A0
--
procedure pin_A0'put(bit in x at PORTA_shadow_ : 0) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP1                  at GPIO_ : 1
var volatile bit    pin_A1                    at GPIO_ : 1
alias               pin_GP1                   is pin_A1
--
procedure pin_A1'put(bit in x at PORTA_shadow_ : 1) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP2                  at GPIO_ : 2
var volatile bit    pin_A2                    at GPIO_ : 2
alias               pin_GP2                   is pin_A2
alias               pin_T0CKI                 is pin_A2
--
procedure pin_A2'put(bit in x at PORTA_shadow_ : 2) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP3                  at GPIO_ : 3
var volatile bit    pin_A3                    at GPIO_ : 3
alias               pin_GP3                   is pin_A3
--
procedure pin_A3'put(bit in x at PORTA_shadow_ : 3) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP4                  at GPIO_ : 4
var volatile bit    pin_A4                    at GPIO_ : 4
alias               pin_GP4                   is pin_A4
alias               pin_OSC2                  is pin_A4
--
procedure pin_A4'put(bit in x at PORTA_shadow_ : 4) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
var volatile bit    GPIO_GP5                  at GPIO_ : 5
var volatile bit    pin_A5                    at GPIO_ : 5
alias               pin_GP5                   is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_CLKIN                 is pin_A5
--
procedure pin_A5'put(bit in x at PORTA_shadow_ : 5) is
   pragma inline
   PORTA_ = PORTA_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   EECON                     at { 0x21 }
var volatile bit    EECON_RD                  at EECON : 0
var volatile bit    EECON_WR                  at EECON : 1
var volatile bit    EECON_WREN                at EECON : 2
var volatile bit    EECON_WRERR               at EECON : 3
var volatile bit    EECON_FREE                at EECON : 4
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x25 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x26 }
-- ------------------------------------------------
var volatile byte   TRISA_shadow_             at 0xC = 0b1111_1111
--
procedure PORTA_direction'put(byte in x at TRISA_shadow_) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 6
end procedure
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA_shadow_ = (TRISA_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA_shadow_ = (TRISA_shadow_ & 0x0F) | (x << 4)
   asm movf TRISA_shadow_,W
   asm tris 5
end procedure
--
procedure pin_A0_direction'put(bit in x at TRISA_shadow_: 0) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 6
end procedure
alias               pin_GP0_direction         is pin_A0_direction
--
procedure pin_A1_direction'put(bit in x at TRISA_shadow_: 1) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 6
end procedure
alias               pin_GP1_direction         is pin_A1_direction
--
procedure pin_A2_direction'put(bit in x at TRISA_shadow_: 2) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 6
end procedure
alias               pin_GP2_direction         is pin_A2_direction
alias               pin_T0CKI_direction       is pin_A2_direction
--
procedure pin_A3_direction'put(bit in x at TRISA_shadow_: 3) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 6
end procedure
alias               pin_GP3_direction         is pin_A3_direction
--
procedure pin_A4_direction'put(bit in x at TRISA_shadow_: 4) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 6
end procedure
alias               pin_GP4_direction         is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
--
procedure pin_A5_direction'put(bit in x at TRISA_shadow_: 5) is
   pragma inline
   asm movf TRISA_shadow_,W
   asm tris 6
end procedure
alias               pin_GP5_direction         is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_CLKIN_direction       is pin_A5_direction
--
-- ------------------------------------------------
var volatile byte   OPTION_REG_shadow_        at 0xB = 0b1111_1111
--
procedure OPTION_REG'put(byte in x at OPTION_REG_shadow_) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS'put(bit*3 in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0PS                is OPTION_REG_PS
--
procedure OPTION_REG_PSA'put(bit in x at OPTION_REG_shadow_: 3) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_PSA                 is OPTION_REG_PSA
--
procedure OPTION_REG_T0SE'put(bit in x at OPTION_REG_shadow_: 4) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0SE                is OPTION_REG_T0SE
--
procedure OPTION_REG_T0CS'put(bit in x at OPTION_REG_shadow_: 5) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0CS                is OPTION_REG_T0CS
--
procedure OPTION_REG_NGPPU'put(bit in x at OPTION_REG_shadow_: 6) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_NGPWU'put(bit in x at OPTION_REG_shadow_: 7) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS0'put(bit in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS1'put(bit in x at OPTION_REG_shadow_: 1) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS2'put(bit in x at OPTION_REG_shadow_: 2) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 0
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   OPTION_REG_T0CS = OFF        -- T0CKI pin input + output
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- Free shared memory: 0x7-0xA
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0xFFF)
--
pragma fuse_def OSC 0x3 {                -- Oscillator Selection bits
       LP = 0x0                          -- LP Osc With 18 ms DRT
       XT = 0x1                          -- XT Osc With 18 ms DRT
       INTOSC_NOCLKOUT = 0x2             -- INTRC With 1 ms DRT
       RC_NOCLKOUT = 0x3                 -- EXTRC With 1 ms DRT
       }
pragma fuse_def WDT 0x4 {                -- Watchdog Timer Enable bit
       ENABLED = 0x4                     -- Enabled
       DISABLED = 0x0                    -- Disabled
       }
pragma fuse_def CP 0x8 {                 -- Code Protection bit
       DISABLED = 0x8                    -- Code protection off
       ENABLED = 0x0                     -- Code protection on
       }
pragma fuse_def MCLR 0x10 {              -- Master Clear Enable bit
       EXTERNAL = 0x10                   -- RB3/MCLR Functions as MCLR
       INTERNAL = 0x0                    -- RB3/MCLR Functions as RB3
       }
pragma fuse_def IOSCFS 0x20 {            -- Internal Oscillator Frequency Select bit
       F8MHZ = 0x20                      -- 8 MHz INTOSC Speed
       F4MHZ = 0x0                       -- 4 MHz INTOSC Speed
       }
pragma fuse_def CPD 0x40 {               -- Code Protection bit - Flash Data Memory
       DISABLED = 0x40                   -- Code protection off
       ENABLED = 0x0                     -- Code protection on
       }
--

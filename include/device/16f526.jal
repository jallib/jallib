-- ------------------------------------------------
-- Title: JalV2 device include file for 16f526
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic16f526, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures for shadowing of ports and pins
--      to circumvent the read-modify-write problem.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC16F526.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Sat Mar 22 19:15:16 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x0000            -- ID for PIC programmer
const  word  CHIP_ID     = 0xF526            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "16F526"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_12       -- (banks=4)
pragma  target  chip     16F526
pragma  target  bank     0x0020
pragma  target  page     0x0200
pragma  stack            2
pragma  code             1023               -- (excl high mem word)
pragma  eeprom           0x400,64
pragma  ID               0x440,4
pragma  data             0xD-0x1F,0x30-0x3F,0x50-0x5F,0x70-0x7F
pragma  shared           0xD-0xF
--
var volatile byte _pic_accum at 0xF      -- (compiler)
var volatile byte _pic_isr_w at 0xE      -- (compiler)
--
const word   _FUSES_CT             = 1
const word   _FUSE_BASE            = 0xFFF
const word   _FUSES                = 0xFFF
--
var volatile byte   osccal__  at  0x5
var volatile byte   fsr__     at  0x4
asm          bcf    fsr__,5                  -- select bank 0
asm          bcf    fsr__,6                  --   "     "
asm          movwf  osccal__                 -- calibrate INTOSC
--
-- ------------------------------------------------
var volatile byte   INDF                      at { 0x0,0x20,0x40,0x60 }
var volatile byte   _ind                      at { 0x0,0x20,0x40,0x60 }
-- ------------------------------------------------
var volatile byte   TMR0                      at { 0x1,0x41 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x2,0x22,0x42,0x62 }
var volatile byte   _pcl                      at { 0x2,0x22,0x42,0x62 }
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x3,0x23,0x43,0x63 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_NPD                at STATUS : 3
var volatile bit    STATUS_NTO                at STATUS : 4
var volatile bit    STATUS_PA0                at STATUS : 5
var volatile bit    STATUS_CWUF               at STATUS : 6
var volatile bit    STATUS_RBWUF              at STATUS : 7
var volatile bit    STATUS_CARRY              at STATUS : 0
var volatile bit    STATUS_ZERO               at STATUS : 2
var volatile byte   _status                   at { 0x3,0x23,0x43,0x63 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _not_pd                   =  3
const        byte   _not_to                   =  4
const        byte   _pa0                      =  5
const        byte   _cwuf                     =  6
const        byte   _rbwuf                    =  7
const        byte   _carry                    =  0
const        byte   _zero                     =  2
-- ------------------------------------------------
var volatile byte   FSR                       at { 0x4,0x24,0x44,0x64 }
var volatile byte   _fsr                      at { 0x4,0x24,0x44,0x64 }
-- ------------------------------------------------
var volatile byte   OSCCAL                    at { 0x5,0x45 }
var volatile bit*7  OSCCAL_CAL                at OSCCAL : 1
var volatile bit    OSCCAL_CAL0               at OSCCAL : 1
var volatile bit    OSCCAL_CAL1               at OSCCAL : 2
var volatile bit    OSCCAL_CAL2               at OSCCAL : 3
var volatile bit    OSCCAL_CAL3               at OSCCAL : 4
var volatile bit    OSCCAL_CAL4               at OSCCAL : 5
var volatile bit    OSCCAL_CAL5               at OSCCAL : 6
var volatile bit    OSCCAL_CAL6               at OSCCAL : 7
-- ------------------------------------------------
var volatile byte   PORTB_                    at { 0x6,0x46 }
--
var          byte   PORTB                     at PORTB_
var volatile byte   PORTB_shadow_             at 0xD
--
procedure PORTB'put(byte in x at PORTB_shadow_) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
procedure PORTB_low'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0xF0) | (x & 0x0F)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_low'get() return byte is
   return (PORTB & 0x0F)
end function
--
procedure PORTB_high'put(byte in x) is
   PORTB_shadow_ = (PORTB_shadow_ & 0x0F) | (x << 4)
   PORTB_ = PORTB_shadow_
end procedure
function PORTB_high'get() return byte is
   return (PORTB >> 4)
end function
--
var volatile bit*6  PORTB_RB                  at PORTB_ : 0
var volatile bit    PORTB_RB0                 at PORTB : 0
var volatile bit    pin_B0                    at PORTB_ : 0
alias               pin_C1IN_POS              is pin_B0
alias               pin_AN0                   is pin_B0
--
procedure pin_B0'put(bit in x at PORTB_shadow_ : 0) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB1                 at PORTB : 1
var volatile bit    pin_B1                    at PORTB_ : 1
alias               pin_C1IN_NEG              is pin_B1
alias               pin_AN1                   is pin_B1
--
procedure pin_B1'put(bit in x at PORTB_shadow_ : 1) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB2                 at PORTB : 2
var volatile bit    pin_B2                    at PORTB_ : 2
alias               pin_C1OUT                 is pin_B2
alias               pin_AN2                   is pin_B2
--
procedure pin_B2'put(bit in x at PORTB_shadow_ : 2) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB3                 at PORTB : 3
var volatile bit    pin_B3                    at PORTB_ : 3
--
procedure pin_B3'put(bit in x at PORTB_shadow_ : 3) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB4                 at PORTB : 4
var volatile bit    pin_B4                    at PORTB_ : 4
alias               pin_OSC2                  is pin_B4
alias               pin_CLKOUT                is pin_B4
--
procedure pin_B4'put(bit in x at PORTB_shadow_ : 4) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
var volatile bit    PORTB_RB5                 at PORTB : 5
var volatile bit    pin_B5                    at PORTB_ : 5
alias               pin_OSC1                  is pin_B5
alias               pin_CLKIN                 is pin_B5
--
procedure pin_B5'put(bit in x at PORTB_shadow_ : 5) is
   pragma inline
   PORTB_ = PORTB_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTC_                    at { 0x7,0x27,0x47,0x67 }
--
var          byte   PORTC                     at PORTC_
var volatile byte  PORTC_shadow_            
--
procedure PORTC'put(byte in x at PORTC_shadow_) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
procedure PORTC_low'put(byte in x) is
   PORTC_shadow_ = (PORTC_shadow_ & 0xF0) | (x & 0x0F)
   PORTC_ = PORTC_shadow_
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   PORTC_shadow_ = (PORTC_shadow_ & 0x0F) | (x << 4)
   PORTC_ = PORTC_shadow_
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit*6  PORTC_RC                  at PORTC_ : 0
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    pin_C0                    at PORTC_ : 0
alias               pin_C2IN_POS              is pin_C0
--
procedure pin_C0'put(bit in x at PORTC_shadow_ : 0) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    pin_C1                    at PORTC_ : 1
alias               pin_C2IN_NEG              is pin_C1
--
procedure pin_C1'put(bit in x at PORTC_shadow_ : 1) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC2                 at PORTC : 2
var volatile bit    pin_C2                    at PORTC_ : 2
alias               pin_CVREF                 is pin_C2
--
procedure pin_C2'put(bit in x at PORTC_shadow_ : 2) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC3                 at PORTC : 3
var volatile bit    pin_C3                    at PORTC_ : 3
--
procedure pin_C3'put(bit in x at PORTC_shadow_ : 3) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    pin_C4                    at PORTC_ : 4
alias               pin_C2OUT                 is pin_C4
--
procedure pin_C4'put(bit in x at PORTC_shadow_ : 4) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    pin_C5                    at PORTC_ : 5
alias               pin_T0CKI                 is pin_C5
--
procedure pin_C5'put(bit in x at PORTC_shadow_ : 5) is
   pragma inline
   PORTC_ = PORTC_shadow_
end procedure
--
-- ------------------------------------------------
var volatile byte   CM1CON0                   at { 0x8,0x28,0x48,0x68 }
var volatile bit    CM1CON0_NC1WU             at CM1CON0 : 0
var volatile bit    CM1CON0_C1PREF            at CM1CON0 : 1
var volatile bit    CM1CON0_C1NREF            at CM1CON0 : 2
var volatile bit    CM1CON0_C1ON              at CM1CON0 : 3
var volatile bit    CM1CON0_NC1T0CS           at CM1CON0 : 4
var volatile bit    CM1CON0_C1POL             at CM1CON0 : 5
var volatile bit    CM1CON0_NC1OUTEN          at CM1CON0 : 6
var volatile bit    CM1CON0_C1OUT             at CM1CON0 : 7
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x9,0x29,0x49,0x69 }
var volatile bit    ADCON0_ADON               at ADCON0 : 0
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 1
var volatile bit*2  ADCON0_CHS                at ADCON0 : 2
var volatile bit*2  ADCON0_ADCS               at ADCON0 : 4
var volatile bit*2  ADCON0_ANS                at ADCON0 : 6
var volatile bit    ADCON0_GO                 at ADCON0 : 1
var volatile bit    ADCON0_CHS0               at ADCON0 : 2
var volatile bit    ADCON0_CHS1               at ADCON0 : 3
var volatile bit    ADCON0_ADCS0              at ADCON0 : 4
var volatile bit    ADCON0_ADCS1              at ADCON0 : 5
var volatile bit    ADCON0_ANS0               at ADCON0 : 6
var volatile bit    ADCON0_ANS1               at ADCON0 : 7
var volatile bit    ADCON0_NOT_DONE           at ADCON0 : 1
-- ------------------------------------------------
var volatile byte   ADRES                     at { 0xA,0x2A,0x4A,0x6A }
var volatile bit    ADRES_ADRES0              at ADRES : 0
var volatile bit    ADRES_ADRES1              at ADRES : 1
var volatile bit    ADRES_ADRES2              at ADRES : 2
var volatile bit    ADRES_ADRES3              at ADRES : 3
var volatile bit    ADRES_ADRES4              at ADRES : 4
var volatile bit    ADRES_ADRES5              at ADRES : 5
var volatile bit    ADRES_ADRES6              at ADRES : 6
var volatile bit    ADRES_ADRES7              at ADRES : 7
-- ------------------------------------------------
var volatile byte   CM2CON0                   at { 0xB,0x2B,0x4B,0x6B }
var volatile bit    CM2CON0_NC2WU             at CM2CON0 : 0
var volatile bit    CM2CON0_C2PREF1           at CM2CON0 : 1
var volatile bit    CM2CON0_C2NREF            at CM2CON0 : 2
var volatile bit    CM2CON0_C2ON              at CM2CON0 : 3
var volatile bit    CM2CON0_C2PREF2           at CM2CON0 : 4
var volatile bit    CM2CON0_C2POL             at CM2CON0 : 5
var volatile bit    CM2CON0_NC2OUTEN          at CM2CON0 : 6
var volatile bit    CM2CON0_C2OUT             at CM2CON0 : 7
-- ------------------------------------------------
var volatile byte   VRCON                     at { 0xC,0x2C,0x4C,0x6C }
var volatile bit*4  VRCON_VR                  at VRCON : 0
var volatile bit    VRCON_VRR                 at VRCON : 5
var volatile bit    VRCON_VROE                at VRCON : 6
var volatile bit    VRCON_VREN                at VRCON : 7
var volatile bit    VRCON_VR0                 at VRCON : 0
var volatile bit    VRCON_VR1                 at VRCON : 1
var volatile bit    VRCON_VR2                 at VRCON : 2
var volatile bit    VRCON_VR3                 at VRCON : 3
-- ------------------------------------------------
var volatile byte   EECON                     at { 0x21,0x61 }
var volatile bit    EECON_RD                  at EECON : 0
var volatile bit    EECON_WR                  at EECON : 1
var volatile bit    EECON_WREN                at EECON : 2
var volatile bit    EECON_WRERR               at EECON : 3
var volatile bit    EECON_FREE                at EECON : 4
-- ------------------------------------------------
var volatile byte   EEDATA                    at { 0x25,0x65 }
-- ------------------------------------------------
var volatile byte   EEADR                     at { 0x26,0x66 }
-- ------------------------------------------------
var volatile byte  TRISB_shadow_             = 0b1111_1111
--
procedure PORTB_direction'put(byte in x at TRISB_shadow_) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure PORTB_low_direction'put(byte in x) is
   TRISB_shadow_ = (TRISB_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure PORTB_high_direction'put(byte in x) is
   TRISB_shadow_ = (TRISB_shadow_ & 0x0F) | (x << 4)
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B0_direction'put(bit in x at TRISB_shadow_: 0) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
alias               pin_C1IN_POS_direction    is pin_B0_direction
alias               pin_AN0_direction         is pin_B0_direction
--
procedure pin_B1_direction'put(bit in x at TRISB_shadow_: 1) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
alias               pin_C1IN_NEG_direction    is pin_B1_direction
alias               pin_AN1_direction         is pin_B1_direction
--
procedure pin_B2_direction'put(bit in x at TRISB_shadow_: 2) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
alias               pin_C1OUT_direction       is pin_B2_direction
alias               pin_AN2_direction         is pin_B2_direction
--
procedure pin_B3_direction'put(bit in x at TRISB_shadow_: 3) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
--
procedure pin_B4_direction'put(bit in x at TRISB_shadow_: 4) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
alias               pin_OSC2_direction        is pin_B4_direction
alias               pin_CLKOUT_direction      is pin_B4_direction
--
procedure pin_B5_direction'put(bit in x at TRISB_shadow_: 5) is
   pragma inline
   asm movf TRISB_shadow_,W
   asm tris 6
end procedure
alias               pin_OSC1_direction        is pin_B5_direction
alias               pin_CLKIN_direction       is pin_B5_direction
--
-- ------------------------------------------------
var volatile byte  TRISC_shadow_             = 0b1111_1111
--
procedure PORTC_direction'put(byte in x at TRISC_shadow_) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC_shadow_ = (TRISC_shadow_ & 0xF0) | (x & 0x0F)
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC_shadow_ = (TRISC_shadow_ & 0x0F) | (x << 4)
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C0_direction'put(bit in x at TRISC_shadow_: 0) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
alias               pin_C2IN_POS_direction    is pin_C0_direction
--
procedure pin_C1_direction'put(bit in x at TRISC_shadow_: 1) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
alias               pin_C2IN_NEG_direction    is pin_C1_direction
--
procedure pin_C2_direction'put(bit in x at TRISC_shadow_: 2) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
alias               pin_CVREF_direction       is pin_C2_direction
--
procedure pin_C3_direction'put(bit in x at TRISC_shadow_: 3) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
--
procedure pin_C4_direction'put(bit in x at TRISC_shadow_: 4) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
alias               pin_C2OUT_direction       is pin_C4_direction
--
procedure pin_C5_direction'put(bit in x at TRISC_shadow_: 5) is
   pragma inline
   asm movf TRISC_shadow_,W
   asm tris 7
end procedure
alias               pin_T0CKI_direction       is pin_C5_direction
--
-- ------------------------------------------------
var volatile byte  OPTION_REG_shadow_        = 0b1111_1111
--
procedure OPTION_REG'put(byte in x at OPTION_REG_shadow_) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS'put(bit*3 in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0PS                is OPTION_REG_PS
--
procedure OPTION_REG_PSA'put(bit in x at OPTION_REG_shadow_: 3) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_PSA                 is OPTION_REG_PSA
--
procedure OPTION_REG_T0SE'put(bit in x at OPTION_REG_shadow_: 4) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0SE                is OPTION_REG_T0SE
--
procedure OPTION_REG_T0CS'put(bit in x at OPTION_REG_shadow_: 5) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
alias               T0CON_T0CS                is OPTION_REG_T0CS
--
procedure OPTION_REG_NRBPU'put(bit in x at OPTION_REG_shadow_: 6) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_NRBWU'put(bit in x at OPTION_REG_shadow_: 7) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS0'put(bit in x at OPTION_REG_shadow_: 0) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS1'put(bit in x at OPTION_REG_shadow_: 1) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
procedure OPTION_REG_PS2'put(bit in x at OPTION_REG_shadow_: 2) is
   pragma inline
   asm movf OPTION_REG_shadow_,0
   asm option
end procedure
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 2
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable comparator module
procedure comparator_off() is
   pragma inline
   CM1CON0 = 0b1111_1111
   CM2CON0 = 0b1111_1111
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   adc_off()
   comparator_off()
   OPTION_REG_T0CS = OFF        -- T0CKI pin input + output
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_0       -- no Peripheral Pin Selection
--
-- No free shared memory!
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG (0xFFF)
--
pragma fuse_def OSC 0x7 {                -- Oscillator
       LP = 0x0                          -- LP oscillator and 18 ms DRT
       XT = 0x1                          -- XT oscillator and 18 ms DRT
       HS = 0x2                          -- HS oscillator and 18 ms DRT
       EC_NOCLKOUT = 0x3                 -- EC oscillator with RB4 function on RB4/OSC2/CLKOUT and 1 ms DRT
       INTOSC_NOCLKOUT = 0x4             -- INTRC with RB4 function on RB4/OSC2/CLKOUT and 1 ms DRT
       INTOSC_CLKOUT = 0x5               -- INTRC with CLKOUT function on RB4/OSC2/CLKOUT and 1 ms DRT
       RC_NOCLKOUT = 0x6                 -- EXTRC with RB4 function on RB4/OSC2/CLKOUT and 1 ms DRT
       RC_CLKOUT = 0x7                   -- EXTRC with CLKOUT function on RB4/OSC2/CLKOUT and 1 ms DRT
       }
pragma fuse_def WDT 0x8 {                -- Watchdog Timer Enable bit
       ENABLED = 0x8                     -- Enabled
       DISABLED = 0x0                    -- Disabled
       }
pragma fuse_def CP 0x10 {                -- Code Protection bit
       DISABLED = 0x10                   -- Code protection off
       ENABLED = 0x0                     -- Code protection on
       }
pragma fuse_def MCLR 0x20 {              -- Master Clear Enable bit
       EXTERNAL = 0x20                   -- RB3/MCLR functions as MCLR
       INTERNAL = 0x0                    -- RB3/MCLR functions as RB3, MCLR internally tied to Vdd
       }
pragma fuse_def IOSCFS 0x40 {            -- Internal Oscillator Frequency Select
       F8MHZ = 0x40                      -- 8 MHz INTOSC Speed
       F4MHZ = 0x0                       -- 4 MHz INTOSC Speed
       }
pragma fuse_def CPD 0x80 {               -- Code Protection bit - Flash Data Memory
       DISABLED = 0x80                   -- Code protection off
       ENABLED = 0x0                     -- Code protection on
       }
--

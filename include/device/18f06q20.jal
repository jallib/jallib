-- ------------------------------------------------
-- Title: JalV2 device include file for 18f06q20
--
-- Author: Rob Hamerling, Rob Jansen, Copyright (c) 2008..2025 all rights reserved.
--
-- Adapted-by: N/A (generated file, do not change!)
--
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description:
--    Device include file for pic18f06q20, containing:
--    - Declaration of ports and pins of the chip.
--    - Procedures to force the use of the LATx register
--      for output when PORTx or pin_xy is addressed.
--    - Symbolic definitions for configuration bits (fuses)
--    - Some device dependent procedures for common
--      operations, like:
--      . enable_digital_io()
--
-- Sources:
--  - {Microchip\MPLABX V6.25 \packs\Microchip}/.../...//PIC18F06Q20.PIC
--
-- Notes:
--  - This file is generated by <pic2jal.py> script version 2.2
--  - File creation date/time: Fri Mar  7 10:07:16 2025
--
-- ------------------------------------------------
--
const  word  DEVICE_ID   = 0x7A60            -- ID for PIC programmer
const  word  CHIP_ID     = 0xA34C            -- ID in chipdef_jallib
const  byte  PICTYPE[]   = "18F06Q20"
--
include chipdef_jallib                -- common constants
--
pragma  target  cpu      PIC_16       -- (banks=21)
pragma  target  inst     2            -- instruction set : cpu_pic18f_v6
pragma  target  chip     18F06Q20
pragma  target  bank     0x0100
pragma  stack            128
pragma  code             65536
pragma  eeprom           0x380000,256
pragma  ID               0x200000,64
pragma  data             0x500-0x14FF
pragma  shared           0x500-0x55F,0x460-0x4FF
--
var volatile byte _pic_accum at 0x500      -- (compiler)
--
const word   _FUSES_CT             = 26
const byte*3 _FUSE_BASE[_FUSES_CT] = {
                                       0x300000,
                                       0x300001,
                                       0x300002,
                                       0x300003,
                                       0x300004,
                                       0x300005,
                                       0x300006,
                                       0x300007,
                                       0x300008,
                                       0x300009,
                                       0x30000A,
                                       0x30000B,
                                       0x30000C,
                                       0x30000D,
                                       0x30000E,
                                       0x30000F,
                                       0x300010,
                                       0x300011,
                                       0x300012,
                                       0x300013,
                                       0x300014,
                                       0x300015,
                                       0x300016,
                                       0x300017,
                                       0x300018,
                                       0x300019 
                                     }
const byte   _FUSES[_FUSES_CT]     = {
                                       0xFF,     -- CONFIG1
                                       0xFF,     -- CONFIG2
                                       0xFF,     -- CONFIG3
                                       0xFF,     -- CONFIG4
                                       0xFF,     -- CONFIG5
                                       0xFF,     -- CONFIG6
                                       0xFF,     -- CONFIG7
                                       0xFF,     -- CONFIG8
                                       0xFF,     -- CONFIG10
                                       0xFF,     -- CONFIG11
                                       0xFF,     -- CONFIG12
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- RESERVED
                                       0xFF,     -- CONFIG14
                                       0xFF      -- CONFIG9
                                     }
--
-- ------------------------------------------------
var volatile byte   PRLOCK                    at { 0x38 }
var volatile bit    PRLOCK_PRLOCKED           at PRLOCK : 0
-- ------------------------------------------------
var volatile byte   MAINPR                    at { 0x39 }
var volatile bit*3  MAINPR_PR                 at MAINPR : 0
var volatile bit    MAINPR_PR0                at MAINPR : 0
var volatile bit    MAINPR_PR1                at MAINPR : 1
var volatile bit    MAINPR_PR2                at MAINPR : 2
var volatile bit*3  MAINPR_MAINPR             at MAINPR : 0
var volatile bit    MAINPR_MAINPR0            at MAINPR : 0
var volatile bit    MAINPR_MAINPR1            at MAINPR : 1
var volatile bit    MAINPR_MAINPR2            at MAINPR : 2
-- ------------------------------------------------
var volatile byte   ISRPR                     at { 0x3A }
var volatile bit*3  ISRPR_PR                  at ISRPR : 0
var volatile bit    ISRPR_PR0                 at ISRPR : 0
var volatile bit    ISRPR_PR1                 at ISRPR : 1
var volatile bit    ISRPR_PR2                 at ISRPR : 2
var volatile bit*3  ISRPR_ISRPR               at ISRPR : 0
var volatile bit    ISRPR_ISRPR0              at ISRPR : 0
var volatile bit    ISRPR_ISRPR1              at ISRPR : 1
var volatile bit    ISRPR_ISRPR2              at ISRPR : 2
-- ------------------------------------------------
var volatile byte   DMA1PR                    at { 0x3B }
var volatile bit*3  DMA1PR_PR                 at DMA1PR : 0
var volatile bit    DMA1PR_PR0                at DMA1PR : 0
var volatile bit    DMA1PR_PR1                at DMA1PR : 1
var volatile bit    DMA1PR_PR2                at DMA1PR : 2
var volatile bit*3  DMA1PR_DMA1PR             at DMA1PR : 0
var volatile bit    DMA1PR_DMA1PR0            at DMA1PR : 0
var volatile bit    DMA1PR_DMA1PR1            at DMA1PR : 1
var volatile bit    DMA1PR_DMA1PR2            at DMA1PR : 2
-- ------------------------------------------------
var volatile byte   DMA2PR                    at { 0x3C }
var volatile bit*3  DMA2PR_PR                 at DMA2PR : 0
var volatile bit    DMA2PR_PR0                at DMA2PR : 0
var volatile bit    DMA2PR_PR1                at DMA2PR : 1
var volatile bit    DMA2PR_PR2                at DMA2PR : 2
var volatile bit*3  DMA2PR_DMA2PR             at DMA2PR : 0
var volatile bit    DMA2PR_DMA2PR0            at DMA2PR : 0
var volatile bit    DMA2PR_DMA2PR1            at DMA2PR : 1
var volatile bit    DMA2PR_DMA2PR2            at DMA2PR : 2
-- ------------------------------------------------
var volatile byte   DMA3PR                    at { 0x3D }
var volatile bit*3  DMA3PR_PR                 at DMA3PR : 0
var volatile bit    DMA3PR_PR0                at DMA3PR : 0
var volatile bit    DMA3PR_PR1                at DMA3PR : 1
var volatile bit    DMA3PR_PR2                at DMA3PR : 2
var volatile bit*3  DMA3PR_DMA3PR             at DMA3PR : 0
var volatile bit    DMA3PR_DMA3PR0            at DMA3PR : 0
var volatile bit    DMA3PR_DMA3PR1            at DMA3PR : 1
var volatile bit    DMA3PR_DMA3PR2            at DMA3PR : 2
-- ------------------------------------------------
var volatile byte   DMA4PR                    at { 0x3E }
var volatile bit*3  DMA4PR_PR                 at DMA4PR : 0
var volatile bit    DMA4PR_PR0                at DMA4PR : 0
var volatile bit    DMA4PR_PR1                at DMA4PR : 1
var volatile bit    DMA4PR_PR2                at DMA4PR : 2
var volatile bit*3  DMA4PR_DMA4PR             at DMA4PR : 0
var volatile bit    DMA4PR_DMA4PR0            at DMA4PR : 0
var volatile bit    DMA4PR_DMA4PR1            at DMA4PR : 1
var volatile bit    DMA4PR_DMA4PR2            at DMA4PR : 2
-- ------------------------------------------------
var volatile byte   SCANPR                    at { 0x3F }
var volatile bit*3  SCANPR_PR                 at SCANPR : 0
var volatile bit    SCANPR_PR0                at SCANPR : 0
var volatile bit    SCANPR_PR1                at SCANPR : 1
var volatile bit    SCANPR_PR2                at SCANPR : 2
var volatile bit*3  SCANPR_SCANPR             at SCANPR : 0
var volatile bit    SCANPR_SCANPR0            at SCANPR : 0
var volatile bit    SCANPR_SCANPR1            at SCANPR : 1
var volatile bit    SCANPR_SCANPR2            at SCANPR : 2
-- ------------------------------------------------
var volatile byte   DMASELECT                 at { 0x40 }
var volatile bit*3  DMASELECT_SLCT            at DMASELECT : 0
var volatile bit    DMASELECT_SLCT0           at DMASELECT : 0
var volatile bit    DMASELECT_SLCT1           at DMASELECT : 1
var volatile bit    DMASELECT_SLCT2           at DMASELECT : 2
-- ------------------------------------------------
var volatile byte   DMANBUF                   at { 0x41 }
var volatile bit    DMANBUF_BUF0              at DMANBUF : 0
var volatile bit    DMANBUF_BUF1              at DMANBUF : 1
var volatile bit    DMANBUF_BUF2              at DMANBUF : 2
var volatile bit    DMANBUF_BUF3              at DMANBUF : 3
var volatile bit    DMANBUF_BUF4              at DMANBUF : 4
var volatile bit    DMANBUF_BUF5              at DMANBUF : 5
var volatile bit    DMANBUF_BUF6              at DMANBUF : 6
var volatile bit    DMANBUF_BUF7              at DMANBUF : 7
-- ------------------------------------------------
var volatile word   DMANDCNT                  at { 0x42 }
-- ------------------------------------------------
var volatile byte   DMANDCNTL                 at { 0x42 }
var volatile bit    DMANDCNTL_DCNT0           at DMANDCNTL : 0
var volatile bit    DMANDCNTL_DCNT1           at DMANDCNTL : 1
var volatile bit    DMANDCNTL_DCNT2           at DMANDCNTL : 2
var volatile bit    DMANDCNTL_DCNT3           at DMANDCNTL : 3
var volatile bit    DMANDCNTL_DCNT4           at DMANDCNTL : 4
var volatile bit    DMANDCNTL_DCNT5           at DMANDCNTL : 5
var volatile bit    DMANDCNTL_DCNT6           at DMANDCNTL : 6
var volatile bit    DMANDCNTL_DCNT7           at DMANDCNTL : 7
-- ------------------------------------------------
var volatile byte   DMANDCNTH                 at { 0x43 }
var volatile bit*4  DMANDCNTH_DCNT            at DMANDCNTH : 0
var volatile bit    DMANDCNTH_DCNT8           at DMANDCNTH : 0
var volatile bit    DMANDCNTH_DCNT9           at DMANDCNTH : 1
var volatile bit    DMANDCNTH_DCNT10          at DMANDCNTH : 2
var volatile bit    DMANDCNTH_DCNT11          at DMANDCNTH : 3
-- ------------------------------------------------
var volatile word   DMANDPTR                  at { 0x44 }
-- ------------------------------------------------
var volatile byte   DMANDPTRL                 at { 0x44 }
var volatile bit    DMANDPTRL_DPTR0           at DMANDPTRL : 0
var volatile bit    DMANDPTRL_DPTR1           at DMANDPTRL : 1
var volatile bit    DMANDPTRL_DPTR2           at DMANDPTRL : 2
var volatile bit    DMANDPTRL_DPTR3           at DMANDPTRL : 3
var volatile bit    DMANDPTRL_DPTR4           at DMANDPTRL : 4
var volatile bit    DMANDPTRL_DPTR5           at DMANDPTRL : 5
var volatile bit    DMANDPTRL_DPTR6           at DMANDPTRL : 6
var volatile bit    DMANDPTRL_DPTR7           at DMANDPTRL : 7
-- ------------------------------------------------
var volatile byte   DMANDPTRH                 at { 0x45 }
var volatile bit    DMANDPTRH_DPTR8           at DMANDPTRH : 0
var volatile bit    DMANDPTRH_DPTR9           at DMANDPTRH : 1
var volatile bit    DMANDPTRH_DPTR10          at DMANDPTRH : 2
var volatile bit    DMANDPTRH_DPTR11          at DMANDPTRH : 3
var volatile bit    DMANDPTRH_DPTR12          at DMANDPTRH : 4
var volatile bit    DMANDPTRH_DPTR13          at DMANDPTRH : 5
var volatile bit    DMANDPTRH_DPTR14          at DMANDPTRH : 6
var volatile bit    DMANDPTRH_DPTR15          at DMANDPTRH : 7
-- ------------------------------------------------
var volatile word   DMANDSZ                   at { 0x46 }
-- ------------------------------------------------
var volatile byte   DMANDSZL                  at { 0x46 }
var volatile bit    DMANDSZL_DSZ0             at DMANDSZL : 0
var volatile bit    DMANDSZL_DSZ1             at DMANDSZL : 1
var volatile bit    DMANDSZL_DSZ2             at DMANDSZL : 2
var volatile bit    DMANDSZL_DSZ3             at DMANDSZL : 3
var volatile bit    DMANDSZL_DSZ4             at DMANDSZL : 4
var volatile bit    DMANDSZL_DSZ5             at DMANDSZL : 5
var volatile bit    DMANDSZL_DSZ6             at DMANDSZL : 6
var volatile bit    DMANDSZL_DSZ7             at DMANDSZL : 7
-- ------------------------------------------------
var volatile byte   DMANDSZH                  at { 0x47 }
var volatile bit*4  DMANDSZH_DSZ              at DMANDSZH : 0
var volatile bit    DMANDSZH_DSZ8             at DMANDSZH : 0
var volatile bit    DMANDSZH_DSZ9             at DMANDSZH : 1
var volatile bit    DMANDSZH_DSZ10            at DMANDSZH : 2
var volatile bit    DMANDSZH_DSZ11            at DMANDSZH : 3
-- ------------------------------------------------
var volatile word   DMANDSA                   at { 0x48 }
-- ------------------------------------------------
var volatile byte   DMANDSAL                  at { 0x48 }
var volatile bit    DMANDSAL_DSA0             at DMANDSAL : 0
var volatile bit    DMANDSAL_DSA1             at DMANDSAL : 1
var volatile bit    DMANDSAL_DSA2             at DMANDSAL : 2
var volatile bit    DMANDSAL_DSA3             at DMANDSAL : 3
var volatile bit    DMANDSAL_DSA4             at DMANDSAL : 4
var volatile bit    DMANDSAL_DSA5             at DMANDSAL : 5
var volatile bit    DMANDSAL_DSA6             at DMANDSAL : 6
var volatile bit    DMANDSAL_DSA7             at DMANDSAL : 7
-- ------------------------------------------------
var volatile byte   DMANDSAH                  at { 0x49 }
var volatile bit    DMANDSAH_DSA8             at DMANDSAH : 0
var volatile bit    DMANDSAH_DSA9             at DMANDSAH : 1
var volatile bit    DMANDSAH_DSA10            at DMANDSAH : 2
var volatile bit    DMANDSAH_DSA11            at DMANDSAH : 3
var volatile bit    DMANDSAH_DSA12            at DMANDSAH : 4
var volatile bit    DMANDSAH_DSA13            at DMANDSAH : 5
var volatile bit    DMANDSAH_DSA14            at DMANDSAH : 6
var volatile bit    DMANDSAH_DSA15            at DMANDSAH : 7
-- ------------------------------------------------
var volatile word   DMANSCNT                  at { 0x4A }
-- ------------------------------------------------
var volatile byte   DMANSCNTL                 at { 0x4A }
var volatile bit    DMANSCNTL_SCNT0           at DMANSCNTL : 0
var volatile bit    DMANSCNTL_SCNT1           at DMANSCNTL : 1
var volatile bit    DMANSCNTL_SCNT2           at DMANSCNTL : 2
var volatile bit    DMANSCNTL_SCNT3           at DMANSCNTL : 3
var volatile bit    DMANSCNTL_SCNT4           at DMANSCNTL : 4
var volatile bit    DMANSCNTL_SCNT5           at DMANSCNTL : 5
var volatile bit    DMANSCNTL_SCNT6           at DMANSCNTL : 6
var volatile bit    DMANSCNTL_SCNT7           at DMANSCNTL : 7
-- ------------------------------------------------
var volatile byte   DMANSCNTH                 at { 0x4B }
var volatile bit*4  DMANSCNTH_SCNT            at DMANSCNTH : 0
var volatile bit    DMANSCNTH_SCNT8           at DMANSCNTH : 0
var volatile bit    DMANSCNTH_SCNT9           at DMANSCNTH : 1
var volatile bit    DMANSCNTH_SCNT10          at DMANSCNTH : 2
var volatile bit    DMANSCNTH_SCNT11          at DMANSCNTH : 3
-- ------------------------------------------------
var volatile byte*3 DMANSPTR                  at { 0x4C }
-- ------------------------------------------------
var volatile byte   DMANSPTRL                 at { 0x4C }
var volatile bit    DMANSPTRL_SPTR0           at DMANSPTRL : 0
var volatile bit    DMANSPTRL_SPTR1           at DMANSPTRL : 1
var volatile bit    DMANSPTRL_SPTR2           at DMANSPTRL : 2
var volatile bit    DMANSPTRL_SPTR3           at DMANSPTRL : 3
var volatile bit    DMANSPTRL_SPTR4           at DMANSPTRL : 4
var volatile bit    DMANSPTRL_SPTR5           at DMANSPTRL : 5
var volatile bit    DMANSPTRL_SPTR6           at DMANSPTRL : 6
var volatile bit    DMANSPTRL_SPTR7           at DMANSPTRL : 7
-- ------------------------------------------------
var volatile byte   DMANSPTRH                 at { 0x4D }
var volatile bit    DMANSPTRH_SPTR8           at DMANSPTRH : 0
var volatile bit    DMANSPTRH_SPTR9           at DMANSPTRH : 1
var volatile bit    DMANSPTRH_SPTR10          at DMANSPTRH : 2
var volatile bit    DMANSPTRH_SPTR11          at DMANSPTRH : 3
var volatile bit    DMANSPTRH_SPTR12          at DMANSPTRH : 4
var volatile bit    DMANSPTRH_SPTR13          at DMANSPTRH : 5
var volatile bit    DMANSPTRH_SPTR14          at DMANSPTRH : 6
var volatile bit    DMANSPTRH_SPTR15          at DMANSPTRH : 7
-- ------------------------------------------------
var volatile byte   DMANSPTRU                 at { 0x4E }
var volatile bit*6  DMANSPTRU_SPTR            at DMANSPTRU : 0
var volatile bit    DMANSPTRU_SPTR16          at DMANSPTRU : 0
var volatile bit    DMANSPTRU_SPTR17          at DMANSPTRU : 1
var volatile bit    DMANSPTRU_SPTR18          at DMANSPTRU : 2
var volatile bit    DMANSPTRU_SPTR19          at DMANSPTRU : 3
var volatile bit    DMANSPTRU_SPTR20          at DMANSPTRU : 4
var volatile bit    DMANSPTRU_SPTR21          at DMANSPTRU : 5
-- ------------------------------------------------
var volatile word   DMANSSZ                   at { 0x4F }
-- ------------------------------------------------
var volatile byte   DMANSSZL                  at { 0x4F }
var volatile bit    DMANSSZL_SSZ0             at DMANSSZL : 0
var volatile bit    DMANSSZL_SSZ1             at DMANSSZL : 1
var volatile bit    DMANSSZL_SSZ2             at DMANSSZL : 2
var volatile bit    DMANSSZL_SSZ3             at DMANSSZL : 3
var volatile bit    DMANSSZL_SSZ4             at DMANSSZL : 4
var volatile bit    DMANSSZL_SSZ5             at DMANSSZL : 5
var volatile bit    DMANSSZL_SSZ6             at DMANSSZL : 6
var volatile bit    DMANSSZL_SSZ7             at DMANSSZL : 7
-- ------------------------------------------------
var volatile byte   DMANSSZH                  at { 0x50 }
var volatile bit*4  DMANSSZH_SSZ              at DMANSSZH : 0
var volatile bit    DMANSSZH_SSZ8             at DMANSSZH : 0
var volatile bit    DMANSSZH_SSZ9             at DMANSSZH : 1
var volatile bit    DMANSSZH_SSZ10            at DMANSSZH : 2
var volatile bit    DMANSSZH_SSZ11            at DMANSSZH : 3
-- ------------------------------------------------
var volatile byte*3 DMANSSA                   at { 0x51 }
-- ------------------------------------------------
var volatile byte   DMANSSAL                  at { 0x51 }
var volatile bit    DMANSSAL_SSA0             at DMANSSAL : 0
var volatile bit    DMANSSAL_SSA1             at DMANSSAL : 1
var volatile bit    DMANSSAL_SSA2             at DMANSSAL : 2
var volatile bit    DMANSSAL_SSA3             at DMANSSAL : 3
var volatile bit    DMANSSAL_SSA4             at DMANSSAL : 4
var volatile bit    DMANSSAL_SSA5             at DMANSSAL : 5
var volatile bit    DMANSSAL_SSA6             at DMANSSAL : 6
var volatile bit    DMANSSAL_SSA7             at DMANSSAL : 7
-- ------------------------------------------------
var volatile byte   DMANSSAH                  at { 0x52 }
var volatile bit    DMANSSAH_SSA8             at DMANSSAH : 0
var volatile bit    DMANSSAH_SSA9             at DMANSSAH : 1
var volatile bit    DMANSSAH_SSA10            at DMANSSAH : 2
var volatile bit    DMANSSAH_SSA11            at DMANSSAH : 3
var volatile bit    DMANSSAH_SSA12            at DMANSSAH : 4
var volatile bit    DMANSSAH_SSA13            at DMANSSAH : 5
var volatile bit    DMANSSAH_SSA14            at DMANSSAH : 6
var volatile bit    DMANSSAH_SSA15            at DMANSSAH : 7
-- ------------------------------------------------
var volatile byte   DMANSSAU                  at { 0x53 }
var volatile bit*6  DMANSSAU_SSA              at DMANSSAU : 0
var volatile bit    DMANSSAU_SSA16            at DMANSSAU : 0
var volatile bit    DMANSSAU_SSA17            at DMANSSAU : 1
var volatile bit    DMANSSAU_SSA18            at DMANSSAU : 2
var volatile bit    DMANSSAU_SSA19            at DMANSSAU : 3
var volatile bit    DMANSSAU_SSA20            at DMANSSAU : 4
var volatile bit    DMANSSAU_SSA21            at DMANSSAU : 5
-- ------------------------------------------------
var volatile byte   DMANCON0                  at { 0x54 }
var volatile bit    DMANCON0_XIP              at DMANCON0 : 0
var volatile bit    DMANCON0_AIRQEN           at DMANCON0 : 2
var volatile bit    DMANCON0_DGO              at DMANCON0 : 5
var volatile bit    DMANCON0_SIRQEN           at DMANCON0 : 6
var volatile bit    DMANCON0_EN               at DMANCON0 : 7
-- ------------------------------------------------
var volatile byte   DMANCON1                  at { 0x55 }
var volatile bit    DMANCON1_SSTP             at DMANCON1 : 0
var volatile bit*2  DMANCON1_SMODE            at DMANCON1 : 1
var volatile bit*2  DMANCON1_SMR              at DMANCON1 : 3
var volatile bit    DMANCON1_DSTP             at DMANCON1 : 5
var volatile bit*2  DMANCON1_DMODE            at DMANCON1 : 6
-- ------------------------------------------------
var volatile byte   DMANAIRQ                  at { 0x56 }
var volatile bit    DMANAIRQ_AIRQ0            at DMANAIRQ : 0
var volatile bit    DMANAIRQ_AIRQ1            at DMANAIRQ : 1
var volatile bit    DMANAIRQ_AIRQ2            at DMANAIRQ : 2
var volatile bit    DMANAIRQ_AIRQ3            at DMANAIRQ : 3
var volatile bit    DMANAIRQ_AIRQ4            at DMANAIRQ : 4
var volatile bit    DMANAIRQ_AIRQ5            at DMANAIRQ : 5
var volatile bit    DMANAIRQ_AIRQ6            at DMANAIRQ : 6
var volatile bit    DMANAIRQ_AIRQ7            at DMANAIRQ : 7
-- ------------------------------------------------
var volatile byte   DMANSIRQ                  at { 0x57 }
var volatile bit    DMANSIRQ_SIRQ0            at DMANSIRQ : 0
var volatile bit    DMANSIRQ_SIRQ1            at DMANSIRQ : 1
var volatile bit    DMANSIRQ_SIRQ2            at DMANSIRQ : 2
var volatile bit    DMANSIRQ_SIRQ3            at DMANSIRQ : 3
var volatile bit    DMANSIRQ_SIRQ4            at DMANSIRQ : 4
var volatile bit    DMANSIRQ_SIRQ5            at DMANSIRQ : 5
var volatile bit    DMANSIRQ_SIRQ6            at DMANSIRQ : 6
var volatile bit    DMANSIRQ_SIRQ7            at DMANSIRQ : 7
-- ------------------------------------------------
var volatile byte   NVMCON0                   at { 0x58 }
var volatile bit    NVMCON0_GO                at NVMCON0 : 0
var volatile bit    NVMCON0_NDONE             at NVMCON0 : 0
var volatile bit    NVMCON0_NVMGO             at NVMCON0 : 0
-- ------------------------------------------------
var volatile byte   NVMCON1                   at { 0x59 }
var volatile bit*3  NVMCON1_CMD               at NVMCON1 : 0
var volatile bit    NVMCON1_WRERR             at NVMCON1 : 7
var volatile bit*3  NVMCON1_NVMCMD            at NVMCON1 : 0
-- ------------------------------------------------
var volatile byte   NVMLOCK                   at { 0x5A }
-- ------------------------------------------------
var volatile byte*3 NVMADR                    at { 0x5B }
-- ------------------------------------------------
var volatile byte   NVMADRL                   at { 0x5B }
var volatile bit    NVMADRL_NVMADR0           at NVMADRL : 0
var volatile bit    NVMADRL_NVMADR1           at NVMADRL : 1
var volatile bit    NVMADRL_NVMADR2           at NVMADRL : 2
var volatile bit    NVMADRL_NVMADR3           at NVMADRL : 3
var volatile bit    NVMADRL_NVMADR4           at NVMADRL : 4
var volatile bit    NVMADRL_NVMADR5           at NVMADRL : 5
var volatile bit    NVMADRL_NVMADR6           at NVMADRL : 6
var volatile bit    NVMADRL_NVMADR7           at NVMADRL : 7
-- ------------------------------------------------
var volatile byte   NVMADRH                   at { 0x5C }
var volatile bit    NVMADRH_NVMADR8           at NVMADRH : 0
var volatile bit    NVMADRH_NVMADR9           at NVMADRH : 1
var volatile bit    NVMADRH_NVMADR10          at NVMADRH : 2
var volatile bit    NVMADRH_NVMADR11          at NVMADRH : 3
var volatile bit    NVMADRH_NVMADR12          at NVMADRH : 4
var volatile bit    NVMADRH_NVMADR13          at NVMADRH : 5
var volatile bit    NVMADRH_NVMADR14          at NVMADRH : 6
var volatile bit    NVMADRH_NVMADR15          at NVMADRH : 7
-- ------------------------------------------------
var volatile byte   NVMADRU                   at { 0x5D }
var volatile bit*6  NVMADRU_NVMADRU           at NVMADRU : 0
var volatile bit    NVMADRU_NVMADR16          at NVMADRU : 0
var volatile bit    NVMADRU_NVMADR17          at NVMADRU : 1
var volatile bit    NVMADRU_NVMADR18          at NVMADRU : 2
var volatile bit    NVMADRU_NVMADR19          at NVMADRU : 3
var volatile bit    NVMADRU_NVMADR20          at NVMADRU : 4
var volatile bit    NVMADRU_NVMADR21          at NVMADRU : 5
-- ------------------------------------------------
var volatile word   NVMDAT                    at { 0x5E }
-- ------------------------------------------------
var volatile byte   NVMDATL                   at { 0x5E }
var volatile bit    NVMDATL_NVMDAT0           at NVMDATL : 0
var volatile bit    NVMDATL_NVMDAT1           at NVMDATL : 1
var volatile bit    NVMDATL_NVMDAT2           at NVMDATL : 2
var volatile bit    NVMDATL_NVMDAT3           at NVMDATL : 3
var volatile bit    NVMDATL_NVMDAT4           at NVMDATL : 4
var volatile bit    NVMDATL_NVMDAT5           at NVMDATL : 5
var volatile bit    NVMDATL_NVMDAT6           at NVMDATL : 6
var volatile bit    NVMDATL_NVMDAT7           at NVMDATL : 7
-- ------------------------------------------------
var volatile byte   NVMDATH                   at { 0x5F }
var volatile bit    NVMDATH_NVMDAT8           at NVMDATH : 0
var volatile bit    NVMDATH_NVMDAT9           at NVMDATH : 1
var volatile bit    NVMDATH_NVMDAT10          at NVMDATH : 2
var volatile bit    NVMDATH_NVMDAT11          at NVMDATH : 3
var volatile bit    NVMDATH_NVMDAT12          at NVMDATH : 4
var volatile bit    NVMDATH_NVMDAT13          at NVMDATH : 5
var volatile bit    NVMDATH_NVMDAT14          at NVMDATH : 6
var volatile bit    NVMDATH_NVMDAT15          at NVMDATH : 7
-- ------------------------------------------------
var volatile dword  CRCDATA                   at { 0x60 }
-- ------------------------------------------------
var volatile byte   CRCDATAL                  at { 0x60 }
var volatile bit    CRCDATAL_DATA0            at CRCDATAL : 0
var volatile bit    CRCDATAL_DATA1            at CRCDATAL : 1
var volatile bit    CRCDATAL_DATA2            at CRCDATAL : 2
var volatile bit    CRCDATAL_DATA3            at CRCDATAL : 3
var volatile bit    CRCDATAL_DATA4            at CRCDATAL : 4
var volatile bit    CRCDATAL_DATA5            at CRCDATAL : 5
var volatile bit    CRCDATAL_DATA6            at CRCDATAL : 6
var volatile bit    CRCDATAL_DATA7            at CRCDATAL : 7
-- ------------------------------------------------
var volatile byte   CRCDATAH                  at { 0x61 }
var volatile bit    CRCDATAH_DATA8            at CRCDATAH : 0
var volatile bit    CRCDATAH_DATA9            at CRCDATAH : 1
var volatile bit    CRCDATAH_DATA10           at CRCDATAH : 2
var volatile bit    CRCDATAH_DATA11           at CRCDATAH : 3
var volatile bit    CRCDATAH_DATA12           at CRCDATAH : 4
var volatile bit    CRCDATAH_DATA13           at CRCDATAH : 5
var volatile bit    CRCDATAH_DATA14           at CRCDATAH : 6
var volatile bit    CRCDATAH_DATA15           at CRCDATAH : 7
-- ------------------------------------------------
var volatile byte   CRCDATAU                  at { 0x62 }
var volatile bit    CRCDATAU_DATA16           at CRCDATAU : 0
var volatile bit    CRCDATAU_DATA17           at CRCDATAU : 1
var volatile bit    CRCDATAU_DATA18           at CRCDATAU : 2
var volatile bit    CRCDATAU_DATA19           at CRCDATAU : 3
var volatile bit    CRCDATAU_DATA20           at CRCDATAU : 4
var volatile bit    CRCDATAU_DATA21           at CRCDATAU : 5
var volatile bit    CRCDATAU_DATA22           at CRCDATAU : 6
var volatile bit    CRCDATAU_DATA23           at CRCDATAU : 7
-- ------------------------------------------------
var volatile byte   CRCDATAT                  at { 0x63 }
var volatile bit    CRCDATAT_DATA24           at CRCDATAT : 0
var volatile bit    CRCDATAT_DATA25           at CRCDATAT : 1
var volatile bit    CRCDATAT_DATA26           at CRCDATAT : 2
var volatile bit    CRCDATAT_DATA27           at CRCDATAT : 3
var volatile bit    CRCDATAT_DATA28           at CRCDATAT : 4
var volatile bit    CRCDATAT_DATA29           at CRCDATAT : 5
var volatile bit    CRCDATAT_DATA30           at CRCDATAT : 6
var volatile bit    CRCDATAT_DATA31           at CRCDATAT : 7
-- ------------------------------------------------
var volatile dword  CRCOUT                    at { 0x64 }
var volatile byte   CRCOUTL_                  at { 0x64 }
--
procedure CRCOUTL'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   CRCOUTL_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCOUTL'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   x = CRCOUTL_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCOUTL_OUT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCOUTL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCOUTL_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTL_OUT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTL_OUT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCSHFTL_                 at { 0x64 }
--
procedure CRCSHFTL'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   CRCSHFTL_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCSHFTL'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   x = CRCSHFTL_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCSHFTL_SHIFT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCSHFTL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCSHFTL_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTL_SHIFT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTL_SHIFT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCXORL_                  at { 0x64 }
--
procedure CRCXORL'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   CRCXORL_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCXORL'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   x = CRCXORL_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCXORL_XOR'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCXORL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCXORL_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORL_XOR7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORL_XOR7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCOUTH_                  at { 0x65 }
--
procedure CRCOUTH'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   CRCOUTH_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCOUTH'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   x = CRCOUTH_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCOUTH_OUT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCOUTH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCOUTH_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT8'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT8'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT9'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT9'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT10'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT10'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT11'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT11'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT12'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT12'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT13'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT13'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT14'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT14'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTH_OUT15'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTH_OUT15'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCSHFTH_                 at { 0x65 }
--
procedure CRCSHFTH'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   CRCSHFTH_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCSHFTH'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   x = CRCSHFTH_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCSHFTH_SHIFT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCSHFTH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCSHFTH_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT8'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT8'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT9'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT9'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT10'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT10'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT11'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT11'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT12'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT12'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT13'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT13'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT14'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT14'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTH_SHIFT15'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTH_SHIFT15'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCXORH_                  at { 0x65 }
--
procedure CRCXORH'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   CRCXORH_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCXORH'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   x = CRCXORH_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCXORH_XOR'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCXORH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCXORH_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR8'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR8'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR9'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR9'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR10'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR10'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR11'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR11'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR12'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR12'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR13'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR13'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR14'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR14'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORH_XOR15'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORH_XOR15'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCOUTU_                  at { 0x66 }
--
procedure CRCOUTU'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   CRCOUTU_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCOUTU'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   x = CRCOUTU_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCOUTU_OUT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCOUTU_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCOUTU_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT16'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT16'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT17'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT17'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT18'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT18'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT19'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT19'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT20'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT20'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT21'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT21'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT22'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT22'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTU_OUT23'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTU_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTU_OUT23'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTU_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCSHFTU_                 at { 0x66 }
--
procedure CRCSHFTU'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   CRCSHFTU_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCSHFTU'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   x = CRCSHFTU_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCSHFTU_SHIFT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCSHFTU_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCSHFTU_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT16'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT16'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT17'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT17'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT18'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT18'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT19'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT19'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT20'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT20'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT21'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT21'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT22'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT22'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTU_SHIFT23'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTU_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTU_SHIFT23'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTU_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCXORU_                  at { 0x66 }
--
procedure CRCXORU'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   CRCXORU_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCXORU'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   x = CRCXORU_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCXORU_XOR'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCXORU_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCXORU_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR16'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR16'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR17'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR17'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR18'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR18'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR19'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR19'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR20'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR20'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR21'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR21'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR22'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR22'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORU_XOR23'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORU_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORU_XOR23'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORU_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCOUTT_                  at { 0x67 }
--
procedure CRCOUTT'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   CRCOUTT_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCOUTT'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x00
   x = CRCOUTT_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCOUTT_OUT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCOUTT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCOUTT_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT24'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT24'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT25'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT25'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT26'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT26'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT27'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT27'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT28'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT28'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT29'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT29'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT30'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT30'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCOUTT_OUT31'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCOUTT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCOUTT_OUT31'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCOUTT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCSHFTT_                 at { 0x67 }
--
procedure CRCSHFTT'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   CRCSHFTT_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCSHFTT'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x04
   x = CRCSHFTT_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCSHFTT_SHIFT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCSHFTT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCSHFTT_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT24'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT24'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT25'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT25'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT26'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT26'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT27'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT27'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT28'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT28'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT29'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT29'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT30'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT30'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCSHFTT_SHIFT31'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCSHFTT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCSHFTT_SHIFT31'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCSHFTT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   CRCXORT_                  at { 0x67 }
--
procedure CRCXORT'put(byte in x) is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   CRCXORT_ = x
   _control_sfr = _saved_sfr
end procedure
function CRCXORT'get() return byte is
   var volatile byte _control_sfr at 0xC
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x0C)
   _control_sfr = _control_sfr | 0x08
   x = CRCXORT_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure CRCXORT_XOR'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at CRCXORT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at CRCXORT_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR24'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR24'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR25'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR25'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR26'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR26'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR27'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR27'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR28'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR28'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR29'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR29'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR30'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR30'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure CRCXORT_XOR31'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at CRCXORT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function CRCXORT_XOR31'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at CRCXORT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
-- ------------------------------------------------
var volatile byte   CRCCON0                   at { 0x68 }
var volatile bit    CRCCON0_FULL              at CRCCON0 : 0
var volatile bit    CRCCON0_SHIFTM            at CRCCON0 : 1
var volatile bit*2  CRCCON0_SETUP             at CRCCON0 : 2
var volatile bit    CRCCON0_ACCMOD            at CRCCON0 : 4
var volatile bit    CRCCON0_CRCBUSY           at CRCCON0 : 5
var volatile bit    CRCCON0_CRCGO             at CRCCON0 : 6
var volatile bit    CRCCON0_CRCEN             at CRCCON0 : 7
var volatile bit    CRCCON0_LENDIAN           at CRCCON0 : 1
var volatile bit    CRCCON0_SETUP0            at CRCCON0 : 2
var volatile bit    CRCCON0_SETUP1            at CRCCON0 : 3
var volatile bit    CRCCON0_ACCM              at CRCCON0 : 4
var volatile bit    CRCCON0_BUSY              at CRCCON0 : 5
var volatile bit    CRCCON0_GO                at CRCCON0 : 6
var volatile bit    CRCCON0_EN                at CRCCON0 : 7
-- ------------------------------------------------
var volatile byte   CRCCON1                   at { 0x69 }
var volatile bit*5  CRCCON1_PLEN              at CRCCON1 : 0
var volatile bit    CRCCON1_PLEN0             at CRCCON1 : 0
var volatile bit    CRCCON1_PLEN1             at CRCCON1 : 1
var volatile bit    CRCCON1_PLEN2             at CRCCON1 : 2
var volatile bit    CRCCON1_PLEN3             at CRCCON1 : 3
var volatile bit    CRCCON1_PLEN4             at CRCCON1 : 4
-- ------------------------------------------------
var volatile byte   CRCCON2                   at { 0x6A }
var volatile bit*5  CRCCON2_DLEN              at CRCCON2 : 0
var volatile bit    CRCCON2_DLEN0             at CRCCON2 : 0
var volatile bit    CRCCON2_DLEN1             at CRCCON2 : 1
var volatile bit    CRCCON2_DLEN2             at CRCCON2 : 2
var volatile bit    CRCCON2_DLEN3             at CRCCON2 : 3
var volatile bit    CRCCON2_DLEN4             at CRCCON2 : 4
-- ------------------------------------------------
var volatile byte*3 SCANLADR                  at { 0x6B }
-- ------------------------------------------------
var volatile byte   SCANLADRL                 at { 0x6B }
var volatile bit    SCANLADRL_LADR0           at SCANLADRL : 0
var volatile bit    SCANLADRL_LADR1           at SCANLADRL : 1
var volatile bit    SCANLADRL_LADR2           at SCANLADRL : 2
var volatile bit    SCANLADRL_LADR3           at SCANLADRL : 3
var volatile bit    SCANLADRL_LADR4           at SCANLADRL : 4
var volatile bit    SCANLADRL_LADR5           at SCANLADRL : 5
var volatile bit    SCANLADRL_LADR6           at SCANLADRL : 6
var volatile bit    SCANLADRL_LADR7           at SCANLADRL : 7
var volatile bit    SCANLADRL_SCANLADR0       at SCANLADRL : 0
var volatile bit    SCANLADRL_SCANLADR1       at SCANLADRL : 1
var volatile bit    SCANLADRL_SCANLADR2       at SCANLADRL : 2
var volatile bit    SCANLADRL_SCANLADR3       at SCANLADRL : 3
var volatile bit    SCANLADRL_SCANLADR4       at SCANLADRL : 4
var volatile bit    SCANLADRL_SCANLADR5       at SCANLADRL : 5
var volatile bit    SCANLADRL_SCANLADR6       at SCANLADRL : 6
var volatile bit    SCANLADRL_SCANLADR7       at SCANLADRL : 7
-- ------------------------------------------------
var volatile byte   SCANLADRH                 at { 0x6C }
var volatile bit    SCANLADRH_LADR8           at SCANLADRH : 0
var volatile bit    SCANLADRH_LADR9           at SCANLADRH : 1
var volatile bit    SCANLADRH_LADR10          at SCANLADRH : 2
var volatile bit    SCANLADRH_LADR11          at SCANLADRH : 3
var volatile bit    SCANLADRH_LADR12          at SCANLADRH : 4
var volatile bit    SCANLADRH_LADR13          at SCANLADRH : 5
var volatile bit    SCANLADRH_LADR14          at SCANLADRH : 6
var volatile bit    SCANLADRH_LADR15          at SCANLADRH : 7
var volatile bit    SCANLADRH_SCANLADR8       at SCANLADRH : 0
var volatile bit    SCANLADRH_SCANLADR9       at SCANLADRH : 1
var volatile bit    SCANLADRH_SCANLADR10      at SCANLADRH : 2
var volatile bit    SCANLADRH_SCANLADR11      at SCANLADRH : 3
var volatile bit    SCANLADRH_SCANLADR12      at SCANLADRH : 4
var volatile bit    SCANLADRH_SCANLADR13      at SCANLADRH : 5
var volatile bit    SCANLADRH_SCANLADR14      at SCANLADRH : 6
var volatile bit    SCANLADRH_SCANLADR15      at SCANLADRH : 7
-- ------------------------------------------------
var volatile byte   SCANLADRU                 at { 0x6D }
var volatile bit*6  SCANLADRU_LADR            at SCANLADRU : 0
var volatile bit    SCANLADRU_LADR16          at SCANLADRU : 0
var volatile bit    SCANLADRU_LADR17          at SCANLADRU : 1
var volatile bit    SCANLADRU_LADR18          at SCANLADRU : 2
var volatile bit    SCANLADRU_LADR19          at SCANLADRU : 3
var volatile bit    SCANLADRU_LADR20          at SCANLADRU : 4
var volatile bit    SCANLADRU_LADR21          at SCANLADRU : 5
var volatile bit*6  SCANLADRU_SCANLADR        at SCANLADRU : 0
var volatile bit    SCANLADRU_SCANLADR16      at SCANLADRU : 0
var volatile bit    SCANLADRU_SCANLADR17      at SCANLADRU : 1
var volatile bit    SCANLADRU_SCANLADR18      at SCANLADRU : 2
var volatile bit    SCANLADRU_SCANLADR19      at SCANLADRU : 3
var volatile bit    SCANLADRU_SCANLADR20      at SCANLADRU : 4
var volatile bit    SCANLADRU_SCANLADR21      at SCANLADRU : 5
-- ------------------------------------------------
var volatile byte*3 SCANHADR                  at { 0x6E }
-- ------------------------------------------------
var volatile byte   SCANHADRL                 at { 0x6E }
var volatile bit    SCANHADRL_HADR0           at SCANHADRL : 0
var volatile bit    SCANHADRL_HADR1           at SCANHADRL : 1
var volatile bit    SCANHADRL_HADR2           at SCANHADRL : 2
var volatile bit    SCANHADRL_HADR3           at SCANHADRL : 3
var volatile bit    SCANHADRL_HADR4           at SCANHADRL : 4
var volatile bit    SCANHADRL_HADR5           at SCANHADRL : 5
var volatile bit    SCANHADRL_HADR6           at SCANHADRL : 6
var volatile bit    SCANHADRL_HADR7           at SCANHADRL : 7
var volatile bit    SCANHADRL_SCANHADR0       at SCANHADRL : 0
var volatile bit    SCANHADRL_SCANHADR1       at SCANHADRL : 1
var volatile bit    SCANHADRL_SCANHADR2       at SCANHADRL : 2
var volatile bit    SCANHADRL_SCANHADR3       at SCANHADRL : 3
var volatile bit    SCANHADRL_SCANHADR4       at SCANHADRL : 4
var volatile bit    SCANHADRL_SCANHADR5       at SCANHADRL : 5
var volatile bit    SCANHADRL_SCANHADR6       at SCANHADRL : 6
var volatile bit    SCANHADRL_SCANHADR7       at SCANHADRL : 7
-- ------------------------------------------------
var volatile byte   SCANHADRH                 at { 0x6F }
var volatile bit    SCANHADRH_HADR8           at SCANHADRH : 0
var volatile bit    SCANHADRH_HADR9           at SCANHADRH : 1
var volatile bit    SCANHADRH_HADR10          at SCANHADRH : 2
var volatile bit    SCANHADRH_HADR11          at SCANHADRH : 3
var volatile bit    SCANHADRH_HADR12          at SCANHADRH : 4
var volatile bit    SCANHADRH_HADR13          at SCANHADRH : 5
var volatile bit    SCANHADRH_HADR14          at SCANHADRH : 6
var volatile bit    SCANHADRH_HADR15          at SCANHADRH : 7
var volatile bit    SCANHADRH_SCANHADR8       at SCANHADRH : 0
var volatile bit    SCANHADRH_SCANHADR9       at SCANHADRH : 1
var volatile bit    SCANHADRH_SCANHADR10      at SCANHADRH : 2
var volatile bit    SCANHADRH_SCANHADR11      at SCANHADRH : 3
var volatile bit    SCANHADRH_SCANHADR12      at SCANHADRH : 4
var volatile bit    SCANHADRH_SCANHADR13      at SCANHADRH : 5
var volatile bit    SCANHADRH_SCANHADR14      at SCANHADRH : 6
var volatile bit    SCANHADRH_SCANHADR15      at SCANHADRH : 7
-- ------------------------------------------------
var volatile byte   SCANHADRU                 at { 0x70 }
var volatile bit*6  SCANHADRU_HADR            at SCANHADRU : 0
var volatile bit    SCANHADRU_HADR16          at SCANHADRU : 0
var volatile bit    SCANHADRU_HADR17          at SCANHADRU : 1
var volatile bit    SCANHADRU_HADR18          at SCANHADRU : 2
var volatile bit    SCANHADRU_HADR19          at SCANHADRU : 3
var volatile bit    SCANHADRU_HADR20          at SCANHADRU : 4
var volatile bit    SCANHADRU_HADR21          at SCANHADRU : 5
var volatile bit*6  SCANHADRU_SCANHADR        at SCANHADRU : 0
var volatile bit    SCANHADRU_SCANHADR16      at SCANHADRU : 0
var volatile bit    SCANHADRU_SCANHADR17      at SCANHADRU : 1
var volatile bit    SCANHADRU_SCANHADR18      at SCANHADRU : 2
var volatile bit    SCANHADRU_SCANHADR19      at SCANHADRU : 3
var volatile bit    SCANHADRU_SCANHADR20      at SCANHADRU : 4
var volatile bit    SCANHADRU_SCANHADR21      at SCANHADRU : 5
-- ------------------------------------------------
var volatile byte   SCANCON0                  at { 0x71 }
var volatile bit    SCANCON0_BUSY             at SCANCON0 : 0
var volatile bit    SCANCON0_BURSTMD          at SCANCON0 : 1
var volatile bit    SCANCON0_MREG             at SCANCON0 : 2
var volatile bit    SCANCON0_SGO              at SCANCON0 : 5
var volatile bit    SCANCON0_TRIGEN           at SCANCON0 : 6
var volatile bit    SCANCON0_EN               at SCANCON0 : 7
var volatile bit    SCANCON0_SCANEN           at SCANCON0 : 7
-- ------------------------------------------------
var volatile byte   SCANTRIG                  at { 0x72 }
var volatile bit*4  SCANTRIG_TSEL             at SCANTRIG : 0
var volatile bit    SCANTRIG_TSEL0            at SCANTRIG : 0
var volatile bit    SCANTRIG_TSEL1            at SCANTRIG : 1
var volatile bit    SCANTRIG_TSEL2            at SCANTRIG : 2
var volatile bit    SCANTRIG_TSEL3            at SCANTRIG : 3
var volatile bit*4  SCANTRIG_SCANTSEL         at SCANTRIG : 0
-- ------------------------------------------------
var volatile byte   BORCON                    at { 0x73 }
var volatile bit    BORCON_BORRDY             at BORCON : 0
var volatile bit    BORCON_SBOREN             at BORCON : 7
-- ------------------------------------------------
var volatile byte   WDTCON0                   at { 0x74 }
var volatile bit    WDTCON0_SEN               at WDTCON0 : 0
var volatile bit*5  WDTCON0_PS                at WDTCON0 : 1
var volatile bit    WDTCON0_SWDTEN            at WDTCON0 : 0
var volatile bit*5  WDTCON0_WDTPS             at WDTCON0 : 1
var volatile bit    WDTCON0_WDTSEN            at WDTCON0 : 0
var volatile bit    WDTCON0_PS0               at WDTCON0 : 1
var volatile bit    WDTCON0_PS1               at WDTCON0 : 2
var volatile bit    WDTCON0_PS2               at WDTCON0 : 3
var volatile bit    WDTCON0_PS3               at WDTCON0 : 4
var volatile bit    WDTCON0_PS4               at WDTCON0 : 5
var volatile bit    WDTCON0_WDTPS0            at WDTCON0 : 1
var volatile bit    WDTCON0_WDTPS1            at WDTCON0 : 2
var volatile bit    WDTCON0_WDTPS2            at WDTCON0 : 3
var volatile bit    WDTCON0_WDTPS3            at WDTCON0 : 4
var volatile bit    WDTCON0_WDTPS4            at WDTCON0 : 5
-- ------------------------------------------------
var volatile byte   WDTCON1                   at { 0x75 }
var volatile bit*3  WDTCON1_WINDOW            at WDTCON1 : 0
var volatile bit*3  WDTCON1_CS                at WDTCON1 : 4
var volatile bit    WDTCON1_WINDOW0           at WDTCON1 : 0
var volatile bit    WDTCON1_WINDOW1           at WDTCON1 : 1
var volatile bit    WDTCON1_WINDOW2           at WDTCON1 : 2
var volatile bit*3  WDTCON1_WDTCS             at WDTCON1 : 4
var volatile bit*3  WDTCON1_WDTWINDOW         at WDTCON1 : 0
var volatile bit    WDTCON1_CS0               at WDTCON1 : 4
var volatile bit    WDTCON1_CS1               at WDTCON1 : 5
var volatile bit    WDTCON1_CS2               at WDTCON1 : 6
var volatile bit    WDTCON1_WDTWINDOW0        at WDTCON1 : 0
var volatile bit    WDTCON1_WDTWINDOW1        at WDTCON1 : 1
var volatile bit    WDTCON1_WDTWINDOW2        at WDTCON1 : 2
var volatile bit    WDTCON1_WDTCS0            at WDTCON1 : 4
var volatile bit    WDTCON1_WDTCS1            at WDTCON1 : 5
var volatile bit    WDTCON1_WDTCS2            at WDTCON1 : 6
-- ------------------------------------------------
var volatile word   WDTPS                     at { 0x76 }
-- ------------------------------------------------
var volatile byte   WDTPSL                    at { 0x76 }
var volatile bit    WDTPSL_PSCNT0             at WDTPSL : 0
var volatile bit    WDTPSL_PSCNT1             at WDTPSL : 1
var volatile bit    WDTPSL_PSCNT2             at WDTPSL : 2
var volatile bit    WDTPSL_PSCNT3             at WDTPSL : 3
var volatile bit    WDTPSL_PSCNT4             at WDTPSL : 4
var volatile bit    WDTPSL_PSCNT5             at WDTPSL : 5
var volatile bit    WDTPSL_PSCNT6             at WDTPSL : 6
var volatile bit    WDTPSL_PSCNT7             at WDTPSL : 7
-- ------------------------------------------------
var volatile byte   WDTPSH                    at { 0x77 }
var volatile bit    WDTPSH_PSCNT8             at WDTPSH : 0
var volatile bit    WDTPSH_PSCNT9             at WDTPSH : 1
var volatile bit    WDTPSH_PSCNT10            at WDTPSH : 2
var volatile bit    WDTPSH_PSCNT11            at WDTPSH : 3
var volatile bit    WDTPSH_PSCNT12            at WDTPSH : 4
var volatile bit    WDTPSH_PSCNT13            at WDTPSH : 5
var volatile bit    WDTPSH_PSCNT14            at WDTPSH : 6
var volatile bit    WDTPSH_PSCNT15            at WDTPSH : 7
-- ------------------------------------------------
var volatile byte   WDTTMR                    at { 0x78 }
var volatile bit    WDTTMR_PSCNT16            at WDTTMR : 0
var volatile bit    WDTTMR_PSCNT17            at WDTTMR : 1
var volatile bit    WDTTMR_STATE              at WDTTMR : 2
var volatile bit*5  WDTTMR_TMR                at WDTTMR : 3
var volatile bit    WDTTMR_WDTPSCNT16         at WDTTMR : 0
var volatile bit    WDTTMR_WDTPSCNT17         at WDTTMR : 1
var volatile bit    WDTTMR_WDTSTATE           at WDTTMR : 2
var volatile bit    WDTTMR_WDTTMR0            at WDTTMR : 3
var volatile bit    WDTTMR_WDTTMR1            at WDTTMR : 4
var volatile bit    WDTTMR_WDTTMR2            at WDTTMR : 5
var volatile bit    WDTTMR_WDTTMR3            at WDTTMR : 6
var volatile bit    WDTTMR_WDTTMR4            at WDTTMR : 7
var volatile bit*5  WDTTMR_WDTTMR             at WDTTMR : 3
-- ------------------------------------------------
var volatile byte   VREGCON                   at { 0x79 }
var volatile bit*2  VREGCON_VREGPM            at VREGCON : 0
var volatile bit*2  VREGCON_PMSYS             at VREGCON : 4
var volatile bit    VREGCON_VREGPM0           at VREGCON : 0
var volatile bit    VREGCON_VREGPM1           at VREGCON : 1
var volatile bit    VREGCON_PMSYS0            at VREGCON : 4
var volatile bit    VREGCON_PMSYS1            at VREGCON : 5
-- ------------------------------------------------
var volatile byte   OSCCON1                   at { 0x7A }
var volatile bit*4  OSCCON1_NDIV              at OSCCON1 : 0
var volatile bit*3  OSCCON1_NOSC              at OSCCON1 : 4
var volatile bit    OSCCON1_NDIV0             at OSCCON1 : 0
var volatile bit    OSCCON1_NDIV1             at OSCCON1 : 1
var volatile bit    OSCCON1_NDIV2             at OSCCON1 : 2
var volatile bit    OSCCON1_NDIV3             at OSCCON1 : 3
var volatile bit    OSCCON1_NOSC0             at OSCCON1 : 4
var volatile bit    OSCCON1_NOSC1             at OSCCON1 : 5
var volatile bit    OSCCON1_NOSC2             at OSCCON1 : 6
-- ------------------------------------------------
var volatile byte   OSCCON2                   at { 0x7B }
var volatile bit*4  OSCCON2_CDIV              at OSCCON2 : 0
var volatile bit*3  OSCCON2_COSC              at OSCCON2 : 4
var volatile bit    OSCCON2_CDIV0             at OSCCON2 : 0
var volatile bit    OSCCON2_CDIV1             at OSCCON2 : 1
var volatile bit    OSCCON2_CDIV2             at OSCCON2 : 2
var volatile bit    OSCCON2_CDIV3             at OSCCON2 : 3
var volatile bit    OSCCON2_COSC0             at OSCCON2 : 4
var volatile bit    OSCCON2_COSC1             at OSCCON2 : 5
var volatile bit    OSCCON2_COSC2             at OSCCON2 : 6
-- ------------------------------------------------
var volatile byte   OSCCON3                   at { 0x7C }
var volatile bit    OSCCON3_NOSCR             at OSCCON3 : 3
var volatile bit    OSCCON3_ORDY              at OSCCON3 : 4
var volatile bit    OSCCON3_SOSCPWR           at OSCCON3 : 6
var volatile bit    OSCCON3_CSWHOLD           at OSCCON3 : 7
-- ------------------------------------------------
var volatile byte   OSCSTAT                   at { 0x7D }
var volatile bit    OSCSTAT_PLLR              at OSCSTAT : 0
var volatile bit    OSCSTAT_SFOR              at OSCSTAT : 1
var volatile bit    OSCSTAT_ADOR              at OSCSTAT : 2
var volatile bit    OSCSTAT_SOR               at OSCSTAT : 3
var volatile bit    OSCSTAT_LFOR              at OSCSTAT : 4
var volatile bit    OSCSTAT_MFOR              at OSCSTAT : 5
var volatile bit    OSCSTAT_HFOR              at OSCSTAT : 6
var volatile bit    OSCSTAT_EXTOR             at OSCSTAT : 7
-- ------------------------------------------------
var volatile byte   OSCEN                     at { 0x7E }
var volatile bit    OSCEN_PLLEN               at OSCEN : 0
var volatile bit    OSCEN_ADOEN               at OSCEN : 2
var volatile bit    OSCEN_SOSCEN              at OSCEN : 3
var volatile bit    OSCEN_LFOEN               at OSCEN : 4
var volatile bit    OSCEN_MFOEN               at OSCEN : 5
var volatile bit    OSCEN_HFOEN               at OSCEN : 6
var volatile bit    OSCEN_EXTOEN              at OSCEN : 7
-- ------------------------------------------------
var volatile byte   OSCTUNE                   at { 0x7F }
var volatile bit*6  OSCTUNE_TUN               at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN0              at OSCTUNE : 0
var volatile bit    OSCTUNE_TUN1              at OSCTUNE : 1
var volatile bit    OSCTUNE_TUN2              at OSCTUNE : 2
var volatile bit    OSCTUNE_TUN3              at OSCTUNE : 3
var volatile bit    OSCTUNE_TUN4              at OSCTUNE : 4
var volatile bit    OSCTUNE_TUN5              at OSCTUNE : 5
-- ------------------------------------------------
var volatile byte   OSCFRQ                    at { 0x80 }
var volatile bit*4  OSCFRQ_FRQ                at OSCFRQ : 0
var volatile bit    OSCFRQ_FRQ0               at OSCFRQ : 0
var volatile bit    OSCFRQ_FRQ1               at OSCFRQ : 1
var volatile bit    OSCFRQ_FRQ2               at OSCFRQ : 2
var volatile bit    OSCFRQ_FRQ3               at OSCFRQ : 3
-- ------------------------------------------------
var volatile byte   ACTCON                    at { 0x81 }
var volatile bit    ACTCON_ORS                at ACTCON : 1
var volatile bit    ACTCON_LOCK               at ACTCON : 3
var volatile bit    ACTCON_UD                 at ACTCON : 6
var volatile bit    ACTCON_EN                 at ACTCON : 7
var volatile bit    ACTCON_ACTORS             at ACTCON : 1
var volatile bit    ACTCON_ACTLOCK            at ACTCON : 3
var volatile bit    ACTCON_ACTUD              at ACTCON : 6
var volatile bit    ACTCON_ACTEN              at ACTCON : 7
-- ------------------------------------------------
var volatile byte   FSCMCON                   at { 0x82 }
var volatile bit    FSCMCON_FSCMFEV           at FSCMCON : 0
var volatile bit    FSCMCON_FSCMFFI           at FSCMCON : 1
var volatile bit    FSCMCON_FSCMPEV           at FSCMCON : 2
var volatile bit    FSCMCON_FSCMPFI           at FSCMCON : 3
var volatile bit    FSCMCON_FSCMSEV           at FSCMCON : 4
var volatile bit    FSCMCON_FSCMSFI           at FSCMCON : 5
-- ------------------------------------------------
var volatile byte   I3C1CON0                  at { 0x83 }
var volatile bit    I3C1CON0_IBIREQ           at I3C1CON0 : 0
var volatile bit    I3C1CON0_HJREQ            at I3C1CON0 : 1
var volatile bit    I3C1CON0_ACKP             at I3C1CON0 : 2
var volatile bit    I3C1CON0_CLRRXB           at I3C1CON0 : 3
var volatile bit    I3C1CON0_CLRTXB           at I3C1CON0 : 4
var volatile bit    I3C1CON0_RST              at I3C1CON0 : 5
var volatile bit    I3C1CON0_BTOEN            at I3C1CON0 : 6
var volatile bit    I3C1CON0_EN               at I3C1CON0 : 7
-- ------------------------------------------------
var volatile byte   I3C1CON1                  at { 0x84 }
var volatile bit    I3C1CON1_ACKPOS           at I3C1CON1 : 0
var volatile bit    I3C1CON1_SASDRMD          at I3C1CON1 : 1
var volatile bit    I3C1CON1_FHDRE            at I3C1CON1 : 2
var volatile bit    I3C1CON1_BERRDET          at I3C1CON1 : 3
-- ------------------------------------------------
var volatile byte   I3C1RXB                   at { 0x85 }
-- ------------------------------------------------
var volatile byte   I3C1TXB                   at { 0x86 }
-- ------------------------------------------------
var volatile byte   I3C1STAT0                 at { 0x87 }
var volatile bit*2  I3C1STAT0_RNW             at I3C1STAT0 : 0
var volatile bit    I3C1STAT0_RXBF            at I3C1STAT0 : 2
var volatile bit    I3C1STAT0_TXBE            at I3C1STAT0 : 3
var volatile bit    I3C1STAT0_RSTDET          at I3C1STAT0 : 4
var volatile bit*2  I3C1STAT0_OPMD            at I3C1STAT0 : 5
var volatile bit    I3C1STAT0_BFREE           at I3C1STAT0 : 7
-- ------------------------------------------------
var volatile byte   I3C1STAT1                 at { 0x88 }
var volatile bit    I3C1STAT1_TXFNE           at I3C1STAT1 : 0
-- ------------------------------------------------
var volatile byte   I3C1BSTAT                 at { 0x89 }
var volatile bit    I3C1BSTAT_TE0ERR          at I3C1BSTAT : 0
var volatile bit    I3C1BSTAT_TE1ERR          at I3C1BSTAT : 1
var volatile bit    I3C1BSTAT_TE2ERR          at I3C1BSTAT : 2
var volatile bit    I3C1BSTAT_TE3ERR          at I3C1BSTAT : 3
var volatile bit    I3C1BSTAT_TE4ERR          at I3C1BSTAT : 4
var volatile bit    I3C1BSTAT_TE5ERR          at I3C1BSTAT : 5
var volatile bit    I3C1BSTAT_TE6ERR          at I3C1BSTAT : 6
-- ------------------------------------------------
var volatile byte   I3C1PIR0                  at { 0x8A }
var volatile bit    I3C1PIR0_SCCCIF           at I3C1PIR0 : 0
var volatile bit    I3C1PIR0_BTFIF            at I3C1PIR0 : 1
var volatile bit    I3C1PIR0_DADRIF           at I3C1PIR0 : 2
var volatile bit    I3C1PIR0_SADRIF           at I3C1PIR0 : 3
var volatile bit    I3C1PIR0_I2CACKIF         at I3C1PIR0 : 4
var volatile bit    I3C1PIR0_RSCIF            at I3C1PIR0 : 5
var volatile bit    I3C1PIR0_PCIF             at I3C1PIR0 : 6
var volatile bit    I3C1PIR0_SCIF             at I3C1PIR0 : 7
-- ------------------------------------------------
var volatile byte   I3C1PIR1                  at { 0x8B }
var volatile bit    I3C1PIR1_IBIDONEIF        at I3C1PIR1 : 5
var volatile bit    I3C1PIR1_DACHIF           at I3C1PIR1 : 6
var volatile bit    I3C1PIR1_TCOMPIF          at I3C1PIR1 : 7
-- ------------------------------------------------
var volatile byte   I3C1ERRIR0                at { 0x8C }
var volatile bit    I3C1ERRIR0_UCCCIF         at I3C1ERRIR0 : 0
var volatile bit    I3C1ERRIR0_BTOIF          at I3C1ERRIR0 : 1
var volatile bit    I3C1ERRIR0_BUSEIF         at I3C1ERRIR0 : 2
var volatile bit    I3C1ERRIR0_IBIEIF         at I3C1ERRIR0 : 3
var volatile bit    I3C1ERRIR0_HJEIF          at I3C1ERRIR0 : 4
var volatile bit    I3C1ERRIR0_RXOIF          at I3C1ERRIR0 : 5
var volatile bit    I3C1ERRIR0_TXUIF          at I3C1ERRIR0 : 6
var volatile bit    I3C1ERRIR0_I2CNACKIF      at I3C1ERRIR0 : 7
-- ------------------------------------------------
var volatile byte   I3C1ERRIR1                at { 0x8D }
var volatile bit    I3C1ERRIR1_RXREIF         at I3C1ERRIR1 : 0
var volatile bit    I3C1ERRIR1_TXWEIF         at I3C1ERRIR1 : 1
var volatile bit    I3C1ERRIR1_MWLOEIF        at I3C1ERRIR1 : 2
var volatile bit    I3C1ERRIR1_ABEIF          at I3C1ERRIR1 : 3
-- ------------------------------------------------
var volatile byte   I3C1PIE0                  at { 0x8E }
var volatile bit    I3C1PIE0_SCCCIE           at I3C1PIE0 : 0
var volatile bit    I3C1PIE0_BTFIE            at I3C1PIE0 : 1
var volatile bit    I3C1PIE0_DADRIE           at I3C1PIE0 : 2
var volatile bit    I3C1PIE0_SADRIE           at I3C1PIE0 : 3
var volatile bit    I3C1PIE0_I2CACKIE         at I3C1PIE0 : 4
var volatile bit    I3C1PIE0_RSCIE            at I3C1PIE0 : 5
var volatile bit    I3C1PIE0_PCIE             at I3C1PIE0 : 6
var volatile bit    I3C1PIE0_SCIE             at I3C1PIE0 : 7
-- ------------------------------------------------
var volatile byte   I3C1PIE1                  at { 0x8F }
var volatile bit    I3C1PIE1_IBIDONEIE        at I3C1PIE1 : 5
var volatile bit    I3C1PIE1_DACHIE           at I3C1PIE1 : 6
var volatile bit    I3C1PIE1_TCOMPIE          at I3C1PIE1 : 7
-- ------------------------------------------------
var volatile byte   I3C1ERRIE0                at { 0x90 }
var volatile bit    I3C1ERRIE0_UCCCIE         at I3C1ERRIE0 : 0
var volatile bit    I3C1ERRIE0_BTOIE          at I3C1ERRIE0 : 1
var volatile bit    I3C1ERRIE0_BUSEIE         at I3C1ERRIE0 : 2
var volatile bit    I3C1ERRIE0_IBIEIE         at I3C1ERRIE0 : 3
var volatile bit    I3C1ERRIE0_HJEIE          at I3C1ERRIE0 : 4
var volatile bit    I3C1ERRIE0_RXOIE          at I3C1ERRIE0 : 5
var volatile bit    I3C1ERRIE0_TXUIE          at I3C1ERRIE0 : 6
var volatile bit    I3C1ERRIE0_I2CNACKIE      at I3C1ERRIE0 : 7
-- ------------------------------------------------
var volatile byte   I3C1ERRIE1                at { 0x91 }
var volatile bit    I3C1ERRIE1_RXREIE         at I3C1ERRIE1 : 0
var volatile bit    I3C1ERRIE1_TXWEIE         at I3C1ERRIE1 : 1
var volatile bit    I3C1ERRIE1_MWLOEIE        at I3C1ERRIE1 : 2
var volatile bit    I3C1ERRIE1_ABEIE          at I3C1ERRIE1 : 3
-- ------------------------------------------------
var volatile word   I3C1BIDL                  at { 0x92 }
-- ------------------------------------------------
var volatile byte   I3C1BIDLL                 at { 0x92 }
-- ------------------------------------------------
var volatile byte   I3C1BIDLH                 at { 0x93 }
-- ------------------------------------------------
var volatile byte   I3C1BAVL                  at { 0x94 }
-- ------------------------------------------------
var volatile word   I3C1BTO                   at { 0x95 }
-- ------------------------------------------------
var volatile byte   I3C1BTOL                  at { 0x95 }
-- ------------------------------------------------
var volatile byte   I3C1BTOH                  at { 0x96 }
-- ------------------------------------------------
var volatile byte   I3C1IBIMDB                at { 0x97 }
var volatile bit*5  I3C1IBIMDB_IBIMDB_4_0     at I3C1IBIMDB : 0
var volatile bit*3  I3C1IBIMDB_IBIMDB_7_5     at I3C1IBIMDB : 5
-- ------------------------------------------------
var volatile byte   I3C1RETRY                 at { 0x98 }
-- ------------------------------------------------
var volatile byte   I3C1FEAT                  at { 0x99 }
var volatile bit    I3C1FEAT_HJCAP            at I3C1FEAT : 0
var volatile bit    I3C1FEAT_HDRCAP           at I3C1FEAT : 1
-- ------------------------------------------------
var volatile byte   I3C1SADR                  at { 0x9A }
var volatile bit*7  I3C1SADR_SADR             at I3C1SADR : 0
-- ------------------------------------------------
var volatile byte   I3C1DADR                  at { 0x9B }
var volatile bit*7  I3C1DADR_DADR             at I3C1DADR : 0
-- ------------------------------------------------
var volatile byte   I3C1EC                    at { 0x9C }
var volatile bit    I3C1EC_IBIEN              at I3C1EC : 0
var volatile bit    I3C1EC_CREN               at I3C1EC : 1
var volatile bit    I3C1EC_EC2                at I3C1EC : 2
var volatile bit    I3C1EC_HJEN               at I3C1EC : 3
var volatile bit*4  I3C1EC_EC_7_4             at I3C1EC : 4
-- ------------------------------------------------
var volatile word   I3C1MWL                   at { 0x9D }
-- ------------------------------------------------
var volatile byte   I3C1MWLL                  at { 0x9D }
-- ------------------------------------------------
var volatile byte   I3C1MWLH                  at { 0x9E }
-- ------------------------------------------------
var volatile word   I3C1MRL                   at { 0x9F }
-- ------------------------------------------------
var volatile byte   I3C1MRLL                  at { 0x9F }
-- ------------------------------------------------
var volatile byte   I3C1MRLH                  at { 0xA0 }
-- ------------------------------------------------
var volatile byte   I3C1IBIPSZ                at { 0xA1 }
-- ------------------------------------------------
var volatile byte   I3C1PID0                  at { 0xA2 }
var volatile bit    I3C1PID0_PID0             at I3C1PID0 : 0
var volatile bit    I3C1PID0_PID1             at I3C1PID0 : 1
var volatile bit    I3C1PID0_PID2             at I3C1PID0 : 2
var volatile bit    I3C1PID0_PID3             at I3C1PID0 : 3
var volatile bit    I3C1PID0_PID4             at I3C1PID0 : 4
var volatile bit    I3C1PID0_PID5             at I3C1PID0 : 5
var volatile bit    I3C1PID0_PID6             at I3C1PID0 : 6
var volatile bit    I3C1PID0_PID7             at I3C1PID0 : 7
-- ------------------------------------------------
var volatile byte   I3C1PID1                  at { 0xA3 }
var volatile bit    I3C1PID1_PID8             at I3C1PID1 : 0
var volatile bit    I3C1PID1_PID9             at I3C1PID1 : 1
var volatile bit    I3C1PID1_PID10            at I3C1PID1 : 2
var volatile bit    I3C1PID1_PID11            at I3C1PID1 : 3
var volatile bit    I3C1PID1_PID12            at I3C1PID1 : 4
var volatile bit    I3C1PID1_PID13            at I3C1PID1 : 5
var volatile bit    I3C1PID1_PID14            at I3C1PID1 : 6
var volatile bit    I3C1PID1_PID15            at I3C1PID1 : 7
var volatile bit*4  I3C1PID1_PID_11_8         at I3C1PID1 : 0
var volatile bit*4  I3C1PID1_PID_15_12        at I3C1PID1 : 4
-- ------------------------------------------------
var volatile byte   I3C1PID2                  at { 0xA4 }
var volatile bit    I3C1PID2_PID16            at I3C1PID2 : 0
var volatile bit    I3C1PID2_PID17            at I3C1PID2 : 1
var volatile bit    I3C1PID2_PID18            at I3C1PID2 : 2
var volatile bit    I3C1PID2_PID19            at I3C1PID2 : 3
var volatile bit    I3C1PID2_PID20            at I3C1PID2 : 4
var volatile bit    I3C1PID2_PID21            at I3C1PID2 : 5
var volatile bit    I3C1PID2_PID22            at I3C1PID2 : 6
var volatile bit    I3C1PID2_PID23            at I3C1PID2 : 7
-- ------------------------------------------------
var volatile byte   I3C1PID3                  at { 0xA5 }
var volatile bit    I3C1PID3_PID24            at I3C1PID3 : 0
var volatile bit    I3C1PID3_PID25            at I3C1PID3 : 1
var volatile bit    I3C1PID3_PID26            at I3C1PID3 : 2
var volatile bit    I3C1PID3_PID27            at I3C1PID3 : 3
var volatile bit    I3C1PID3_PID28            at I3C1PID3 : 4
var volatile bit    I3C1PID3_PID29            at I3C1PID3 : 5
var volatile bit    I3C1PID3_PID30            at I3C1PID3 : 6
var volatile bit    I3C1PID3_PID31            at I3C1PID3 : 7
-- ------------------------------------------------
var volatile byte   I3C1PID4                  at { 0xA6 }
var volatile bit    I3C1PID4_PID32            at I3C1PID4 : 0
var volatile bit    I3C1PID4_PID33            at I3C1PID4 : 1
var volatile bit    I3C1PID4_PID34            at I3C1PID4 : 2
var volatile bit    I3C1PID4_PID35            at I3C1PID4 : 3
var volatile bit    I3C1PID4_PID36            at I3C1PID4 : 4
var volatile bit    I3C1PID4_PID37            at I3C1PID4 : 5
var volatile bit    I3C1PID4_PID38            at I3C1PID4 : 6
var volatile bit    I3C1PID4_PID39            at I3C1PID4 : 7
var volatile bit*7  I3C1PID4_PID_39_33        at I3C1PID4 : 1
-- ------------------------------------------------
var volatile byte   I3C1PID5                  at { 0xA7 }
var volatile bit    I3C1PID5_PID40            at I3C1PID5 : 0
var volatile bit    I3C1PID5_PID41            at I3C1PID5 : 1
var volatile bit    I3C1PID5_PID42            at I3C1PID5 : 2
var volatile bit    I3C1PID5_PID43            at I3C1PID5 : 3
var volatile bit    I3C1PID5_PID44            at I3C1PID5 : 4
var volatile bit    I3C1PID5_PID45            at I3C1PID5 : 5
var volatile bit    I3C1PID5_PID46            at I3C1PID5 : 6
var volatile bit    I3C1PID5_PID47            at I3C1PID5 : 7
-- ------------------------------------------------
var volatile byte   I3C1BCR                   at { 0xA8 }
var volatile bit    I3C1BCR_BCR0              at I3C1BCR : 0
var volatile bit    I3C1BCR_BCR1              at I3C1BCR : 1
var volatile bit    I3C1BCR_BCR2              at I3C1BCR : 2
var volatile bit    I3C1BCR_BCR3              at I3C1BCR : 3
var volatile bit    I3C1BCR_BCR4              at I3C1BCR : 4
var volatile bit    I3C1BCR_BCR5              at I3C1BCR : 5
var volatile bit    I3C1BCR_BCR6              at I3C1BCR : 6
var volatile bit    I3C1BCR_BCR7              at I3C1BCR : 7
var volatile bit*2  I3C1BCR_BCR_7_6           at I3C1BCR : 6
-- ------------------------------------------------
var volatile byte   I3C1DCR                   at { 0xA9 }
-- ------------------------------------------------
var volatile byte   I3C1DSTAT0                at { 0xAA }
var volatile bit*4  I3C1DSTAT0_INTPEND        at I3C1DSTAT0 : 0
var volatile bit    I3C1DSTAT0_PERR           at I3C1DSTAT0 : 5
var volatile bit*2  I3C1DSTAT0_ACTMODE        at I3C1DSTAT0 : 6
var volatile bit    I3C1DSTAT0_INPEND0        at I3C1DSTAT0 : 0
var volatile bit    I3C1DSTAT0_INTPEND1       at I3C1DSTAT0 : 1
var volatile bit    I3C1DSTAT0_INTPEND2       at I3C1DSTAT0 : 2
var volatile bit    I3C1DSTAT0_INTPEND3       at I3C1DSTAT0 : 3
var volatile bit    I3C1DSTAT0_ACTMODE0       at I3C1DSTAT0 : 6
var volatile bit    I3C1DSTAT0_ACTMODE1       at I3C1DSTAT0 : 7
-- ------------------------------------------------
var volatile byte   I3C1DSTAT1                at { 0xAB }
var volatile bit    I3C1DSTAT1_VRSV0          at I3C1DSTAT1 : 0
var volatile bit    I3C1DSTAT1_VRSV1          at I3C1DSTAT1 : 1
var volatile bit    I3C1DSTAT1_VRSV2          at I3C1DSTAT1 : 2
var volatile bit    I3C1DSTAT1_VRSV3          at I3C1DSTAT1 : 3
var volatile bit    I3C1DSTAT1_VRSV4          at I3C1DSTAT1 : 4
var volatile bit    I3C1DSTAT1_VRSV5          at I3C1DSTAT1 : 5
var volatile bit    I3C1DSTAT1_VRSV6          at I3C1DSTAT1 : 6
var volatile bit    I3C1DSTAT1_VRSV7          at I3C1DSTAT1 : 7
-- ------------------------------------------------
var volatile byte   I3C1MWS                   at { 0xAC }
var volatile bit    I3C1MWS_MWS0              at I3C1MWS : 0
var volatile bit    I3C1MWS_MWS1              at I3C1MWS : 1
var volatile bit    I3C1MWS_MWS2              at I3C1MWS : 2
var volatile bit    I3C1MWS_MWS3              at I3C1MWS : 3
var volatile bit    I3C1MWS_MWS4              at I3C1MWS : 4
var volatile bit    I3C1MWS_MWS5              at I3C1MWS : 5
var volatile bit    I3C1MWS_MWS6              at I3C1MWS : 6
var volatile bit    I3C1MWS_MWS7              at I3C1MWS : 7
var volatile bit*3  I3C1MWS_MWS_2_0           at I3C1MWS : 0
var volatile bit*4  I3C1MWS_MWS_7_4           at I3C1MWS : 4
-- ------------------------------------------------
var volatile byte   I3C1MRS                   at { 0xAD }
var volatile bit    I3C1MRS_MRS0              at I3C1MRS : 0
var volatile bit    I3C1MRS_MRS1              at I3C1MRS : 1
var volatile bit    I3C1MRS_MRS2              at I3C1MRS : 2
var volatile bit    I3C1MRS_MRS3              at I3C1MRS : 3
var volatile bit    I3C1MRS_MRS4              at I3C1MRS : 4
var volatile bit    I3C1MRS_MRS5              at I3C1MRS : 5
var volatile bit    I3C1MRS_MRS6              at I3C1MRS : 6
var volatile bit    I3C1MRS_MRS7              at I3C1MRS : 7
var volatile bit*3  I3C1MRS_MRS_2_0           at I3C1MRS : 0
var volatile bit*3  I3C1MRS_MRS_5_3           at I3C1MRS : 3
-- ------------------------------------------------
var volatile byte*3 I3C1MRT                   at { 0xAE }
-- ------------------------------------------------
var volatile byte   I3C1MRTL                  at { 0xAE }
-- ------------------------------------------------
var volatile byte   I3C1MRTH                  at { 0xAF }
-- ------------------------------------------------
var volatile byte   I3C1MRTU                  at { 0xB0 }
-- ------------------------------------------------
var volatile byte   I3C1RSTACT                at { 0xB1 }
-- ------------------------------------------------
var volatile byte   I3C1BUSCXT                at { 0xB2 }
-- ------------------------------------------------
var volatile byte   I3C1CCC                   at { 0xB3 }
-- ------------------------------------------------
var volatile byte   I3C1I2CCON                at { 0xB4 }
var volatile bit*2  I3C1I2CCON_SDAHT          at I3C1I2CCON : 0
var volatile bit    I3C1I2CCON_FLTEN          at I3C1I2CCON : 2
-- ------------------------------------------------
var volatile byte   I3C1CLK                   at { 0xB5 }
var volatile bit*4  I3C1CLK_CLK               at I3C1CLK : 0
var volatile bit    I3C1CLK_CLK0              at I3C1CLK : 0
var volatile bit    I3C1CLK_CLK1              at I3C1CLK : 1
var volatile bit    I3C1CLK_CLK2              at I3C1CLK : 2
var volatile bit    I3C1CLK_CLK3              at I3C1CLK : 3
-- ------------------------------------------------
var volatile byte   CLKRCON                   at { 0x100 }
var volatile bit*3  CLKRCON_DIV               at CLKRCON : 0
var volatile bit*2  CLKRCON_DC                at CLKRCON : 3
var volatile bit    CLKRCON_EN                at CLKRCON : 7
var volatile bit    CLKRCON_CLKRDIV0          at CLKRCON : 0
var volatile bit    CLKRCON_CLKRDIV1          at CLKRCON : 1
var volatile bit    CLKRCON_CLKRDIV2          at CLKRCON : 2
var volatile bit    CLKRCON_CLKRDC0           at CLKRCON : 3
var volatile bit    CLKRCON_CLKRDC1           at CLKRCON : 4
var volatile bit    CLKRCON_CLKREN            at CLKRCON : 7
var volatile bit    CLKRCON_DIV0              at CLKRCON : 0
var volatile bit    CLKRCON_DIV1              at CLKRCON : 1
var volatile bit    CLKRCON_DIV2              at CLKRCON : 2
var volatile bit    CLKRCON_DC0               at CLKRCON : 3
var volatile bit    CLKRCON_DC1               at CLKRCON : 4
-- ------------------------------------------------
var volatile byte   CLKRCLK                   at { 0x101 }
var volatile bit*4  CLKRCLK_CLK               at CLKRCLK : 0
var volatile bit    CLKRCLK_CLKRCLK0          at CLKRCLK : 0
var volatile bit    CLKRCLK_CLKRCLK1          at CLKRCLK : 1
var volatile bit    CLKRCLK_CLKRCLK2          at CLKRCLK : 2
var volatile bit    CLKRCLK_CLKRCLK3          at CLKRCLK : 3
var volatile bit    CLKRCLK_CLK0              at CLKRCLK : 0
var volatile bit    CLKRCLK_CLK1              at CLKRCLK : 1
var volatile bit    CLKRCLK_CLK2              at CLKRCLK : 2
var volatile bit    CLKRCLK_CLK3              at CLKRCLK : 3
-- ------------------------------------------------
var volatile word   TMR0                      at { 0x103 }
-- ------------------------------------------------
var volatile byte   TMR0L                     at { 0x103 }
var volatile bit    TMR0L_TMR0L0              at TMR0L : 0
var volatile bit    TMR0L_TMR0L1              at TMR0L : 1
var volatile bit    TMR0L_TMR0L2              at TMR0L : 2
var volatile bit    TMR0L_TMR0L3              at TMR0L : 3
var volatile bit    TMR0L_TMR0L4              at TMR0L : 4
var volatile bit    TMR0L_TMR0L5              at TMR0L : 5
var volatile bit    TMR0L_TMR0L6              at TMR0L : 6
var volatile bit    TMR0L_TMR0L7              at TMR0L : 7
-- ------------------------------------------------
var volatile byte   TMR0H                     at { 0x104 }
var volatile bit    TMR0H_TMR0H0              at TMR0H : 0
var volatile bit    TMR0H_TMR0H1              at TMR0H : 1
var volatile bit    TMR0H_TMR0H2              at TMR0H : 2
var volatile bit    TMR0H_TMR0H3              at TMR0H : 3
var volatile bit    TMR0H_TMR0H4              at TMR0H : 4
var volatile bit    TMR0H_TMR0H5              at TMR0H : 5
var volatile bit    TMR0H_TMR0H6              at TMR0H : 6
var volatile bit    TMR0H_TMR0H7              at TMR0H : 7
var volatile bit    TMR0H_T0PR0               at TMR0H : 0
var volatile bit    TMR0H_T0PR1               at TMR0H : 1
var volatile bit    TMR0H_T0PR2               at TMR0H : 2
var volatile bit    TMR0H_T0PR3               at TMR0H : 3
var volatile bit    TMR0H_T0PR4               at TMR0H : 4
var volatile bit    TMR0H_T0PR5               at TMR0H : 5
var volatile bit    TMR0H_T0PR6               at TMR0H : 6
var volatile bit    TMR0H_T0PR7               at TMR0H : 7
-- ------------------------------------------------
var volatile byte   T0CON0                    at { 0x105 }
var volatile bit*4  T0CON0_OUTPS              at T0CON0 : 0
var volatile bit    T0CON0_MD16               at T0CON0 : 4
var volatile bit    T0CON0_OUT                at T0CON0 : 5
var volatile bit    T0CON0_EN                 at T0CON0 : 7
var volatile bit*4  T0CON0_T0OUTPS            at T0CON0 : 0
var volatile bit    T0CON0_T0MD16             at T0CON0 : 4
var volatile bit    T0CON0_T0OUT              at T0CON0 : 5
var volatile bit    T0CON0_T0EN               at T0CON0 : 7
var volatile bit    T0CON0_OUTPS0             at T0CON0 : 0
var volatile bit    T0CON0_OUTPS1             at T0CON0 : 1
var volatile bit    T0CON0_OUTPS2             at T0CON0 : 2
var volatile bit    T0CON0_OUTPS3             at T0CON0 : 3
var volatile bit    T0CON0_T016BIT            at T0CON0 : 4
var volatile bit    T0CON0_T0OUTPS0           at T0CON0 : 0
var volatile bit    T0CON0_T0OUTPS1           at T0CON0 : 1
var volatile bit    T0CON0_T0OUTPS2           at T0CON0 : 2
var volatile bit    T0CON0_T0OUTPS3           at T0CON0 : 3
-- ------------------------------------------------
var volatile byte   T0CON1                    at { 0x106 }
var volatile bit*4  T0CON1_CKPS               at T0CON1 : 0
var volatile bit    T0CON1_ASYNC              at T0CON1 : 4
var volatile bit*3  T0CON1_CS                 at T0CON1 : 5
var volatile bit    T0CON1_CKPS0              at T0CON1 : 0
var volatile bit    T0CON1_CKPS1              at T0CON1 : 1
var volatile bit    T0CON1_CKPS2              at T0CON1 : 2
var volatile bit    T0CON1_CKPS3              at T0CON1 : 3
var volatile bit    T0CON1_T0ASYNC            at T0CON1 : 4
var volatile bit    T0CON1_CS0                at T0CON1 : 5
var volatile bit    T0CON1_CS1                at T0CON1 : 6
var volatile bit    T0CON1_CS2                at T0CON1 : 7
var volatile bit*4  T0CON1_T0CKPS             at T0CON1 : 0
var volatile bit*3  T0CON1_T0CS               at T0CON1 : 5
var volatile bit    T0CON1_T0CKPS0            at T0CON1 : 0
var volatile bit    T0CON1_T0CKPS1            at T0CON1 : 1
var volatile bit    T0CON1_T0CKPS2            at T0CON1 : 2
var volatile bit    T0CON1_T0CKPS3            at T0CON1 : 3
var volatile bit    T0CON1_T0CS0              at T0CON1 : 5
var volatile bit    T0CON1_T0CS1              at T0CON1 : 6
var volatile bit    T0CON1_T0CS2              at T0CON1 : 7
-- ------------------------------------------------
var volatile word   TMR1                      at { 0x107 }
-- ------------------------------------------------
var volatile byte   TMR1L                     at { 0x107 }
var volatile bit    TMR1L_TMR1L0              at TMR1L : 0
var volatile bit    TMR1L_TMR1L1              at TMR1L : 1
var volatile bit    TMR1L_TMR1L2              at TMR1L : 2
var volatile bit    TMR1L_TMR1L3              at TMR1L : 3
var volatile bit    TMR1L_TMR1L4              at TMR1L : 4
var volatile bit    TMR1L_TMR1L5              at TMR1L : 5
var volatile bit    TMR1L_TMR1L6              at TMR1L : 6
var volatile bit    TMR1L_TMR1L7              at TMR1L : 7
var volatile bit    TMR1L_TMR10               at TMR1L : 0
var volatile bit    TMR1L_TMR11               at TMR1L : 1
var volatile bit    TMR1L_TMR12               at TMR1L : 2
var volatile bit    TMR1L_TMR13               at TMR1L : 3
var volatile bit    TMR1L_TMR14               at TMR1L : 4
var volatile bit    TMR1L_TMR15               at TMR1L : 5
var volatile bit    TMR1L_TMR16               at TMR1L : 6
var volatile bit    TMR1L_TMR17               at TMR1L : 7
-- ------------------------------------------------
var volatile byte   TMR1H                     at { 0x108 }
var volatile bit    TMR1H_TMR1H0              at TMR1H : 0
var volatile bit    TMR1H_TMR1H1              at TMR1H : 1
var volatile bit    TMR1H_TMR1H2              at TMR1H : 2
var volatile bit    TMR1H_TMR1H3              at TMR1H : 3
var volatile bit    TMR1H_TMR1H4              at TMR1H : 4
var volatile bit    TMR1H_TMR1H5              at TMR1H : 5
var volatile bit    TMR1H_TMR1H6              at TMR1H : 6
var volatile bit    TMR1H_TMR1H7              at TMR1H : 7
var volatile bit    TMR1H_TMR18               at TMR1H : 0
var volatile bit    TMR1H_TMR19               at TMR1H : 1
var volatile bit    TMR1H_TMR110              at TMR1H : 2
var volatile bit    TMR1H_TMR111              at TMR1H : 3
var volatile bit    TMR1H_TMR112              at TMR1H : 4
var volatile bit    TMR1H_TMR113              at TMR1H : 5
var volatile bit    TMR1H_TMR114              at TMR1H : 6
var volatile bit    TMR1H_TMR115              at TMR1H : 7
-- ------------------------------------------------
var volatile byte   T1CON                     at { 0x109 }
var volatile bit    T1CON_ON                  at T1CON : 0
var volatile bit    T1CON_RD16                at T1CON : 1
var volatile bit    T1CON_NOT_SYNC            at T1CON : 2
alias               T1CON_NT1SYNC             is T1CON_NOT_SYNC
alias               T1CON_T1SYNC              is T1CON_NOT_SYNC
var volatile bit*2  T1CON_CKPS                at T1CON : 4
alias               T1CON_TMR1CKPS            is T1CON_CKPS
alias               T1CON_T1CKPS              is T1CON_CKPS
var volatile bit    T1CON_TMR1ON              at T1CON : 0
var volatile bit    T1CON_T1RD16              at T1CON : 1
var volatile bit    T1CON_NOT_T1SYNC          at T1CON : 2
var volatile bit    T1CON_T1CKPS0             at T1CON : 4
var volatile bit    T1CON_T1CKPS1             at T1CON : 5
var volatile bit    T1CON_NSYNC               at T1CON : 2
var volatile bit    T1CON_CKPS0               at T1CON : 4
var volatile bit    T1CON_CKPS1               at T1CON : 5
var volatile bit    T1CON_RD161               at T1CON : 1
-- ------------------------------------------------
var volatile byte   T1GCON                    at { 0x10A }
var volatile bit    T1GCON_GVAL               at T1GCON : 2
var volatile bit    T1GCON_GGO                at T1GCON : 3
var volatile bit    T1GCON_GSPM               at T1GCON : 4
var volatile bit    T1GCON_GTM                at T1GCON : 5
var volatile bit    T1GCON_GPOL               at T1GCON : 6
var volatile bit    T1GCON_GE                 at T1GCON : 7
var volatile bit    T1GCON_T1GVAL             at T1GCON : 2
var volatile bit    T1GCON_T1GGO              at T1GCON : 3
var volatile bit    T1GCON_T1GSPM             at T1GCON : 4
var volatile bit    T1GCON_T1GTM              at T1GCON : 5
var volatile bit    T1GCON_T1GPOL             at T1GCON : 6
var volatile bit    T1GCON_T1GE               at T1GCON : 7
var volatile bit    T1GCON_NOT_DONE           at T1GCON : 3
var volatile bit    T1GCON_NOT_T1DONE         at T1GCON : 3
var volatile bit    T1GCON_GGO_NDONE          at T1GCON : 3
var volatile bit    T1GCON_T1GGO_NDONE        at T1GCON : 3
-- ------------------------------------------------
var volatile byte   T1GATE                    at { 0x10B }
var volatile bit*4  T1GATE_GSS                at T1GATE : 0
var volatile bit    T1GATE_GSS0               at T1GATE : 0
var volatile bit    T1GATE_GSS1               at T1GATE : 1
var volatile bit    T1GATE_GSS2               at T1GATE : 2
var volatile bit    T1GATE_GSS3               at T1GATE : 3
var volatile bit    T1GATE_T1GSS0             at T1GATE : 0
var volatile bit    T1GATE_T1GSS1             at T1GATE : 1
var volatile bit    T1GATE_T1GSS2             at T1GATE : 2
var volatile bit    T1GATE_T1GSS3             at T1GATE : 3
-- ------------------------------------------------
var volatile byte   T1CLK                     at { 0x10C }
var volatile bit*4  T1CLK_CS                  at T1CLK : 0
var volatile bit    T1CLK_T1CS0               at T1CLK : 0
var volatile bit    T1CLK_T1CS1               at T1CLK : 1
var volatile bit    T1CLK_T1CS2               at T1CLK : 2
var volatile bit    T1CLK_T1CS3               at T1CLK : 3
var volatile bit    T1CLK_CS0                 at T1CLK : 0
var volatile bit    T1CLK_CS1                 at T1CLK : 1
var volatile bit    T1CLK_CS2                 at T1CLK : 2
var volatile bit    T1CLK_CS3                 at T1CLK : 3
-- ------------------------------------------------
var volatile byte   T2TMR                     at { 0x119 }
-- ------------------------------------------------
var volatile byte   T2PR                      at { 0x11A }
-- ------------------------------------------------
var volatile byte   T2CON                     at { 0x11B }
var volatile bit*4  T2CON_OUTPS               at T2CON : 0
var volatile bit*3  T2CON_CKPS                at T2CON : 4
alias               T2CON_TMR2CKPS            is T2CON_CKPS
alias               T2CON_T2CKPS              is T2CON_CKPS
var volatile bit    T2CON_ON                  at T2CON : 7
var volatile bit*4  T2CON_T2OUTPS             at T2CON : 0
var volatile bit    T2CON_T2ON                at T2CON : 7
var volatile bit    T2CON_T2OUTPS0            at T2CON : 0
var volatile bit    T2CON_T2OUTPS1            at T2CON : 1
var volatile bit    T2CON_T2OUTPS2            at T2CON : 2
var volatile bit    T2CON_T2OUTPS3            at T2CON : 3
var volatile bit    T2CON_T2CKPS0             at T2CON : 4
var volatile bit    T2CON_T2CKPS1             at T2CON : 5
var volatile bit    T2CON_T2CKPS2             at T2CON : 6
var volatile bit    T2CON_OUTPS0              at T2CON : 0
var volatile bit    T2CON_OUTPS1              at T2CON : 1
var volatile bit    T2CON_OUTPS2              at T2CON : 2
var volatile bit    T2CON_OUTPS3              at T2CON : 3
var volatile bit    T2CON_CKPS0               at T2CON : 4
var volatile bit    T2CON_CKPS1               at T2CON : 5
var volatile bit    T2CON_CKPS2               at T2CON : 6
var volatile bit    T2CON_TMR2ON              at T2CON : 7
-- ------------------------------------------------
var volatile byte   T2HLT                     at { 0x11C }
var volatile bit*5  T2HLT_MODE                at T2HLT : 0
var volatile bit    T2HLT_CKSYNC              at T2HLT : 5
var volatile bit    T2HLT_CKPOL               at T2HLT : 6
var volatile bit    T2HLT_PSYNC               at T2HLT : 7
var volatile bit    T2HLT_MODE0               at T2HLT : 0
var volatile bit    T2HLT_MODE1               at T2HLT : 1
var volatile bit    T2HLT_MODE2               at T2HLT : 2
var volatile bit    T2HLT_MODE3               at T2HLT : 3
var volatile bit    T2HLT_MODE4               at T2HLT : 4
var volatile bit*5  T2HLT_T2MODE              at T2HLT : 0
var volatile bit    T2HLT_T2CKSYNC            at T2HLT : 5
var volatile bit    T2HLT_T2CKPOL             at T2HLT : 6
var volatile bit    T2HLT_T2PSYNC             at T2HLT : 7
var volatile bit    T2HLT_T2MODE0             at T2HLT : 0
var volatile bit    T2HLT_T2MODE1             at T2HLT : 1
var volatile bit    T2HLT_T2MODE2             at T2HLT : 2
var volatile bit    T2HLT_T2MODE3             at T2HLT : 3
var volatile bit    T2HLT_T2MODE4             at T2HLT : 4
-- ------------------------------------------------
var volatile byte   T2CLKCON                  at { 0x11D }
var volatile bit*4  T2CLKCON_CS               at T2CLKCON : 0
var volatile bit    T2CLKCON_CS0              at T2CLKCON : 0
var volatile bit    T2CLKCON_CS1              at T2CLKCON : 1
var volatile bit    T2CLKCON_CS2              at T2CLKCON : 2
var volatile bit    T2CLKCON_CS3              at T2CLKCON : 3
var volatile bit*4  T2CLKCON_T2CS             at T2CLKCON : 0
var volatile bit    T2CLKCON_T2CS0            at T2CLKCON : 0
var volatile bit    T2CLKCON_T2CS1            at T2CLKCON : 1
var volatile bit    T2CLKCON_T2CS2            at T2CLKCON : 2
var volatile bit    T2CLKCON_T2CS3            at T2CLKCON : 3
-- ------------------------------------------------
var volatile byte   T2RST                     at { 0x11E }
var volatile bit*5  T2RST_RSEL                at T2RST : 0
var volatile bit    T2RST_RSEL0               at T2RST : 0
var volatile bit    T2RST_RSEL1               at T2RST : 1
var volatile bit    T2RST_RSEL2               at T2RST : 2
var volatile bit    T2RST_RSEL3               at T2RST : 3
var volatile bit    T2RST_RSEL4               at T2RST : 4
var volatile bit*5  T2RST_T2RSEL              at T2RST : 0
var volatile bit    T2RST_T2RSEL0             at T2RST : 0
var volatile bit    T2RST_T2RSEL1             at T2RST : 1
var volatile bit    T2RST_T2RSEL2             at T2RST : 2
var volatile bit    T2RST_T2RSEL3             at T2RST : 3
var volatile bit    T2RST_T2RSEL4             at T2RST : 4
-- ------------------------------------------------
var volatile byte   T4TMR                     at { 0x11F }
-- ------------------------------------------------
var volatile byte   T4PR                      at { 0x120 }
-- ------------------------------------------------
var volatile byte   T4CON                     at { 0x121 }
var volatile bit*4  T4CON_OUTPS               at T4CON : 0
var volatile bit*3  T4CON_CKPS                at T4CON : 4
alias               T4CON_TMR4CKPS            is T4CON_CKPS
alias               T4CON_T4CKPS              is T4CON_CKPS
var volatile bit    T4CON_ON                  at T4CON : 7
var volatile bit*4  T4CON_T4OUTPS             at T4CON : 0
var volatile bit    T4CON_T4ON                at T4CON : 7
var volatile bit    T4CON_T4OUTPS0            at T4CON : 0
var volatile bit    T4CON_T4OUTPS1            at T4CON : 1
var volatile bit    T4CON_T4OUTPS2            at T4CON : 2
var volatile bit    T4CON_T4OUTPS3            at T4CON : 3
var volatile bit    T4CON_T4CKPS0             at T4CON : 4
var volatile bit    T4CON_T4CKPS1             at T4CON : 5
var volatile bit    T4CON_T4CKPS2             at T4CON : 6
var volatile bit    T4CON_OUTPS0              at T4CON : 0
var volatile bit    T4CON_OUTPS1              at T4CON : 1
var volatile bit    T4CON_OUTPS2              at T4CON : 2
var volatile bit    T4CON_OUTPS3              at T4CON : 3
var volatile bit    T4CON_CKPS0               at T4CON : 4
var volatile bit    T4CON_CKPS1               at T4CON : 5
var volatile bit    T4CON_CKPS2               at T4CON : 6
var volatile bit    T4CON_TMR4ON              at T4CON : 7
-- ------------------------------------------------
var volatile byte   T4HLT                     at { 0x122 }
var volatile bit*5  T4HLT_MODE                at T4HLT : 0
var volatile bit    T4HLT_CKSYNC              at T4HLT : 5
var volatile bit    T4HLT_CKPOL               at T4HLT : 6
var volatile bit    T4HLT_PSYNC               at T4HLT : 7
var volatile bit    T4HLT_MODE0               at T4HLT : 0
var volatile bit    T4HLT_MODE1               at T4HLT : 1
var volatile bit    T4HLT_MODE2               at T4HLT : 2
var volatile bit    T4HLT_MODE3               at T4HLT : 3
var volatile bit    T4HLT_MODE4               at T4HLT : 4
var volatile bit*5  T4HLT_T4MODE              at T4HLT : 0
var volatile bit    T4HLT_T4CKSYNC            at T4HLT : 5
var volatile bit    T4HLT_T4CKPOL             at T4HLT : 6
var volatile bit    T4HLT_T4PSYNC             at T4HLT : 7
var volatile bit    T4HLT_T4MODE0             at T4HLT : 0
var volatile bit    T4HLT_T4MODE1             at T4HLT : 1
var volatile bit    T4HLT_T4MODE2             at T4HLT : 2
var volatile bit    T4HLT_T4MODE3             at T4HLT : 3
var volatile bit    T4HLT_T4MODE4             at T4HLT : 4
-- ------------------------------------------------
var volatile byte   T4CLKCON                  at { 0x123 }
var volatile bit*3  T4CLKCON_CS               at T4CLKCON : 0
var volatile bit    T4CLKCON_CS0              at T4CLKCON : 0
var volatile bit    T4CLKCON_CS1              at T4CLKCON : 1
var volatile bit    T4CLKCON_CS2              at T4CLKCON : 2
var volatile bit*3  T4CLKCON_T4CS             at T4CLKCON : 0
var volatile bit    T4CLKCON_T4CS0            at T4CLKCON : 0
var volatile bit    T4CLKCON_T4CS1            at T4CLKCON : 1
var volatile bit    T4CLKCON_T4CS2            at T4CLKCON : 2
-- ------------------------------------------------
var volatile byte   T4RST                     at { 0x124 }
var volatile bit*4  T4RST_RSEL                at T4RST : 0
var volatile bit    T4RST_RSEL0               at T4RST : 0
var volatile bit    T4RST_RSEL1               at T4RST : 1
var volatile bit    T4RST_RSEL2               at T4RST : 2
var volatile bit    T4RST_RSEL3               at T4RST : 3
var volatile bit*4  T4RST_T4RSEL              at T4RST : 0
var volatile bit    T4RST_T4RSEL0             at T4RST : 0
var volatile bit    T4RST_T4RSEL1             at T4RST : 1
var volatile bit    T4RST_T4RSEL2             at T4RST : 2
var volatile bit    T4RST_T4RSEL3             at T4RST : 3
-- ------------------------------------------------
var volatile byte   TUCHAIN                   at { 0x12B }
var volatile bit    TUCHAIN_CH16AB            at TUCHAIN : 0
-- ------------------------------------------------
var volatile byte   TU16ACON0                 at { 0x12C }
var volatile bit    TU16ACON0_CIE             at TU16ACON0 : 0
var volatile bit    TU16ACON0_ZIE             at TU16ACON0 : 1
var volatile bit    TU16ACON0_PRIE            at TU16ACON0 : 2
var volatile bit    TU16ACON0_RDSEL           at TU16ACON0 : 3
var volatile bit    TU16ACON0_OPOL            at TU16ACON0 : 4
var volatile bit    TU16ACON0_OM              at TU16ACON0 : 5
var volatile bit    TU16ACON0_CPOL            at TU16ACON0 : 6
var volatile bit    TU16ACON0_ON              at TU16ACON0 : 7
var volatile bit    TU16ACON0_TU16ACIE        at TU16ACON0 : 0
var volatile bit    TU16ACON0_TU16AZIE        at TU16ACON0 : 1
var volatile bit    TU16ACON0_TU16APRIE       at TU16ACON0 : 2
var volatile bit    TU16ACON0_TU16ARDSEL      at TU16ACON0 : 3
var volatile bit    TU16ACON0_TU16AOPOL       at TU16ACON0 : 4
var volatile bit    TU16ACON0_TU16AOM         at TU16ACON0 : 5
var volatile bit    TU16ACON0_TU16ACPOL       at TU16ACON0 : 6
var volatile bit    TU16ACON0_TU16AON         at TU16ACON0 : 7
-- ------------------------------------------------
var volatile byte   TU16ACON1                 at { 0x12D }
var volatile bit    TU16ACON1_CIF             at TU16ACON1 : 0
var volatile bit    TU16ACON1_ZIF             at TU16ACON1 : 1
var volatile bit    TU16ACON1_PRIF            at TU16ACON1 : 2
var volatile bit    TU16ACON1_CAPT            at TU16ACON1 : 3
var volatile bit    TU16ACON1_LIMIT           at TU16ACON1 : 4
var volatile bit    TU16ACON1_CLR             at TU16ACON1 : 5
var volatile bit    TU16ACON1_OSEN            at TU16ACON1 : 6
var volatile bit    TU16ACON1_RUN             at TU16ACON1 : 7
var volatile bit    TU16ACON1_TU16ACIF        at TU16ACON1 : 0
var volatile bit    TU16ACON1_TU16AZIF        at TU16ACON1 : 1
var volatile bit    TU16ACON1_TU16APRIF       at TU16ACON1 : 2
var volatile bit    TU16ACON1_TU16ACAPT       at TU16ACON1 : 3
var volatile bit    TU16ACON1_TU16ALIMIT      at TU16ACON1 : 4
var volatile bit    TU16ACON1_TU16ACLR        at TU16ACON1 : 5
var volatile bit    TU16ACON1_TMRAOSEN        at TU16ACON1 : 6
var volatile bit    TU16ACON1_TU16ARUN        at TU16ACON1 : 7
-- ------------------------------------------------
var volatile byte   TU16AHLT                  at { 0x12E }
var volatile bit*2  TU16AHLT_STOP             at TU16AHLT : 0
var volatile bit*2  TU16AHLT_RESET            at TU16AHLT : 2
var volatile bit*2  TU16AHLT_START            at TU16AHLT : 4
var volatile bit    TU16AHLT_CSYNC            at TU16AHLT : 6
var volatile bit    TU16AHLT_EPOL             at TU16AHLT : 7
var volatile bit    TU16AHLT_STOP0            at TU16AHLT : 0
var volatile bit    TU16AHLT_STOP1            at TU16AHLT : 1
var volatile bit    TU16AHLT_RESET0           at TU16AHLT : 2
var volatile bit    TU16AHLT_RESET1           at TU16AHLT : 3
var volatile bit    TU16AHLT_START0           at TU16AHLT : 4
var volatile bit    TU16AHLT_START1           at TU16AHLT : 5
var volatile bit*2  TU16AHLT_TU16ASTOP        at TU16AHLT : 0
var volatile bit*2  TU16AHLT_TU16ARESET       at TU16AHLT : 2
var volatile bit*2  TU16AHLT_TU16ASTART       at TU16AHLT : 4
var volatile bit    TU16AHLT_TU16ACSYNC       at TU16AHLT : 6
var volatile bit    TU16AHLT_TU16AEPOL        at TU16AHLT : 7
var volatile bit    TU16AHLT_TU16ASTOP0       at TU16AHLT : 0
var volatile bit    TU16AHLT_TU16ASTOP1       at TU16AHLT : 1
var volatile bit    TU16AHLT_TU16ARESET0      at TU16AHLT : 2
var volatile bit    TU16AHLT_TU16ARESET1      at TU16AHLT : 3
var volatile bit    TU16AHLT_TU16ASTART0      at TU16AHLT : 4
var volatile bit    TU16AHLT_TU16ASTART1      at TU16AHLT : 5
-- ------------------------------------------------
var volatile byte   TU16APS                   at { 0x12F }
var volatile bit    TU16APS_PS0               at TU16APS : 0
var volatile bit    TU16APS_PS1               at TU16APS : 1
var volatile bit    TU16APS_PS2               at TU16APS : 2
var volatile bit    TU16APS_PS3               at TU16APS : 3
var volatile bit    TU16APS_PS4               at TU16APS : 4
var volatile bit    TU16APS_PS5               at TU16APS : 5
var volatile bit    TU16APS_PS6               at TU16APS : 6
var volatile bit    TU16APS_PS7               at TU16APS : 7
var volatile bit    TU16APS_TU16APS0          at TU16APS : 0
var volatile bit    TU16APS_TU16APS1          at TU16APS : 1
var volatile bit    TU16APS_TU16APS2          at TU16APS : 2
var volatile bit    TU16APS_TU16APS3          at TU16APS : 3
var volatile bit    TU16APS_TU16APS4          at TU16APS : 4
var volatile bit    TU16APS_TU16APS5          at TU16APS : 5
var volatile bit    TU16APS_TU16APS6          at TU16APS : 6
var volatile bit    TU16APS_TU16APS7          at TU16APS : 7
-- ------------------------------------------------
var volatile byte*3 TU16ATMR                  at { 0x130 }
var volatile byte   TU16ATMRL_                at { 0x130 }
--
procedure TU16ATMRL'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   TU16ATMRL_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16ATMRL'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   x = TU16ATMRL_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16ATMRL_TMRL'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16ATMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16ATMRL_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TMRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TMRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRL_TU16ATMR7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRL_TU16ATMR7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16ACRL_                 at { 0x130 }
--
procedure TU16ACRL'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   TU16ACRL_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16ACRL'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   x = TU16ACRL_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16ACRL_CRL'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16ACRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16ACRL_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_CRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_CRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRL_TU16ACR7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRL_TU16ACR7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16ATMRH_                at { 0x131 }
--
procedure TU16ATMRH'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   TU16ATMRH_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16ATMRH'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   x = TU16ATMRH_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16ATMRH_TMRH'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16ATMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16ATMRH_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TMRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TMRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR8'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR8'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR9'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR9'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR10'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR10'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR11'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR11'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR12'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR12'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR13'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR13'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR14'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR14'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRH_TU16ATMR15'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRH_TU16ATMR15'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16ACRH_                 at { 0x131 }
--
procedure TU16ACRH'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   TU16ACRH_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16ACRH'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   x = TU16ACRH_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16ACRH_CRH'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16ACRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16ACRH_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_CRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_CRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR8'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR8'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR9'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR9'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR10'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR10'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR11'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR11'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR12'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR12'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR13'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR13'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR14'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR14'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRH_TU16ACR15'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRH_TU16ACR15'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16ATMRT_                at { 0x133 }
--
procedure TU16ATMRT'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   TU16ATMRT_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16ATMRT'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   x = TU16ATMRT_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16ATMRT_TMRT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16ATMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16ATMRT_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TMRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TMRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR24'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR24'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR25'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR25'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR26'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR26'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR27'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR27'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR28'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR28'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR29'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR29'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR30'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR30'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ATMRT_TU16ATMR31'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ATMRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ATMRT_TU16ATMR31'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ATMRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16ACRT_                 at { 0x133 }
--
procedure TU16ACRT'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   TU16ACRT_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16ACRT'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   x = TU16ACRT_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16ACRT_CRT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16ACRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16ACRT_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_CRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_CRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR24'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR24'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR25'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR25'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR26'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR26'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR27'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR27'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR28'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR28'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR29'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR29'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR30'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR30'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16ACRT_TU16ACR31'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16ACRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16ACRT_TU16ACR31'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16ACRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
-- ------------------------------------------------
var volatile byte*3 TU16APR                   at { 0x134 }
-- ------------------------------------------------
var volatile byte   TU16APRL                  at { 0x134 }
var volatile bit    TU16APRL_PRL0             at TU16APRL : 0
var volatile bit    TU16APRL_PRL1             at TU16APRL : 1
var volatile bit    TU16APRL_PRL2             at TU16APRL : 2
var volatile bit    TU16APRL_PRL3             at TU16APRL : 3
var volatile bit    TU16APRL_PRL4             at TU16APRL : 4
var volatile bit    TU16APRL_PRL5             at TU16APRL : 5
var volatile bit    TU16APRL_PRL6             at TU16APRL : 6
var volatile bit    TU16APRL_PRL7             at TU16APRL : 7
var volatile bit    TU16APRL_TU16APRL0        at TU16APRL : 0
var volatile bit    TU16APRL_TU16APRL1        at TU16APRL : 1
var volatile bit    TU16APRL_TU16APRL2        at TU16APRL : 2
var volatile bit    TU16APRL_TU16APRL3        at TU16APRL : 3
var volatile bit    TU16APRL_TU16APRL4        at TU16APRL : 4
var volatile bit    TU16APRL_TU16APRL5        at TU16APRL : 5
var volatile bit    TU16APRL_TU16APRL6        at TU16APRL : 6
var volatile bit    TU16APRL_TU16APRL7        at TU16APRL : 7
var volatile bit    TU16APRL_TU16APR0         at TU16APRL : 0
var volatile bit    TU16APRL_TU16APR1         at TU16APRL : 1
var volatile bit    TU16APRL_TU16APR2         at TU16APRL : 2
var volatile bit    TU16APRL_TU16APR3         at TU16APRL : 3
var volatile bit    TU16APRL_TU16APR4         at TU16APRL : 4
var volatile bit    TU16APRL_TU16APR5         at TU16APRL : 5
var volatile bit    TU16APRL_TU16APR6         at TU16APRL : 6
var volatile bit    TU16APRL_TU16APR7         at TU16APRL : 7
-- ------------------------------------------------
var volatile byte   TU16APRH                  at { 0x135 }
var volatile bit    TU16APRH_PRH0             at TU16APRH : 0
var volatile bit    TU16APRH_PRH1             at TU16APRH : 1
var volatile bit    TU16APRH_PRH2             at TU16APRH : 2
var volatile bit    TU16APRH_PRH3             at TU16APRH : 3
var volatile bit    TU16APRH_PRH4             at TU16APRH : 4
var volatile bit    TU16APRH_PRH5             at TU16APRH : 5
var volatile bit    TU16APRH_PRH6             at TU16APRH : 6
var volatile bit    TU16APRH_PRH7             at TU16APRH : 7
var volatile bit    TU16APRH_TU16APRH0        at TU16APRH : 0
var volatile bit    TU16APRH_TU16APRH1        at TU16APRH : 1
var volatile bit    TU16APRH_TU16APRH2        at TU16APRH : 2
var volatile bit    TU16APRH_TU16APRH3        at TU16APRH : 3
var volatile bit    TU16APRH_TU16APRH4        at TU16APRH : 4
var volatile bit    TU16APRH_TU16APRH5        at TU16APRH : 5
var volatile bit    TU16APRH_TU16APRH6        at TU16APRH : 6
var volatile bit    TU16APRH_TU16APRH7        at TU16APRH : 7
var volatile bit    TU16APRH_TU16APR8         at TU16APRH : 0
var volatile bit    TU16APRH_TU16APR9         at TU16APRH : 1
var volatile bit    TU16APRH_TU16APR10        at TU16APRH : 2
var volatile bit    TU16APRH_TU16APR11        at TU16APRH : 3
var volatile bit    TU16APRH_TU16APR12        at TU16APRH : 4
var volatile bit    TU16APRH_TU16APR13        at TU16APRH : 5
var volatile bit    TU16APRH_TU16APR14        at TU16APRH : 6
var volatile bit    TU16APRH_TU16APR15        at TU16APRH : 7
-- ------------------------------------------------
var volatile byte   TU16APRT                  at { 0x137 }
var volatile bit    TU16APRT_PRT0             at TU16APRT : 0
var volatile bit    TU16APRT_PRT1             at TU16APRT : 1
var volatile bit    TU16APRT_PRT2             at TU16APRT : 2
var volatile bit    TU16APRT_PRT3             at TU16APRT : 3
var volatile bit    TU16APRT_PRT4             at TU16APRT : 4
var volatile bit    TU16APRT_PRT5             at TU16APRT : 5
var volatile bit    TU16APRT_PRT6             at TU16APRT : 6
var volatile bit    TU16APRT_PRT7             at TU16APRT : 7
var volatile bit    TU16APRT_TU16APRT0        at TU16APRT : 0
var volatile bit    TU16APRT_TU16APRT1        at TU16APRT : 1
var volatile bit    TU16APRT_TU16APRT2        at TU16APRT : 2
var volatile bit    TU16APRT_TU16APRT3        at TU16APRT : 3
var volatile bit    TU16APRT_TU16APRT4        at TU16APRT : 4
var volatile bit    TU16APRT_TU16APRT5        at TU16APRT : 5
var volatile bit    TU16APRT_TU16APRT6        at TU16APRT : 6
var volatile bit    TU16APRT_TU16APRT7        at TU16APRT : 7
var volatile bit    TU16APRT_TU16APR24        at TU16APRT : 0
var volatile bit    TU16APRT_TU16APR25        at TU16APRT : 1
var volatile bit    TU16APRT_TU16APR26        at TU16APRT : 2
var volatile bit    TU16APRT_TU16APR27        at TU16APRT : 3
var volatile bit    TU16APRT_TU16APR28        at TU16APRT : 4
var volatile bit    TU16APRT_TU16APR29        at TU16APRT : 5
var volatile bit    TU16APRT_TU16APR30        at TU16APRT : 6
var volatile bit    TU16APRT_TU16APR31        at TU16APRT : 7
-- ------------------------------------------------
var volatile byte   TU16ACLK                  at { 0x138 }
var volatile bit*5  TU16ACLK_CLK              at TU16ACLK : 0
var volatile bit    TU16ACLK_CLK0             at TU16ACLK : 0
var volatile bit    TU16ACLK_CLK1             at TU16ACLK : 1
var volatile bit    TU16ACLK_CLK2             at TU16ACLK : 2
var volatile bit    TU16ACLK_CLK3             at TU16ACLK : 3
var volatile bit    TU16ACLK_CLK4             at TU16ACLK : 4
var volatile bit    TU16ACLK_TU16ACLK0        at TU16ACLK : 0
var volatile bit    TU16ACLK_TU16ACLK1        at TU16ACLK : 1
var volatile bit    TU16ACLK_TU16ACLK2        at TU16ACLK : 2
var volatile bit    TU16ACLK_TU16ACLK3        at TU16ACLK : 3
var volatile bit    TU16ACLK_TU16ACLK4        at TU16ACLK : 4
-- ------------------------------------------------
var volatile byte   TU16AERS                  at { 0x139 }
var volatile bit*6  TU16AERS_ERS              at TU16AERS : 0
var volatile bit    TU16AERS_ERS0             at TU16AERS : 0
var volatile bit    TU16AERS_ERS1             at TU16AERS : 1
var volatile bit    TU16AERS_ERS2             at TU16AERS : 2
var volatile bit    TU16AERS_ERS3             at TU16AERS : 3
var volatile bit    TU16AERS_ERS4             at TU16AERS : 4
var volatile bit    TU16AERS_ERS5             at TU16AERS : 5
var volatile bit    TU16AERS_TU16AERS0        at TU16AERS : 0
var volatile bit    TU16AERS_TU16AERS1        at TU16AERS : 1
var volatile bit    TU16AERS_TU16AERS2        at TU16AERS : 2
var volatile bit    TU16AERS_TU16AERS3        at TU16AERS : 3
var volatile bit    TU16AERS_TU16AERS4        at TU16AERS : 4
var volatile bit    TU16AERS_TU16AERS5        at TU16AERS : 5
-- ------------------------------------------------
var volatile byte   TU16BCON0                 at { 0x13A }
var volatile bit    TU16BCON0_CIE             at TU16BCON0 : 0
var volatile bit    TU16BCON0_ZIE             at TU16BCON0 : 1
var volatile bit    TU16BCON0_PRIE            at TU16BCON0 : 2
var volatile bit    TU16BCON0_RDSEL           at TU16BCON0 : 3
var volatile bit    TU16BCON0_OPOL            at TU16BCON0 : 4
var volatile bit    TU16BCON0_OM              at TU16BCON0 : 5
var volatile bit    TU16BCON0_CPOL            at TU16BCON0 : 6
var volatile bit    TU16BCON0_ON              at TU16BCON0 : 7
var volatile bit    TU16BCON0_TU16BCIE        at TU16BCON0 : 0
var volatile bit    TU16BCON0_TU16BZIE        at TU16BCON0 : 1
var volatile bit    TU16BCON0_TU16BPRIE       at TU16BCON0 : 2
var volatile bit    TU16BCON0_TU16BRDSEL      at TU16BCON0 : 3
var volatile bit    TU16BCON0_TU16BOPOL       at TU16BCON0 : 4
var volatile bit    TU16BCON0_TU16BOM         at TU16BCON0 : 5
var volatile bit    TU16BCON0_TU16BCPOL       at TU16BCON0 : 6
var volatile bit    TU16BCON0_TU16BON         at TU16BCON0 : 7
-- ------------------------------------------------
var volatile byte   TU16BCON1                 at { 0x13B }
var volatile bit    TU16BCON1_CIF             at TU16BCON1 : 0
var volatile bit    TU16BCON1_ZIF             at TU16BCON1 : 1
var volatile bit    TU16BCON1_PRIF            at TU16BCON1 : 2
var volatile bit    TU16BCON1_CAPT            at TU16BCON1 : 3
var volatile bit    TU16BCON1_LIMIT           at TU16BCON1 : 4
var volatile bit    TU16BCON1_CLR             at TU16BCON1 : 5
var volatile bit    TU16BCON1_OSEN            at TU16BCON1 : 6
var volatile bit    TU16BCON1_RUN             at TU16BCON1 : 7
var volatile bit    TU16BCON1_TU16BCIF        at TU16BCON1 : 0
var volatile bit    TU16BCON1_TU16BZIF        at TU16BCON1 : 1
var volatile bit    TU16BCON1_TU16BPRIF       at TU16BCON1 : 2
var volatile bit    TU16BCON1_TU16BCAPT       at TU16BCON1 : 3
var volatile bit    TU16BCON1_TU16BLIMIT      at TU16BCON1 : 4
var volatile bit    TU16BCON1_TU16BCLR        at TU16BCON1 : 5
var volatile bit    TU16BCON1_TMRBOSEN        at TU16BCON1 : 6
var volatile bit    TU16BCON1_TU16BRUN        at TU16BCON1 : 7
-- ------------------------------------------------
var volatile byte   TU16BHLT                  at { 0x13C }
var volatile bit*2  TU16BHLT_STOP             at TU16BHLT : 0
var volatile bit*2  TU16BHLT_RESET            at TU16BHLT : 2
var volatile bit*2  TU16BHLT_START            at TU16BHLT : 4
var volatile bit    TU16BHLT_CSYNC            at TU16BHLT : 6
var volatile bit    TU16BHLT_EPOL             at TU16BHLT : 7
var volatile bit    TU16BHLT_STOP0            at TU16BHLT : 0
var volatile bit    TU16BHLT_STOP1            at TU16BHLT : 1
var volatile bit    TU16BHLT_RESET0           at TU16BHLT : 2
var volatile bit    TU16BHLT_RESET1           at TU16BHLT : 3
var volatile bit    TU16BHLT_START0           at TU16BHLT : 4
var volatile bit    TU16BHLT_START1           at TU16BHLT : 5
var volatile bit*2  TU16BHLT_TU16BSTOP        at TU16BHLT : 0
var volatile bit*2  TU16BHLT_TU16BRESET       at TU16BHLT : 2
var volatile bit*2  TU16BHLT_TU16BSTART       at TU16BHLT : 4
var volatile bit    TU16BHLT_TU16BCSYNC       at TU16BHLT : 6
var volatile bit    TU16BHLT_TU16BEPOL        at TU16BHLT : 7
var volatile bit    TU16BHLT_TU16BSTOP0       at TU16BHLT : 0
var volatile bit    TU16BHLT_TU16BSTOP1       at TU16BHLT : 1
var volatile bit    TU16BHLT_TU16BRESET0      at TU16BHLT : 2
var volatile bit    TU16BHLT_TU16BRESET1      at TU16BHLT : 3
var volatile bit    TU16BHLT_TU16BSTART0      at TU16BHLT : 4
var volatile bit    TU16BHLT_TU16BSTART1      at TU16BHLT : 5
-- ------------------------------------------------
var volatile byte   TU16BPS                   at { 0x13D }
var volatile bit    TU16BPS_PS0               at TU16BPS : 0
var volatile bit    TU16BPS_PS1               at TU16BPS : 1
var volatile bit    TU16BPS_PS2               at TU16BPS : 2
var volatile bit    TU16BPS_PS3               at TU16BPS : 3
var volatile bit    TU16BPS_PS4               at TU16BPS : 4
var volatile bit    TU16BPS_PS5               at TU16BPS : 5
var volatile bit    TU16BPS_PS6               at TU16BPS : 6
var volatile bit    TU16BPS_PS7               at TU16BPS : 7
var volatile bit    TU16BPS_TU16BPS0          at TU16BPS : 0
var volatile bit    TU16BPS_TU16BPS1          at TU16BPS : 1
var volatile bit    TU16BPS_TU16BPS2          at TU16BPS : 2
var volatile bit    TU16BPS_TU16BPS3          at TU16BPS : 3
var volatile bit    TU16BPS_TU16BPS4          at TU16BPS : 4
var volatile bit    TU16BPS_TU16BPS5          at TU16BPS : 5
var volatile bit    TU16BPS_TU16BPS6          at TU16BPS : 6
var volatile bit    TU16BPS_TU16BPS7          at TU16BPS : 7
-- ------------------------------------------------
var volatile byte*3 TU16BTMR                  at { 0x13E }
var volatile byte   TU16BTMRL_                at { 0x13E }
--
procedure TU16BTMRL'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   TU16BTMRL_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16BTMRL'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   x = TU16BTMRL_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16BTMRL_TMRL'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16BTMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16BTMRL_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TMRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TMRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRL_TU16BTMR7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRL_TU16BTMR7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16BCRL_                 at { 0x13E }
--
procedure TU16BCRL'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   TU16BCRL_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16BCRL'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   x = TU16BCRL_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16BCRL_CRL'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16BCRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16BCRL_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_CRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_CRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCRL7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCRL7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRL_TU16BCR7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRL_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRL_TU16BCR7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRL_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16BTMRH_                at { 0x13F }
--
procedure TU16BTMRH'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   TU16BTMRH_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16BTMRH'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   x = TU16BTMRH_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16BTMRH_TMRH'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16BTMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16BTMRH_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TMRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TMRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR8'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR8'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR9'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR9'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR10'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR10'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR11'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR11'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR12'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR12'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR13'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR13'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR14'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR14'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRH_TU16BTMR15'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRH_TU16BTMR15'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16BCRH_                 at { 0x13F }
--
procedure TU16BCRH'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   TU16BCRH_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16BCRH'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   x = TU16BCRH_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16BCRH_CRH'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16BCRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16BCRH_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_CRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_CRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCRH7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCRH7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR8'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR8'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR9'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR9'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR10'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR10'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR11'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR11'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR12'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR12'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR13'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR13'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR14'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR14'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRH_TU16BCR15'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRH_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRH_TU16BCR15'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRH_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16BTMRT_                at { 0x141 }
--
procedure TU16BTMRT'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   TU16BTMRT_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16BTMRT'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x1
   x = TU16BTMRT_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16BTMRT_TMRT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16BTMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16BTMRT_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TMRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TMRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR24'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR24'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR25'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR25'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR26'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR26'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR27'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR27'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR28'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR28'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR29'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR29'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR30'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR30'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BTMRT_TU16BTMR31'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BTMRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BTMRT_TU16BTMR31'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BTMRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
var volatile byte   TU16BCRT_                 at { 0x141 }
--
procedure TU16BCRT'put(byte in x) is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   TU16BCRT_ = x
   _control_sfr = _saved_sfr
end procedure
function TU16BCRT'get() return byte is
   var volatile byte _control_sfr at 0x0
   var byte _saved_sfr = _control_sfr
   var byte x
   _control_sfr = _control_sfr & (!0x08)
   _control_sfr = _control_sfr | 0x0
   x = TU16BCRT_
   _control_sfr = _saved_sfr
   return  x
end function
--
procedure TU16BCRT_CRT'put(bit*8 in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 y at TU16BCRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT'get() return bit*8 is
   var volatile bit control_bit at 0x0 : 0
   var bit*8 x at TU16BCRT_ : 0
   var bit*8 y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_CRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_CRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT0'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT0'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT1'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT1'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT2'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT2'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT3'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT3'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT4'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT4'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT5'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT5'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT6'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT6'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCRT7'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCRT7'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR24'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 0
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR24'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 0
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR25'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 1
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR25'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 1
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR26'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 2
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR26'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 2
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR27'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 3
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR27'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 3
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR28'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 4
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR28'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 4
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR29'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 5
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR29'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 5
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR30'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 6
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR30'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 6
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
--
procedure TU16BCRT_TU16BCR31'put(bit in x) is
   var volatile bit control_bit at 0x0 : 0
   var bit y at TU16BCRT_ : 7
   control_bit = TRUE
   y = x
   control_bit = FALSE
end procedure
function TU16BCRT_TU16BCR31'get() return bit is
   var volatile bit control_bit at 0x0 : 0
   var bit x at TU16BCRT_ : 7
   var bit y
   control_bit = TRUE
   y = x
   control_bit = FALSE
   return y
end function
-- ------------------------------------------------
var volatile byte*3 TU16BPR                   at { 0x142 }
-- ------------------------------------------------
var volatile byte   TU16BPRL                  at { 0x142 }
var volatile bit    TU16BPRL_PRL0             at TU16BPRL : 0
var volatile bit    TU16BPRL_PRL1             at TU16BPRL : 1
var volatile bit    TU16BPRL_PRL2             at TU16BPRL : 2
var volatile bit    TU16BPRL_PRL3             at TU16BPRL : 3
var volatile bit    TU16BPRL_PRL4             at TU16BPRL : 4
var volatile bit    TU16BPRL_PRL5             at TU16BPRL : 5
var volatile bit    TU16BPRL_PRL6             at TU16BPRL : 6
var volatile bit    TU16BPRL_PRL7             at TU16BPRL : 7
var volatile bit    TU16BPRL_TU16BPRL0        at TU16BPRL : 0
var volatile bit    TU16BPRL_TU16BPRL1        at TU16BPRL : 1
var volatile bit    TU16BPRL_TU16BPRL2        at TU16BPRL : 2
var volatile bit    TU16BPRL_TU16BPRL3        at TU16BPRL : 3
var volatile bit    TU16BPRL_TU16BPRL4        at TU16BPRL : 4
var volatile bit    TU16BPRL_TU16BPRL5        at TU16BPRL : 5
var volatile bit    TU16BPRL_TU16BPRL6        at TU16BPRL : 6
var volatile bit    TU16BPRL_TU16BPRL7        at TU16BPRL : 7
var volatile bit    TU16BPRL_TU16BPR0         at TU16BPRL : 0
var volatile bit    TU16BPRL_TU16BPR1         at TU16BPRL : 1
var volatile bit    TU16BPRL_TU16BPR2         at TU16BPRL : 2
var volatile bit    TU16BPRL_TU16BPR3         at TU16BPRL : 3
var volatile bit    TU16BPRL_TU16BPR4         at TU16BPRL : 4
var volatile bit    TU16BPRL_TU16BPR5         at TU16BPRL : 5
var volatile bit    TU16BPRL_TU16BPR6         at TU16BPRL : 6
var volatile bit    TU16BPRL_TU16BPR7         at TU16BPRL : 7
-- ------------------------------------------------
var volatile byte   TU16BPRH                  at { 0x143 }
var volatile bit    TU16BPRH_PRH0             at TU16BPRH : 0
var volatile bit    TU16BPRH_PRH1             at TU16BPRH : 1
var volatile bit    TU16BPRH_PRH2             at TU16BPRH : 2
var volatile bit    TU16BPRH_PRH3             at TU16BPRH : 3
var volatile bit    TU16BPRH_PRH4             at TU16BPRH : 4
var volatile bit    TU16BPRH_PRH5             at TU16BPRH : 5
var volatile bit    TU16BPRH_PRH6             at TU16BPRH : 6
var volatile bit    TU16BPRH_PRH7             at TU16BPRH : 7
var volatile bit    TU16BPRH_TU16BPRH0        at TU16BPRH : 0
var volatile bit    TU16BPRH_TU16BPRH1        at TU16BPRH : 1
var volatile bit    TU16BPRH_TU16BPRH2        at TU16BPRH : 2
var volatile bit    TU16BPRH_TU16BPRH3        at TU16BPRH : 3
var volatile bit    TU16BPRH_TU16BPRH4        at TU16BPRH : 4
var volatile bit    TU16BPRH_TU16BPRH5        at TU16BPRH : 5
var volatile bit    TU16BPRH_TU16BPRH6        at TU16BPRH : 6
var volatile bit    TU16BPRH_TU16BPRH7        at TU16BPRH : 7
var volatile bit    TU16BPRH_TU16BPR8         at TU16BPRH : 0
var volatile bit    TU16BPRH_TU16BPR9         at TU16BPRH : 1
var volatile bit    TU16BPRH_TU16BPR10        at TU16BPRH : 2
var volatile bit    TU16BPRH_TU16BPR11        at TU16BPRH : 3
var volatile bit    TU16BPRH_TU16BPR12        at TU16BPRH : 4
var volatile bit    TU16BPRH_TU16BPR13        at TU16BPRH : 5
var volatile bit    TU16BPRH_TU16BPR14        at TU16BPRH : 6
var volatile bit    TU16BPRH_TU16BPR15        at TU16BPRH : 7
-- ------------------------------------------------
var volatile byte   TU16BPRT                  at { 0x145 }
var volatile bit    TU16BPRT_PRT0             at TU16BPRT : 0
var volatile bit    TU16BPRT_PRT1             at TU16BPRT : 1
var volatile bit    TU16BPRT_PRT2             at TU16BPRT : 2
var volatile bit    TU16BPRT_PRT3             at TU16BPRT : 3
var volatile bit    TU16BPRT_PRT4             at TU16BPRT : 4
var volatile bit    TU16BPRT_PRT5             at TU16BPRT : 5
var volatile bit    TU16BPRT_PRT6             at TU16BPRT : 6
var volatile bit    TU16BPRT_PRT7             at TU16BPRT : 7
var volatile bit    TU16BPRT_TU16BPRT0        at TU16BPRT : 0
var volatile bit    TU16BPRT_TU16BPRT1        at TU16BPRT : 1
var volatile bit    TU16BPRT_TU16BPRT2        at TU16BPRT : 2
var volatile bit    TU16BPRT_TU16BPRT3        at TU16BPRT : 3
var volatile bit    TU16BPRT_TU16BPRT4        at TU16BPRT : 4
var volatile bit    TU16BPRT_TU16BPRT5        at TU16BPRT : 5
var volatile bit    TU16BPRT_TU16BPRT6        at TU16BPRT : 6
var volatile bit    TU16BPRT_TU16BPRT7        at TU16BPRT : 7
var volatile bit    TU16BPRT_TU16BPR24        at TU16BPRT : 0
var volatile bit    TU16BPRT_TU16BPR25        at TU16BPRT : 1
var volatile bit    TU16BPRT_TU16BPR26        at TU16BPRT : 2
var volatile bit    TU16BPRT_TU16BPR27        at TU16BPRT : 3
var volatile bit    TU16BPRT_TU16BPR28        at TU16BPRT : 4
var volatile bit    TU16BPRT_TU16BPR29        at TU16BPRT : 5
var volatile bit    TU16BPRT_TU16BPR30        at TU16BPRT : 6
var volatile bit    TU16BPRT_TU16BPR31        at TU16BPRT : 7
-- ------------------------------------------------
var volatile byte   TU16BCLK                  at { 0x146 }
var volatile bit*5  TU16BCLK_CLK              at TU16BCLK : 0
var volatile bit    TU16BCLK_CLK0             at TU16BCLK : 0
var volatile bit    TU16BCLK_CLK1             at TU16BCLK : 1
var volatile bit    TU16BCLK_CLK2             at TU16BCLK : 2
var volatile bit    TU16BCLK_CLK3             at TU16BCLK : 3
var volatile bit    TU16BCLK_CLK4             at TU16BCLK : 4
var volatile bit    TU16BCLK_TU16BCLK0        at TU16BCLK : 0
var volatile bit    TU16BCLK_TU16BCLK1        at TU16BCLK : 1
var volatile bit    TU16BCLK_TU16BCLK2        at TU16BCLK : 2
var volatile bit    TU16BCLK_TU16BCLK3        at TU16BCLK : 3
var volatile bit    TU16BCLK_TU16BCLK4        at TU16BCLK : 4
-- ------------------------------------------------
var volatile byte   TU16BERS                  at { 0x147 }
var volatile bit*6  TU16BERS_ERS              at TU16BERS : 0
var volatile bit    TU16BERS_ERS0             at TU16BERS : 0
var volatile bit    TU16BERS_ERS1             at TU16BERS : 1
var volatile bit    TU16BERS_ERS2             at TU16BERS : 2
var volatile bit    TU16BERS_ERS3             at TU16BERS : 3
var volatile bit    TU16BERS_ERS4             at TU16BERS : 4
var volatile bit    TU16BERS_ERS5             at TU16BERS : 5
var volatile bit    TU16BERS_TU16BERS0        at TU16BERS : 0
var volatile bit    TU16BERS_TU16BERS1        at TU16BERS : 1
var volatile bit    TU16BERS_TU16BERS2        at TU16BERS : 2
var volatile bit    TU16BERS_TU16BERS3        at TU16BERS : 3
var volatile bit    TU16BERS_TU16BERS4        at TU16BERS : 4
var volatile bit    TU16BERS_TU16BERS5        at TU16BERS : 5
-- ------------------------------------------------
var volatile byte   CCPTMRS0                  at { 0x148 }
var volatile bit*2  CCPTMRS0_C1TSEL           at CCPTMRS0 : 0
var volatile bit*2  CCPTMRS0_C2TSEL           at CCPTMRS0 : 2
var volatile bit    CCPTMRS0_C1TSEL0          at CCPTMRS0 : 0
var volatile bit    CCPTMRS0_C1TSEL1          at CCPTMRS0 : 1
var volatile bit    CCPTMRS0_C2TSEL2          at CCPTMRS0 : 2
var volatile bit    CCPTMRS0_C2TSEL3          at CCPTMRS0 : 3
-- ------------------------------------------------
var volatile word   CCPR1                     at { 0x149 }
-- ------------------------------------------------
var volatile byte   CCPR1L                    at { 0x149 }
-- ------------------------------------------------
var volatile byte   CCPR1H                    at { 0x14A }
-- ------------------------------------------------
var volatile byte   CCP1CON                   at { 0x14B }
var volatile bit*4  CCP1CON_MODE              at CCP1CON : 0
var volatile bit    CCP1CON_FMT               at CCP1CON : 4
var volatile bit    CCP1CON_OUT               at CCP1CON : 5
var volatile bit    CCP1CON_EN                at CCP1CON : 7
var volatile bit    CCP1CON_MODE0             at CCP1CON : 0
var volatile bit    CCP1CON_MODE1             at CCP1CON : 1
var volatile bit    CCP1CON_MODE2             at CCP1CON : 2
var volatile bit    CCP1CON_MODE3             at CCP1CON : 3
var volatile bit*4  CCP1CON_CCP1MODE          at CCP1CON : 0
var volatile bit    CCP1CON_CCP1FMT           at CCP1CON : 4
var volatile bit    CCP1CON_CCP1OUT           at CCP1CON : 5
var volatile bit    CCP1CON_CCP1EN            at CCP1CON : 7
var volatile bit    CCP1CON_CCP1MODE0         at CCP1CON : 0
var volatile bit    CCP1CON_CCP1MODE1         at CCP1CON : 1
var volatile bit    CCP1CON_CCP1MODE2         at CCP1CON : 2
var volatile bit    CCP1CON_CCP1MODE3         at CCP1CON : 3
-- ------------------------------------------------
var volatile byte   CCP1CAP                   at { 0x14C }
var volatile bit*3  CCP1CAP_CTS               at CCP1CAP : 0
var volatile bit    CCP1CAP_CTS0              at CCP1CAP : 0
var volatile bit    CCP1CAP_CTS1              at CCP1CAP : 1
var volatile bit    CCP1CAP_CTS2              at CCP1CAP : 2
var volatile bit*3  CCP1CAP_CCP1CTS           at CCP1CAP : 0
var volatile bit    CCP1CAP_CCP1CTS0          at CCP1CAP : 0
var volatile bit    CCP1CAP_CCP1CTS1          at CCP1CAP : 1
var volatile bit    CCP1CAP_CCP1CTS2          at CCP1CAP : 2
-- ------------------------------------------------
var volatile word   CCPR2                     at { 0x14D }
-- ------------------------------------------------
var volatile byte   CCPR2L                    at { 0x14D }
-- ------------------------------------------------
var volatile byte   CCPR2H                    at { 0x14E }
-- ------------------------------------------------
var volatile byte   CCP2CON                   at { 0x14F }
var volatile bit*4  CCP2CON_MODE              at CCP2CON : 0
var volatile bit    CCP2CON_FMT               at CCP2CON : 4
var volatile bit    CCP2CON_OUT               at CCP2CON : 5
var volatile bit    CCP2CON_EN                at CCP2CON : 7
var volatile bit    CCP2CON_MODE0             at CCP2CON : 0
var volatile bit    CCP2CON_MODE1             at CCP2CON : 1
var volatile bit    CCP2CON_MODE2             at CCP2CON : 2
var volatile bit    CCP2CON_MODE3             at CCP2CON : 3
var volatile bit*4  CCP2CON_CCP2MODE          at CCP2CON : 0
var volatile bit    CCP2CON_CCP2FMT           at CCP2CON : 4
var volatile bit    CCP2CON_CCP2OUT           at CCP2CON : 5
var volatile bit    CCP2CON_CCP2EN            at CCP2CON : 7
var volatile bit    CCP2CON_CCP2MODE0         at CCP2CON : 0
var volatile bit    CCP2CON_CCP2MODE1         at CCP2CON : 1
var volatile bit    CCP2CON_CCP2MODE2         at CCP2CON : 2
var volatile bit    CCP2CON_CCP2MODE3         at CCP2CON : 3
-- ------------------------------------------------
var volatile byte   CCP2CAP                   at { 0x150 }
var volatile bit*3  CCP2CAP_CTS               at CCP2CAP : 0
var volatile bit    CCP2CAP_CTS0              at CCP2CAP : 0
var volatile bit    CCP2CAP_CTS1              at CCP2CAP : 1
var volatile bit    CCP2CAP_CTS2              at CCP2CAP : 2
var volatile bit*3  CCP2CAP_CCP2CTS           at CCP2CAP : 0
var volatile bit    CCP2CAP_CCP2CTS0          at CCP2CAP : 0
var volatile bit    CCP2CAP_CCP2CTS1          at CCP2CAP : 1
var volatile bit    CCP2CAP_CCP2CTS2          at CCP2CAP : 2
-- ------------------------------------------------
var volatile byte   PWMLOAD                   at { 0x151 }
var volatile bit    PWMLOAD_MPWM1LD           at PWMLOAD : 0
var volatile bit    PWMLOAD_MPWM2LD           at PWMLOAD : 1
-- ------------------------------------------------
var volatile byte   PWMEN                     at { 0x152 }
var volatile bit    PWMEN_MPWM1EN             at PWMEN : 0
var volatile bit    PWMEN_MPWM2EN             at PWMEN : 1
-- ------------------------------------------------
var volatile byte   PWM1ERS                   at { 0x153 }
var volatile bit*4  PWM1ERS_ERS               at PWM1ERS : 0
var volatile bit    PWM1ERS_ERS0              at PWM1ERS : 0
var volatile bit    PWM1ERS_ERS1              at PWM1ERS : 1
var volatile bit    PWM1ERS_ERS2              at PWM1ERS : 2
var volatile bit    PWM1ERS_ERS3              at PWM1ERS : 3
-- ------------------------------------------------
var volatile byte   PWM1CLK                   at { 0x154 }
var volatile bit*4  PWM1CLK_CLK               at PWM1CLK : 0
var volatile bit    PWM1CLK_CLK0              at PWM1CLK : 0
var volatile bit    PWM1CLK_CLK1              at PWM1CLK : 1
var volatile bit    PWM1CLK_CLK2              at PWM1CLK : 2
var volatile bit    PWM1CLK_CLK3              at PWM1CLK : 3
-- ------------------------------------------------
var volatile byte   PWM1LDS                   at { 0x155 }
var volatile bit*4  PWM1LDS_LDS               at PWM1LDS : 0
var volatile bit    PWM1LDS_LDS0              at PWM1LDS : 0
var volatile bit    PWM1LDS_LDS1              at PWM1LDS : 1
var volatile bit    PWM1LDS_LDS2              at PWM1LDS : 2
var volatile bit    PWM1LDS_LDS3              at PWM1LDS : 3
-- ------------------------------------------------
var volatile word   PWM1PR                    at { 0x156 }
-- ------------------------------------------------
var volatile byte   PWM1PRL                   at { 0x156 }
-- ------------------------------------------------
var volatile byte   PWM1PRH                   at { 0x157 }
-- ------------------------------------------------
var volatile byte   PWM1CPRE                  at { 0x158 }
-- ------------------------------------------------
var volatile byte   PWM1PIPOS                 at { 0x159 }
-- ------------------------------------------------
var volatile byte   PWM1GIR                   at { 0x15A }
var volatile bit    PWM1GIR_S1P1IF            at PWM1GIR : 0
var volatile bit    PWM1GIR_S1P2IF            at PWM1GIR : 1
-- ------------------------------------------------
var volatile byte   PWM1GIE                   at { 0x15B }
var volatile bit    PWM1GIE_S1P1IE            at PWM1GIE : 0
var volatile bit    PWM1GIE_S1P2IE            at PWM1GIE : 1
-- ------------------------------------------------
var volatile byte   PWM1CON                   at { 0x15C }
var volatile bit    PWM1CON_ERSNOW            at PWM1CON : 0
var volatile bit    PWM1CON_ERSPOL            at PWM1CON : 1
var volatile bit    PWM1CON_LD                at PWM1CON : 2
var volatile bit    PWM1CON_EN                at PWM1CON : 7
-- ------------------------------------------------
var volatile byte   PWM1S1CFG                 at { 0x15D }
var volatile bit*3  PWM1S1CFG_MODE            at PWM1S1CFG : 0
var volatile bit    PWM1S1CFG_PPEN            at PWM1S1CFG : 3
var volatile bit    PWM1S1CFG_POL1            at PWM1S1CFG : 6
var volatile bit    PWM1S1CFG_POL2            at PWM1S1CFG : 7
var volatile bit    PWM1S1CFG_MODE0           at PWM1S1CFG : 0
var volatile bit    PWM1S1CFG_MODE1           at PWM1S1CFG : 1
var volatile bit    PWM1S1CFG_MODE2           at PWM1S1CFG : 2
-- ------------------------------------------------
var volatile word   PWM1S1P1                  at { 0x15E }
-- ------------------------------------------------
var volatile byte   PWM1S1P1L                 at { 0x15E }
-- ------------------------------------------------
var volatile byte   PWM1S1P1H                 at { 0x15F }
-- ------------------------------------------------
var volatile word   PWM1S1P2                  at { 0x160 }
-- ------------------------------------------------
var volatile byte   PWM1S1P2L                 at { 0x160 }
-- ------------------------------------------------
var volatile byte   PWM1S1P2H                 at { 0x161 }
-- ------------------------------------------------
var volatile byte   PWM2ERS                   at { 0x162 }
var volatile bit*4  PWM2ERS_ERS               at PWM2ERS : 0
var volatile bit    PWM2ERS_ERS0              at PWM2ERS : 0
var volatile bit    PWM2ERS_ERS1              at PWM2ERS : 1
var volatile bit    PWM2ERS_ERS2              at PWM2ERS : 2
var volatile bit    PWM2ERS_ERS3              at PWM2ERS : 3
-- ------------------------------------------------
var volatile byte   PWM2CLK                   at { 0x163 }
var volatile bit*4  PWM2CLK_CLK               at PWM2CLK : 0
var volatile bit    PWM2CLK_CLK0              at PWM2CLK : 0
var volatile bit    PWM2CLK_CLK1              at PWM2CLK : 1
var volatile bit    PWM2CLK_CLK2              at PWM2CLK : 2
var volatile bit    PWM2CLK_CLK3              at PWM2CLK : 3
-- ------------------------------------------------
var volatile byte   PWM2LDS                   at { 0x164 }
var volatile bit*4  PWM2LDS_LDS               at PWM2LDS : 0
var volatile bit    PWM2LDS_LDS0              at PWM2LDS : 0
var volatile bit    PWM2LDS_LDS1              at PWM2LDS : 1
var volatile bit    PWM2LDS_LDS2              at PWM2LDS : 2
var volatile bit    PWM2LDS_LDS3              at PWM2LDS : 3
-- ------------------------------------------------
var volatile word   PWM2PR                    at { 0x165 }
-- ------------------------------------------------
var volatile byte   PWM2PRL                   at { 0x165 }
-- ------------------------------------------------
var volatile byte   PWM2PRH                   at { 0x166 }
-- ------------------------------------------------
var volatile byte   PWM2CPRE                  at { 0x167 }
-- ------------------------------------------------
var volatile byte   PWM2PIPOS                 at { 0x168 }
-- ------------------------------------------------
var volatile byte   PWM2GIR                   at { 0x169 }
var volatile bit    PWM2GIR_S1P1IF            at PWM2GIR : 0
var volatile bit    PWM2GIR_S1P2IF            at PWM2GIR : 1
-- ------------------------------------------------
var volatile byte   PWM2GIE                   at { 0x16A }
var volatile bit    PWM2GIE_S1P1IE            at PWM2GIE : 0
var volatile bit    PWM2GIE_S1P2IE            at PWM2GIE : 1
-- ------------------------------------------------
var volatile byte   PWM2CON                   at { 0x16B }
var volatile bit    PWM2CON_ERSNOW            at PWM2CON : 0
var volatile bit    PWM2CON_ERSPOL            at PWM2CON : 1
var volatile bit    PWM2CON_LD                at PWM2CON : 2
var volatile bit    PWM2CON_EN                at PWM2CON : 7
-- ------------------------------------------------
var volatile byte   PWM2S1CFG                 at { 0x16C }
var volatile bit*3  PWM2S1CFG_MODE            at PWM2S1CFG : 0
var volatile bit    PWM2S1CFG_PPEN            at PWM2S1CFG : 3
var volatile bit    PWM2S1CFG_POL1            at PWM2S1CFG : 6
var volatile bit    PWM2S1CFG_POL2            at PWM2S1CFG : 7
var volatile bit    PWM2S1CFG_MODE0           at PWM2S1CFG : 0
var volatile bit    PWM2S1CFG_MODE1           at PWM2S1CFG : 1
var volatile bit    PWM2S1CFG_MODE2           at PWM2S1CFG : 2
-- ------------------------------------------------
var volatile word   PWM2S1P1                  at { 0x16D }
-- ------------------------------------------------
var volatile byte   PWM2S1P1L                 at { 0x16D }
-- ------------------------------------------------
var volatile byte   PWM2S1P1H                 at { 0x16E }
-- ------------------------------------------------
var volatile word   PWM2S1P2                  at { 0x16F }
-- ------------------------------------------------
var volatile byte   PWM2S1P2L                 at { 0x16F }
-- ------------------------------------------------
var volatile byte   PWM2S1P2H                 at { 0x170 }
-- ------------------------------------------------
var volatile byte   CWG1CLK                   at { 0x199 }
var volatile bit    CWG1CLK_CS                at CWG1CLK : 0
var volatile bit    CWG1CLK_CWG1CS            at CWG1CLK : 0
-- ------------------------------------------------
var volatile byte   CWG1ISM                   at { 0x19A }
var volatile bit*5  CWG1ISM_ISM               at CWG1ISM : 0
var volatile bit*5  CWG1ISM_CWG1ISM           at CWG1ISM : 0
var volatile bit    CWG1ISM_ISM0              at CWG1ISM : 0
var volatile bit    CWG1ISM_ISM1              at CWG1ISM : 1
var volatile bit    CWG1ISM_ISM2              at CWG1ISM : 2
var volatile bit    CWG1ISM_ISM3              at CWG1ISM : 3
var volatile bit    CWG1ISM_ISM4              at CWG1ISM : 4
-- ------------------------------------------------
var volatile byte   CWG1DBR                   at { 0x19B }
var volatile bit*6  CWG1DBR_DBR               at CWG1DBR : 0
var volatile bit    CWG1DBR_DBR0              at CWG1DBR : 0
var volatile bit    CWG1DBR_DBR1              at CWG1DBR : 1
var volatile bit    CWG1DBR_DBR2              at CWG1DBR : 2
var volatile bit    CWG1DBR_DBR3              at CWG1DBR : 3
var volatile bit    CWG1DBR_DBR4              at CWG1DBR : 4
var volatile bit    CWG1DBR_DBR5              at CWG1DBR : 5
var volatile bit*6  CWG1DBR_CWG1DBR           at CWG1DBR : 0
var volatile bit    CWG1DBR_CWG1DBR0          at CWG1DBR : 0
var volatile bit    CWG1DBR_CWG1DBR1          at CWG1DBR : 1
var volatile bit    CWG1DBR_CWG1DBR2          at CWG1DBR : 2
var volatile bit    CWG1DBR_CWG1DBR3          at CWG1DBR : 3
var volatile bit    CWG1DBR_CWG1DBR4          at CWG1DBR : 4
var volatile bit    CWG1DBR_CWG1DBR5          at CWG1DBR : 5
-- ------------------------------------------------
var volatile byte   CWG1DBF                   at { 0x19C }
var volatile bit*6  CWG1DBF_DBF               at CWG1DBF : 0
var volatile bit    CWG1DBF_DBF0              at CWG1DBF : 0
var volatile bit    CWG1DBF_DBF1              at CWG1DBF : 1
var volatile bit    CWG1DBF_DBF2              at CWG1DBF : 2
var volatile bit    CWG1DBF_DBF3              at CWG1DBF : 3
var volatile bit    CWG1DBF_DBF4              at CWG1DBF : 4
var volatile bit    CWG1DBF_DBF5              at CWG1DBF : 5
var volatile bit*6  CWG1DBF_CWG1DBF           at CWG1DBF : 0
var volatile bit    CWG1DBF_CWG1DBF0          at CWG1DBF : 0
var volatile bit    CWG1DBF_CWG1DBF1          at CWG1DBF : 1
var volatile bit    CWG1DBF_CWG1DBF2          at CWG1DBF : 2
var volatile bit    CWG1DBF_CWG1DBF3          at CWG1DBF : 3
var volatile bit    CWG1DBF_CWG1DBF4          at CWG1DBF : 4
var volatile bit    CWG1DBF_CWG1DBF5          at CWG1DBF : 5
-- ------------------------------------------------
var volatile byte   CWG1CON0                  at { 0x19D }
var volatile bit*3  CWG1CON0_MODE             at CWG1CON0 : 0
var volatile bit    CWG1CON0_LD               at CWG1CON0 : 6
var volatile bit    CWG1CON0_EN               at CWG1CON0 : 7
var volatile bit    CWG1CON0_MODE0            at CWG1CON0 : 0
var volatile bit    CWG1CON0_MODE1            at CWG1CON0 : 1
var volatile bit    CWG1CON0_MODE2            at CWG1CON0 : 2
var volatile bit    CWG1CON0_G1EN             at CWG1CON0 : 7
var volatile bit*3  CWG1CON0_CWG1MODE         at CWG1CON0 : 0
var volatile bit    CWG1CON0_CWG1LD           at CWG1CON0 : 6
var volatile bit    CWG1CON0_CWG1EN           at CWG1CON0 : 7
var volatile bit    CWG1CON0_CWG1MODE0        at CWG1CON0 : 0
var volatile bit    CWG1CON0_CWG1MODE1        at CWG1CON0 : 1
var volatile bit    CWG1CON0_CWG1MODE2        at CWG1CON0 : 2
-- ------------------------------------------------
var volatile byte   CWG1CON1                  at { 0x19E }
var volatile bit    CWG1CON1_POLA             at CWG1CON1 : 0
var volatile bit    CWG1CON1_POLB             at CWG1CON1 : 1
var volatile bit    CWG1CON1_POLC             at CWG1CON1 : 2
var volatile bit    CWG1CON1_POLD             at CWG1CON1 : 3
var volatile bit    CWG1CON1_IN               at CWG1CON1 : 5
var volatile bit    CWG1CON1_CWG1POLA         at CWG1CON1 : 0
var volatile bit    CWG1CON1_CWG1POLB         at CWG1CON1 : 1
var volatile bit    CWG1CON1_CWG1POLC         at CWG1CON1 : 2
var volatile bit    CWG1CON1_CWG1POLD         at CWG1CON1 : 3
var volatile bit    CWG1CON1_CWG1IN           at CWG1CON1 : 5
-- ------------------------------------------------
var volatile byte   CWG1AS0                   at { 0x19F }
var volatile bit*2  CWG1AS0_LSAC              at CWG1AS0 : 2
var volatile bit*2  CWG1AS0_LSDBD             at CWG1AS0 : 4
var volatile bit    CWG1AS0_REN               at CWG1AS0 : 6
var volatile bit    CWG1AS0_SHUTDOWN          at CWG1AS0 : 7
var volatile bit    CWG1AS0_LSAC0             at CWG1AS0 : 2
var volatile bit    CWG1AS0_LSCA1             at CWG1AS0 : 3
var volatile bit    CWG1AS0_LSDB0             at CWG1AS0 : 4
var volatile bit    CWG1AS0_LSDB1             at CWG1AS0 : 5
var volatile bit    CWG1AS0_CWG1LSAC0         at CWG1AS0 : 2
var volatile bit    CWG1AS0_CWG1LSAC1         at CWG1AS0 : 3
var volatile bit    CWG1AS0_CWG1LSDB0         at CWG1AS0 : 4
var volatile bit    CWG1AS0_CWG1LSDB1         at CWG1AS0 : 5
var volatile bit*2  CWG1AS0_CWG1LSAC          at CWG1AS0 : 2
var volatile bit*2  CWG1AS0_CWG1LSDB          at CWG1AS0 : 4
var volatile bit*2  CWG1AS0_LSBD              at CWG1AS0 : 4
var volatile bit    CWG1AS0_LSAC1             at CWG1AS0 : 3
var volatile bit    CWG1AS0_LSBD0             at CWG1AS0 : 4
var volatile bit    CWG1AS0_LSBD1             at CWG1AS0 : 5
var volatile bit    CWG1AS0_CWG1LSBD0         at CWG1AS0 : 4
var volatile bit    CWG1AS0_CWG1LSBD1         at CWG1AS0 : 5
var volatile bit*2  CWG1AS0_CWG1LSBD          at CWG1AS0 : 4
-- ------------------------------------------------
var volatile byte   CWG1AS1                   at { 0x1A0 }
var volatile bit    CWG1AS1_AS0E              at CWG1AS1 : 0
var volatile bit    CWG1AS1_AS1E              at CWG1AS1 : 1
var volatile bit    CWG1AS1_AS2E              at CWG1AS1 : 2
var volatile bit    CWG1AS1_AS6E              at CWG1AS1 : 6
var volatile bit    CWG1AS1_AS7E              at CWG1AS1 : 7
-- ------------------------------------------------
var volatile byte   CWG1STR                   at { 0x1A1 }
var volatile bit    CWG1STR_STRA              at CWG1STR : 0
var volatile bit    CWG1STR_STRB              at CWG1STR : 1
var volatile bit    CWG1STR_STRC              at CWG1STR : 2
var volatile bit    CWG1STR_STRD              at CWG1STR : 3
var volatile bit    CWG1STR_OVRA              at CWG1STR : 4
var volatile bit    CWG1STR_OVRB              at CWG1STR : 5
var volatile bit    CWG1STR_OVRC              at CWG1STR : 6
var volatile bit    CWG1STR_OVRD              at CWG1STR : 7
var volatile bit    CWG1STR_CWG1STRA          at CWG1STR : 0
var volatile bit    CWG1STR_CWG1STRB          at CWG1STR : 1
var volatile bit    CWG1STR_CWG1STRC          at CWG1STR : 2
var volatile bit    CWG1STR_CWG1STRD          at CWG1STR : 3
var volatile bit    CWG1STR_CWG1OVRA          at CWG1STR : 4
var volatile bit    CWG1STR_CWG1OVRB          at CWG1STR : 5
var volatile bit    CWG1STR_CWG1OVRC          at CWG1STR : 6
var volatile bit    CWG1STR_CWG1OVRD          at CWG1STR : 7
-- ------------------------------------------------
var volatile byte   CLCDATA                   at { 0x1A3 }
var volatile bit    CLCDATA_CLC1OUT           at CLCDATA : 0
var volatile bit    CLCDATA_CLC2OUT           at CLCDATA : 1
var volatile bit    CLCDATA_CLC3OUT           at CLCDATA : 2
var volatile bit    CLCDATA_CLC4OUT           at CLCDATA : 3
-- ------------------------------------------------
var volatile byte   CLCSELECT                 at { 0x1A4 }
var volatile bit*2  CLCSELECT_SLCT            at CLCSELECT : 0
var volatile bit    CLCSELECT_SLCT0           at CLCSELECT : 0
var volatile bit    CLCSELECT_SLCT1           at CLCSELECT : 1
-- ------------------------------------------------
var volatile byte   CLCNCON                   at { 0x1A5 }
var volatile bit*3  CLCNCON_MODE              at CLCNCON : 0
var volatile bit    CLCNCON_INTN              at CLCNCON : 3
var volatile bit    CLCNCON_INTP              at CLCNCON : 4
var volatile bit    CLCNCON_OUT               at CLCNCON : 5
var volatile bit    CLCNCON_EN                at CLCNCON : 7
var volatile bit    CLCNCON_MODE0             at CLCNCON : 0
var volatile bit    CLCNCON_MODE1             at CLCNCON : 1
var volatile bit    CLCNCON_MODE2             at CLCNCON : 2
-- ------------------------------------------------
var volatile byte   CLCNPOL                   at { 0x1A6 }
var volatile bit    CLCNPOL_G1POL             at CLCNPOL : 0
var volatile bit    CLCNPOL_G2POL             at CLCNPOL : 1
var volatile bit    CLCNPOL_G3POL             at CLCNPOL : 2
var volatile bit    CLCNPOL_G4POL             at CLCNPOL : 3
var volatile bit    CLCNPOL_POL               at CLCNPOL : 7
-- ------------------------------------------------
var volatile byte   CLCNSEL0                  at { 0x1A7 }
var volatile bit*6  CLCNSEL0_D1S              at CLCNSEL0 : 0
var volatile bit    CLCNSEL0_D1S0             at CLCNSEL0 : 0
var volatile bit    CLCNSEL0_D1S1             at CLCNSEL0 : 1
var volatile bit    CLCNSEL0_D1S2             at CLCNSEL0 : 2
var volatile bit    CLCNSEL0_D1S3             at CLCNSEL0 : 3
var volatile bit    CLCNSEL0_D1S4             at CLCNSEL0 : 4
var volatile bit    CLCNSEL0_D1S5             at CLCNSEL0 : 5
-- ------------------------------------------------
var volatile byte   CLCNSEL1                  at { 0x1A8 }
var volatile bit*6  CLCNSEL1_D2S              at CLCNSEL1 : 0
var volatile bit    CLCNSEL1_D2S0             at CLCNSEL1 : 0
var volatile bit    CLCNSEL1_D2S1             at CLCNSEL1 : 1
var volatile bit    CLCNSEL1_D2S2             at CLCNSEL1 : 2
var volatile bit    CLCNSEL1_D2S3             at CLCNSEL1 : 3
var volatile bit    CLCNSEL1_D2S4             at CLCNSEL1 : 4
var volatile bit    CLCNSEL1_D2S5             at CLCNSEL1 : 5
-- ------------------------------------------------
var volatile byte   CLCNSEL2                  at { 0x1A9 }
var volatile bit*6  CLCNSEL2_D3S              at CLCNSEL2 : 0
var volatile bit    CLCNSEL2_D3S0             at CLCNSEL2 : 0
var volatile bit    CLCNSEL2_D3S1             at CLCNSEL2 : 1
var volatile bit    CLCNSEL2_D3S2             at CLCNSEL2 : 2
var volatile bit    CLCNSEL2_D3S3             at CLCNSEL2 : 3
var volatile bit    CLCNSEL2_D3S4             at CLCNSEL2 : 4
var volatile bit    CLCNSEL2_D3S5             at CLCNSEL2 : 5
-- ------------------------------------------------
var volatile byte   CLCNSEL3                  at { 0x1AA }
var volatile bit*6  CLCNSEL3_D4S              at CLCNSEL3 : 0
var volatile bit    CLCNSEL3_D4S0             at CLCNSEL3 : 0
var volatile bit    CLCNSEL3_D4S1             at CLCNSEL3 : 1
var volatile bit    CLCNSEL3_D4S2             at CLCNSEL3 : 2
var volatile bit    CLCNSEL3_D4S3             at CLCNSEL3 : 3
var volatile bit    CLCNSEL3_D4S4             at CLCNSEL3 : 4
var volatile bit    CLCNSEL3_D4S5             at CLCNSEL3 : 5
-- ------------------------------------------------
var volatile byte   CLCNGLS0                  at { 0x1AB }
var volatile bit    CLCNGLS0_G1D1N            at CLCNGLS0 : 0
var volatile bit    CLCNGLS0_G1D1T            at CLCNGLS0 : 1
var volatile bit    CLCNGLS0_G1D2N            at CLCNGLS0 : 2
var volatile bit    CLCNGLS0_G1D2T            at CLCNGLS0 : 3
var volatile bit    CLCNGLS0_G1D3N            at CLCNGLS0 : 4
var volatile bit    CLCNGLS0_G1D3T            at CLCNGLS0 : 5
var volatile bit    CLCNGLS0_G1D4N            at CLCNGLS0 : 6
var volatile bit    CLCNGLS0_G1D4T            at CLCNGLS0 : 7
-- ------------------------------------------------
var volatile byte   CLCNGLS1                  at { 0x1AC }
var volatile bit    CLCNGLS1_G2D1N            at CLCNGLS1 : 0
var volatile bit    CLCNGLS1_G2D1T            at CLCNGLS1 : 1
var volatile bit    CLCNGLS1_G2D2N            at CLCNGLS1 : 2
var volatile bit    CLCNGLS1_G2D2T            at CLCNGLS1 : 3
var volatile bit    CLCNGLS1_G2D3N            at CLCNGLS1 : 4
var volatile bit    CLCNGLS1_G2D3T            at CLCNGLS1 : 5
var volatile bit    CLCNGLS1_G2D4N            at CLCNGLS1 : 6
var volatile bit    CLCNGLS1_G2D4T            at CLCNGLS1 : 7
-- ------------------------------------------------
var volatile byte   CLCNGLS2                  at { 0x1AD }
var volatile bit    CLCNGLS2_G3D1N            at CLCNGLS2 : 0
var volatile bit    CLCNGLS2_G3D1T            at CLCNGLS2 : 1
var volatile bit    CLCNGLS2_G3D2N            at CLCNGLS2 : 2
var volatile bit    CLCNGLS2_G3D2T            at CLCNGLS2 : 3
var volatile bit    CLCNGLS2_G3D3N            at CLCNGLS2 : 4
var volatile bit    CLCNGLS2_G3D3T            at CLCNGLS2 : 5
var volatile bit    CLCNGLS2_G3D4N            at CLCNGLS2 : 6
var volatile bit    CLCNGLS2_G3D4T            at CLCNGLS2 : 7
-- ------------------------------------------------
var volatile byte   CLCNGLS3                  at { 0x1AE }
var volatile bit    CLCNGLS3_G4D1N            at CLCNGLS3 : 0
var volatile bit    CLCNGLS3_G4D1T            at CLCNGLS3 : 1
var volatile bit    CLCNGLS3_G4D2N            at CLCNGLS3 : 2
var volatile bit    CLCNGLS3_G4D2T            at CLCNGLS3 : 3
var volatile bit    CLCNGLS3_G4D3N            at CLCNGLS3 : 4
var volatile bit    CLCNGLS3_G4D3T            at CLCNGLS3 : 5
var volatile bit    CLCNGLS3_G4D4N            at CLCNGLS3 : 6
var volatile bit    CLCNGLS3_G4D4T            at CLCNGLS3 : 7
-- ------------------------------------------------
var volatile byte   U1RXB                     at { 0x1AF }
-- ------------------------------------------------
var volatile byte   U1RXCHK                   at { 0x1B0 }
-- ------------------------------------------------
var volatile byte   U1TXB                     at { 0x1B1 }
-- ------------------------------------------------
var volatile byte   U1TXCHK                   at { 0x1B2 }
-- ------------------------------------------------
var volatile word   U1P1                      at { 0x1B3 }
-- ------------------------------------------------
var volatile byte   U1P1L                     at { 0x1B3 }
-- ------------------------------------------------
var volatile byte   U1P1H                     at { 0x1B4 }
var volatile bit    U1P1H_P1H                 at U1P1H : 0
-- ------------------------------------------------
var volatile word   U1P2                      at { 0x1B5 }
-- ------------------------------------------------
var volatile byte   U1P2L                     at { 0x1B5 }
-- ------------------------------------------------
var volatile byte   U1P2H                     at { 0x1B6 }
var volatile bit    U1P2H_P2H                 at U1P2H : 0
-- ------------------------------------------------
var volatile word   U1P3                      at { 0x1B7 }
-- ------------------------------------------------
var volatile byte   U1P3L                     at { 0x1B7 }
-- ------------------------------------------------
var volatile byte   U1P3H                     at { 0x1B8 }
var volatile bit    U1P3H_P3H                 at U1P3H : 0
-- ------------------------------------------------
var volatile byte   U1CON0                    at { 0x1B9 }
var volatile bit    U1CON0_MODE0              at U1CON0 : 0
var volatile bit    U1CON0_MODE1              at U1CON0 : 1
var volatile bit    U1CON0_MODE2              at U1CON0 : 2
var volatile bit    U1CON0_MODE3              at U1CON0 : 3
var volatile bit*4  U1CON0_U1MODE             at U1CON0 : 0
var volatile bit    U1CON0_U1RXEN             at U1CON0 : 4
var volatile bit    U1CON0_U1TXEN             at U1CON0 : 5
var volatile bit    U1CON0_U1ABDEN            at U1CON0 : 6
var volatile bit    U1CON0_U1BRGS             at U1CON0 : 7
var volatile bit    U1CON0_U1MODE0            at U1CON0 : 0
var volatile bit    U1CON0_U1MODE1            at U1CON0 : 1
var volatile bit    U1CON0_U1MODE2            at U1CON0 : 2
var volatile bit    U1CON0_U1MODE3            at U1CON0 : 3
var volatile bit*4  U1CON0_MODE               at U1CON0 : 0
var volatile bit    U1CON0_RXEN               at U1CON0 : 4
var volatile bit    U1CON0_TXEN               at U1CON0 : 5
var volatile bit    U1CON0_ABDEN              at U1CON0 : 6
var volatile bit    U1CON0_BRGS               at U1CON0 : 7
-- ------------------------------------------------
var volatile byte   U1CON1                    at { 0x1BA }
var volatile bit    U1CON1_SENDB              at U1CON1 : 0
var volatile bit    U1CON1_BRKOVR             at U1CON1 : 1
var volatile bit    U1CON1_RXBIMD             at U1CON1 : 3
var volatile bit    U1CON1_WUE                at U1CON1 : 4
var volatile bit    U1CON1_ON                 at U1CON1 : 7
var volatile bit    U1CON1_U1SENDB            at U1CON1 : 0
var volatile bit    U1CON1_U1BRKOVR           at U1CON1 : 1
var volatile bit    U1CON1_U1RXBIMD           at U1CON1 : 3
var volatile bit    U1CON1_U1WUE              at U1CON1 : 4
var volatile bit    U1CON1_U1ON               at U1CON1 : 7
-- ------------------------------------------------
var volatile byte   U1CON2                    at { 0x1BB }
var volatile bit*2  U1CON2_FLO                at U1CON2 : 0
var volatile bit    U1CON2_TXPOL              at U1CON2 : 2
var volatile bit    U1CON2_C0EN               at U1CON2 : 3
var volatile bit*2  U1CON2_STP                at U1CON2 : 4
var volatile bit    U1CON2_RXPOL              at U1CON2 : 6
var volatile bit    U1CON2_RUNOVF             at U1CON2 : 7
var volatile bit    U1CON2_FLO0               at U1CON2 : 0
var volatile bit    U1CON2_FLO1               at U1CON2 : 1
var volatile bit    U1CON2_STP0               at U1CON2 : 4
var volatile bit    U1CON2_STP1               at U1CON2 : 5
var volatile bit*2  U1CON2_U1FLO              at U1CON2 : 0
var volatile bit    U1CON2_U1TXPOL            at U1CON2 : 2
var volatile bit    U1CON2_U1C0EN             at U1CON2 : 3
var volatile bit*2  U1CON2_U1STP              at U1CON2 : 4
var volatile bit    U1CON2_U1RXPOL            at U1CON2 : 6
var volatile bit    U1CON2_U1RUNOVF           at U1CON2 : 7
var volatile bit    U1CON2_U1FLO0             at U1CON2 : 0
var volatile bit    U1CON2_U1FLO1             at U1CON2 : 1
var volatile bit    U1CON2_U1STP0             at U1CON2 : 4
var volatile bit    U1CON2_U1STP1             at U1CON2 : 5
-- ------------------------------------------------
var volatile word   U1BRG                     at { 0x1BC }
-- ------------------------------------------------
var volatile byte   U1BRGL                    at { 0x1BC }
-- ------------------------------------------------
var volatile byte   U1BRGH                    at { 0x1BD }
-- ------------------------------------------------
var volatile byte   U1FIFO                    at { 0x1BE }
var volatile bit    U1FIFO_RXBF               at U1FIFO : 0
var volatile bit    U1FIFO_RXBE               at U1FIFO : 1
var volatile bit    U1FIFO_XON                at U1FIFO : 2
var volatile bit    U1FIFO_RXIDL              at U1FIFO : 3
var volatile bit    U1FIFO_TXBF               at U1FIFO : 4
var volatile bit    U1FIFO_TXBE               at U1FIFO : 5
var volatile bit    U1FIFO_STPMD              at U1FIFO : 6
var volatile bit    U1FIFO_TXWRE              at U1FIFO : 7
var volatile bit    U1FIFO_U1RXBF             at U1FIFO : 0
var volatile bit    U1FIFO_U1RXBE             at U1FIFO : 1
var volatile bit    U1FIFO_U1XON              at U1FIFO : 2
var volatile bit    U1FIFO_U1RXIDL            at U1FIFO : 3
var volatile bit    U1FIFO_U1TXBF             at U1FIFO : 4
var volatile bit    U1FIFO_U1TXBE             at U1FIFO : 5
var volatile bit    U1FIFO_U1STPMD            at U1FIFO : 6
var volatile bit    U1FIFO_U1TXWRE            at U1FIFO : 7
var volatile bit    U1FIFO_U1RCIDL            at U1FIFO : 3
var volatile bit    U1FIFO_RCIDL              at U1FIFO : 3
-- ------------------------------------------------
var volatile byte   U1UIR                     at { 0x1C0 }
var volatile bit    U1UIR_ABDIE               at U1UIR : 2
var volatile bit    U1UIR_ABDIF               at U1UIR : 6
var volatile bit    U1UIR_WUIF                at U1UIR : 7
var volatile bit    U1UIR_U1ABDIE             at U1UIR : 2
var volatile bit    U1UIR_U1ABDIF             at U1UIR : 6
var volatile bit    U1UIR_U1WUIF              at U1UIR : 7
-- ------------------------------------------------
var volatile byte   U1ERRIR                   at { 0x1C1 }
var volatile bit    U1ERRIR_TXCIF             at U1ERRIR : 0
var volatile bit    U1ERRIR_RXFOIF            at U1ERRIR : 1
var volatile bit    U1ERRIR_RXBKIF            at U1ERRIR : 2
var volatile bit    U1ERRIR_FERIF             at U1ERRIR : 3
var volatile bit    U1ERRIR_CERIF             at U1ERRIR : 4
var volatile bit    U1ERRIR_ABDOVF            at U1ERRIR : 5
var volatile bit    U1ERRIR_PERIF             at U1ERRIR : 6
var volatile bit    U1ERRIR_TXMTIF            at U1ERRIR : 7
var volatile bit    U1ERRIR_U1TXCIF           at U1ERRIR : 0
var volatile bit    U1ERRIR_U1RXFOIF          at U1ERRIR : 1
var volatile bit    U1ERRIR_U1RXBKIF          at U1ERRIR : 2
var volatile bit    U1ERRIR_U1FERIF           at U1ERRIR : 3
var volatile bit    U1ERRIR_U1CERIF           at U1ERRIR : 4
var volatile bit    U1ERRIR_U1ABDOVF          at U1ERRIR : 5
var volatile bit    U1ERRIR_U1PERIF           at U1ERRIR : 6
var volatile bit    U1ERRIR_U1TXMTIF          at U1ERRIR : 7
-- ------------------------------------------------
var volatile byte   U1ERRIE                   at { 0x1C2 }
var volatile bit    U1ERRIE_TXCIE             at U1ERRIE : 0
var volatile bit    U1ERRIE_RXFOIE            at U1ERRIE : 1
var volatile bit    U1ERRIE_RXBKIE            at U1ERRIE : 2
var volatile bit    U1ERRIE_FERIE             at U1ERRIE : 3
var volatile bit    U1ERRIE_CERIE             at U1ERRIE : 4
var volatile bit    U1ERRIE_ABDOVE            at U1ERRIE : 5
var volatile bit    U1ERRIE_PERIE             at U1ERRIE : 6
var volatile bit    U1ERRIE_TXMTIE            at U1ERRIE : 7
var volatile bit    U1ERRIE_U1TXCIE           at U1ERRIE : 0
var volatile bit    U1ERRIE_U1RXFOIE          at U1ERRIE : 1
var volatile bit    U1ERRIE_U1RXBKIE          at U1ERRIE : 2
var volatile bit    U1ERRIE_U1FERIE           at U1ERRIE : 3
var volatile bit    U1ERRIE_U1CERIE           at U1ERRIE : 4
var volatile bit    U1ERRIE_U1ABDOVE          at U1ERRIE : 5
var volatile bit    U1ERRIE_U1PERIE           at U1ERRIE : 6
var volatile bit    U1ERRIE_U1TXMTIE          at U1ERRIE : 7
-- ------------------------------------------------
var volatile byte   U2RXB                     at { 0x1C3 }
-- ------------------------------------------------
var volatile byte   U2TXB                     at { 0x1C5 }
-- ------------------------------------------------
var volatile word   U2P1                      at { 0x1C7 }
-- ------------------------------------------------
var volatile byte   U2P1L                     at { 0x1C7 }
-- ------------------------------------------------
var volatile word   U2P2                      at { 0x1C9 }
-- ------------------------------------------------
var volatile byte   U2P2L                     at { 0x1C9 }
-- ------------------------------------------------
var volatile word   U2P3                      at { 0x1CB }
-- ------------------------------------------------
var volatile byte   U2P3L                     at { 0x1CB }
-- ------------------------------------------------
var volatile byte   U2CON0                    at { 0x1CD }
var volatile bit    U2CON0_MODE0              at U2CON0 : 0
var volatile bit    U2CON0_MODE1              at U2CON0 : 1
var volatile bit    U2CON0_MODE2              at U2CON0 : 2
var volatile bit*4  U2CON0_U2MODE             at U2CON0 : 0
var volatile bit    U2CON0_U2RXEN             at U2CON0 : 4
var volatile bit    U2CON0_U2TXEN             at U2CON0 : 5
var volatile bit    U2CON0_U2ABDEN            at U2CON0 : 6
var volatile bit    U2CON0_U2BRGS             at U2CON0 : 7
var volatile bit    U2CON0_U2MODE0            at U2CON0 : 0
var volatile bit    U2CON0_U2MODE1            at U2CON0 : 1
var volatile bit    U2CON0_U2MODE2            at U2CON0 : 2
var volatile bit*4  U2CON0_MODE               at U2CON0 : 0
var volatile bit    U2CON0_RXEN               at U2CON0 : 4
var volatile bit    U2CON0_TXEN               at U2CON0 : 5
var volatile bit    U2CON0_ABDEN              at U2CON0 : 6
var volatile bit    U2CON0_BRGS               at U2CON0 : 7
-- ------------------------------------------------
var volatile byte   U2CON1                    at { 0x1CE }
var volatile bit    U2CON1_SENDB              at U2CON1 : 0
var volatile bit    U2CON1_BRKOVR             at U2CON1 : 1
var volatile bit    U2CON1_RXBIMD             at U2CON1 : 3
var volatile bit    U2CON1_WUE                at U2CON1 : 4
var volatile bit    U2CON1_ON                 at U2CON1 : 7
var volatile bit    U2CON1_U2SENDB            at U2CON1 : 0
var volatile bit    U2CON1_U2BRKOVR           at U2CON1 : 1
var volatile bit    U2CON1_U2RXBIMD           at U2CON1 : 3
var volatile bit    U2CON1_U2WUE              at U2CON1 : 4
var volatile bit    U2CON1_U2ON               at U2CON1 : 7
-- ------------------------------------------------
var volatile byte   U2CON2                    at { 0x1CF }
var volatile bit*2  U2CON2_FLO                at U2CON2 : 0
var volatile bit    U2CON2_TXPOL              at U2CON2 : 2
var volatile bit*2  U2CON2_STP                at U2CON2 : 4
var volatile bit    U2CON2_RXPOL              at U2CON2 : 6
var volatile bit    U2CON2_RUNOVF             at U2CON2 : 7
var volatile bit    U2CON2_FLO0               at U2CON2 : 0
var volatile bit    U2CON2_FLO1               at U2CON2 : 1
var volatile bit    U2CON2_STP0               at U2CON2 : 4
var volatile bit    U2CON2_STP1               at U2CON2 : 5
var volatile bit*2  U2CON2_U2FLO              at U2CON2 : 0
var volatile bit    U2CON2_U2TXPOL            at U2CON2 : 2
var volatile bit*2  U2CON2_U2STP              at U2CON2 : 4
var volatile bit    U2CON2_U2RXPOL            at U2CON2 : 6
var volatile bit    U2CON2_U2RUNOVF           at U2CON2 : 7
var volatile bit    U2CON2_U2FLO0             at U2CON2 : 0
var volatile bit    U2CON2_U2FLO1             at U2CON2 : 1
var volatile bit    U2CON2_U2STP0             at U2CON2 : 4
var volatile bit    U2CON2_U2STP1             at U2CON2 : 5
-- ------------------------------------------------
var volatile word   U2BRG                     at { 0x1D0 }
-- ------------------------------------------------
var volatile byte   U2BRGL                    at { 0x1D0 }
-- ------------------------------------------------
var volatile byte   U2BRGH                    at { 0x1D1 }
-- ------------------------------------------------
var volatile byte   U2FIFO                    at { 0x1D2 }
var volatile bit    U2FIFO_RXBF               at U2FIFO : 0
var volatile bit    U2FIFO_RXBE               at U2FIFO : 1
var volatile bit    U2FIFO_XON                at U2FIFO : 2
var volatile bit    U2FIFO_RXIDL              at U2FIFO : 3
var volatile bit    U2FIFO_TXBF               at U2FIFO : 4
var volatile bit    U2FIFO_TXBE               at U2FIFO : 5
var volatile bit    U2FIFO_STPMD              at U2FIFO : 6
var volatile bit    U2FIFO_TXWRE              at U2FIFO : 7
var volatile bit    U2FIFO_U2RXBF             at U2FIFO : 0
var volatile bit    U2FIFO_U2RXBE             at U2FIFO : 1
var volatile bit    U2FIFO_U2XON              at U2FIFO : 2
var volatile bit    U2FIFO_U2RXIDL            at U2FIFO : 3
var volatile bit    U2FIFO_U2TXBF             at U2FIFO : 4
var volatile bit    U2FIFO_U2TXBE             at U2FIFO : 5
var volatile bit    U2FIFO_U2STPMD            at U2FIFO : 6
var volatile bit    U2FIFO_U2TXWRE            at U2FIFO : 7
var volatile bit    U2FIFO_U2RCIDL            at U2FIFO : 3
var volatile bit    U2FIFO_RCIDL              at U2FIFO : 3
-- ------------------------------------------------
var volatile byte   U2UIR                     at { 0x1D4 }
var volatile bit    U2UIR_ABDIE               at U2UIR : 2
var volatile bit    U2UIR_ABDIF               at U2UIR : 6
var volatile bit    U2UIR_WUIF                at U2UIR : 7
var volatile bit    U2UIR_U2ABDIE             at U2UIR : 2
var volatile bit    U2UIR_U2ABDIF             at U2UIR : 6
var volatile bit    U2UIR_U2WUIF              at U2UIR : 7
-- ------------------------------------------------
var volatile byte   U2ERRIR                   at { 0x1D5 }
var volatile bit    U2ERRIR_RXFOIF            at U2ERRIR : 1
var volatile bit    U2ERRIR_RXBKIF            at U2ERRIR : 2
var volatile bit    U2ERRIR_FERIF             at U2ERRIR : 3
var volatile bit    U2ERRIR_ABDOVF            at U2ERRIR : 5
var volatile bit    U2ERRIR_PERIF             at U2ERRIR : 6
var volatile bit    U2ERRIR_TXMTIF            at U2ERRIR : 7
var volatile bit    U2ERRIR_U2RXFOIF          at U2ERRIR : 1
var volatile bit    U2ERRIR_U2RXBKIF          at U2ERRIR : 2
var volatile bit    U2ERRIR_U2FERIF           at U2ERRIR : 3
var volatile bit    U2ERRIR_U2ABDOVF          at U2ERRIR : 5
var volatile bit    U2ERRIR_U2PERIF           at U2ERRIR : 6
var volatile bit    U2ERRIR_U2TXMTIF          at U2ERRIR : 7
-- ------------------------------------------------
var volatile byte   U2ERRIE                   at { 0x1D6 }
var volatile bit    U2ERRIE_RXFOIE            at U2ERRIE : 1
var volatile bit    U2ERRIE_RXBKIE            at U2ERRIE : 2
var volatile bit    U2ERRIE_FERIE             at U2ERRIE : 3
var volatile bit    U2ERRIE_ABDOVE            at U2ERRIE : 5
var volatile bit    U2ERRIE_PERIE             at U2ERRIE : 6
var volatile bit    U2ERRIE_TXMTIE            at U2ERRIE : 7
var volatile bit    U2ERRIE_U2RXFOIE          at U2ERRIE : 1
var volatile bit    U2ERRIE_U2RXBKIE          at U2ERRIE : 2
var volatile bit    U2ERRIE_U2FERIE           at U2ERRIE : 3
var volatile bit    U2ERRIE_U2ABDOVE          at U2ERRIE : 5
var volatile bit    U2ERRIE_U2PERIE           at U2ERRIE : 6
var volatile bit    U2ERRIE_U2TXMTIE          at U2ERRIE : 7
-- ------------------------------------------------
var volatile byte   SPI1RXB                   at { 0x1D7 }
var volatile bit    SPI1RXB_RXB0              at SPI1RXB : 0
var volatile bit    SPI1RXB_RXB1              at SPI1RXB : 1
var volatile bit    SPI1RXB_RXB2              at SPI1RXB : 2
var volatile bit    SPI1RXB_RXB3              at SPI1RXB : 3
var volatile bit    SPI1RXB_RXB4              at SPI1RXB : 4
var volatile bit    SPI1RXB_RXB5              at SPI1RXB : 5
var volatile bit    SPI1RXB_RXB6              at SPI1RXB : 6
var volatile bit    SPI1RXB_RXB7              at SPI1RXB : 7
-- ------------------------------------------------
var volatile byte   SPI1TXB                   at { 0x1D8 }
var volatile bit    SPI1TXB_TXB0              at SPI1TXB : 0
var volatile bit    SPI1TXB_TXB1              at SPI1TXB : 1
var volatile bit    SPI1TXB_TXB2              at SPI1TXB : 2
var volatile bit    SPI1TXB_TXB3              at SPI1TXB : 3
var volatile bit    SPI1TXB_TXB4              at SPI1TXB : 4
var volatile bit    SPI1TXB_TXB5              at SPI1TXB : 5
var volatile bit    SPI1TXB_TXB6              at SPI1TXB : 6
var volatile bit    SPI1TXB_TXB7              at SPI1TXB : 7
-- ------------------------------------------------
var volatile word   SPI1TCNT                  at { 0x1D9 }
-- ------------------------------------------------
var volatile byte   SPI1TCNTL                 at { 0x1D9 }
-- ------------------------------------------------
var volatile byte   SPI1TCNTH                 at { 0x1DA }
var volatile bit*3  SPI1TCNTH_TCNTH           at SPI1TCNTH : 0
-- ------------------------------------------------
var volatile byte   SPI1CON0                  at { 0x1DB }
var volatile bit    SPI1CON0_BMODE            at SPI1CON0 : 0
var volatile bit    SPI1CON0_MST              at SPI1CON0 : 1
var volatile bit    SPI1CON0_LSBF             at SPI1CON0 : 2
var volatile bit    SPI1CON0_EN               at SPI1CON0 : 7
var volatile bit    SPI1CON0_SPI1BMODE        at SPI1CON0 : 0
var volatile bit    SPI1CON0_SPI1MST          at SPI1CON0 : 1
var volatile bit    SPI1CON0_SPI1LSBF         at SPI1CON0 : 2
var volatile bit    SPI1CON0_SPI1SPIEN        at SPI1CON0 : 7
-- ------------------------------------------------
var volatile byte   SPI1CON1                  at { 0x1DC }
var volatile bit    SPI1CON1_SDOP             at SPI1CON1 : 0
var volatile bit    SPI1CON1_SDIP             at SPI1CON1 : 1
var volatile bit    SPI1CON1_SSP              at SPI1CON1 : 2
var volatile bit    SPI1CON1_FST              at SPI1CON1 : 4
var volatile bit    SPI1CON1_CKP              at SPI1CON1 : 5
var volatile bit    SPI1CON1_CKE              at SPI1CON1 : 6
var volatile bit    SPI1CON1_SMP              at SPI1CON1 : 7
var volatile bit    SPI1CON1_SPI1SDOP         at SPI1CON1 : 0
var volatile bit    SPI1CON1_SPI1SDIP         at SPI1CON1 : 1
var volatile bit    SPI1CON1_SPI1SSP          at SPI1CON1 : 2
var volatile bit    SPI1CON1_SPI1FST          at SPI1CON1 : 4
var volatile bit    SPI1CON1_SPI1CKP          at SPI1CON1 : 5
var volatile bit    SPI1CON1_SPI1CKE          at SPI1CON1 : 6
var volatile bit    SPI1CON1_SPI1SMP          at SPI1CON1 : 7
-- ------------------------------------------------
var volatile byte   SPI1CON2                  at { 0x1DD }
var volatile bit    SPI1CON2_RXR              at SPI1CON2 : 0
var volatile bit    SPI1CON2_TXR              at SPI1CON2 : 1
var volatile bit    SPI1CON2_SSET             at SPI1CON2 : 2
var volatile bit    SPI1CON2_SSFLT            at SPI1CON2 : 6
var volatile bit    SPI1CON2_BUSY             at SPI1CON2 : 7
var volatile bit    SPI1CON2_SPI1RXR          at SPI1CON2 : 0
var volatile bit    SPI1CON2_SPI1TXR          at SPI1CON2 : 1
var volatile bit    SPI1CON2_SPI1SSET         at SPI1CON2 : 2
var volatile bit    SPI1CON2_SPI1SSFLT        at SPI1CON2 : 6
var volatile bit    SPI1CON2_SPI1BUSY         at SPI1CON2 : 7
-- ------------------------------------------------
var volatile byte   SPI1STATUS                at { 0x1DE }
var volatile bit    SPI1STATUS_RXBF           at SPI1STATUS : 0
var volatile bit    SPI1STATUS_CLRBF          at SPI1STATUS : 2
var volatile bit    SPI1STATUS_RXRE           at SPI1STATUS : 3
var volatile bit    SPI1STATUS_TXBE           at SPI1STATUS : 5
var volatile bit    SPI1STATUS_TXWE           at SPI1STATUS : 7
var volatile bit    SPI1STATUS_SPI1RXBF       at SPI1STATUS : 0
var volatile bit    SPI1STATUS_SPI1CLRBF      at SPI1STATUS : 2
var volatile bit    SPI1STATUS_SPI1RXRE       at SPI1STATUS : 3
var volatile bit    SPI1STATUS_SPI1TXBE       at SPI1STATUS : 5
var volatile bit    SPI1STATUS_SPI1TXWE       at SPI1STATUS : 7
-- ------------------------------------------------
var volatile byte   SPI1TWIDTH                at { 0x1DF }
var volatile bit*3  SPI1TWIDTH_TWIDTH         at SPI1TWIDTH : 0
var volatile bit    SPI1TWIDTH_TWIDTH0        at SPI1TWIDTH : 0
var volatile bit    SPI1TWIDTH_TWIDTH1        at SPI1TWIDTH : 1
var volatile bit    SPI1TWIDTH_TWIDTH2        at SPI1TWIDTH : 2
-- ------------------------------------------------
var volatile byte   SPI1BAUD                  at { 0x1E0 }
var volatile bit    SPI1BAUD_BAUD0            at SPI1BAUD : 0
var volatile bit    SPI1BAUD_BAUD1            at SPI1BAUD : 1
var volatile bit    SPI1BAUD_BAUD2            at SPI1BAUD : 2
var volatile bit    SPI1BAUD_BAUD3            at SPI1BAUD : 3
var volatile bit    SPI1BAUD_BAUD4            at SPI1BAUD : 4
var volatile bit    SPI1BAUD_BAUD5            at SPI1BAUD : 5
var volatile bit    SPI1BAUD_BAUD6            at SPI1BAUD : 6
var volatile bit    SPI1BAUD_BAUD7            at SPI1BAUD : 7
-- ------------------------------------------------
var volatile byte   SPI1INTF                  at { 0x1E1 }
var volatile bit    SPI1INTF_TXUIF            at SPI1INTF : 1
var volatile bit    SPI1INTF_RXOIF            at SPI1INTF : 2
var volatile bit    SPI1INTF_EOSIF            at SPI1INTF : 4
var volatile bit    SPI1INTF_SOSIF            at SPI1INTF : 5
var volatile bit    SPI1INTF_TCZIF            at SPI1INTF : 6
var volatile bit    SPI1INTF_SRMTIF           at SPI1INTF : 7
var volatile bit    SPI1INTF_SPI1TXUIF        at SPI1INTF : 1
var volatile bit    SPI1INTF_SPI1RXOIF        at SPI1INTF : 2
var volatile bit    SPI1INTF_SPI1EOSIF        at SPI1INTF : 4
var volatile bit    SPI1INTF_SPI1SOSIF        at SPI1INTF : 5
var volatile bit    SPI1INTF_SPI1TCZIF        at SPI1INTF : 6
var volatile bit    SPI1INTF_SPI1SRMTIF       at SPI1INTF : 7
-- ------------------------------------------------
var volatile byte   SPI1INTE                  at { 0x1E2 }
var volatile bit    SPI1INTE_TXUIE            at SPI1INTE : 1
var volatile bit    SPI1INTE_RXOIE            at SPI1INTE : 2
var volatile bit    SPI1INTE_EOSIE            at SPI1INTE : 4
var volatile bit    SPI1INTE_SOSIE            at SPI1INTE : 5
var volatile bit    SPI1INTE_TCZIE            at SPI1INTE : 6
var volatile bit    SPI1INTE_SRMTIE           at SPI1INTE : 7
var volatile bit    SPI1INTE_SPI1TXUIE        at SPI1INTE : 1
var volatile bit    SPI1INTE_SPI1RXOIE        at SPI1INTE : 2
var volatile bit    SPI1INTE_SPI1EOSIE        at SPI1INTE : 4
var volatile bit    SPI1INTE_SPI1SOSIE        at SPI1INTE : 5
var volatile bit    SPI1INTE_SPI1TCZIE        at SPI1INTE : 6
var volatile bit    SPI1INTE_SPI1SRMTIE       at SPI1INTE : 7
-- ------------------------------------------------
var volatile byte   SPI1CLK                   at { 0x1E3 }
var volatile bit*4  SPI1CLK_CLKSEL            at SPI1CLK : 0
var volatile bit    SPI1CLK_CLKSEL0           at SPI1CLK : 0
var volatile bit    SPI1CLK_CLKSEL1           at SPI1CLK : 1
var volatile bit    SPI1CLK_CLKSEL2           at SPI1CLK : 2
var volatile bit    SPI1CLK_CLKSEL3           at SPI1CLK : 3
var volatile bit*4  SPI1CLK_SPI1CLKSEL        at SPI1CLK : 0
var volatile bit    SPI1CLK_SPI1CLKSEL0       at SPI1CLK : 0
var volatile bit    SPI1CLK_SPI1CLKSEL1       at SPI1CLK : 1
var volatile bit    SPI1CLK_SPI1CLKSEL2       at SPI1CLK : 2
var volatile bit    SPI1CLK_SPI1CLKSEL3       at SPI1CLK : 3
-- ------------------------------------------------
var volatile byte   I2C1STAT0                 at { 0x1E4 }
var volatile bit    I2C1STAT0_D               at I2C1STAT0 : 3
var volatile bit    I2C1STAT0_R               at I2C1STAT0 : 4
var volatile bit    I2C1STAT0_MMA             at I2C1STAT0 : 5
var volatile bit    I2C1STAT0_SMA             at I2C1STAT0 : 6
var volatile bit    I2C1STAT0_BFRE            at I2C1STAT0 : 7
var volatile bit    I2C1STAT0_DATA            at I2C1STAT0 : 3
var volatile bit    I2C1STAT0_READ            at I2C1STAT0 : 4
var volatile bit    I2C1STAT0_NOT_ADDRESS     at I2C1STAT0 : 3
var volatile bit    I2C1STAT0_NOT_WRITE       at I2C1STAT0 : 4
var volatile bit    I2C1STAT0_NOT_A           at I2C1STAT0 : 3
var volatile bit    I2C1STAT0_NOT_W           at I2C1STAT0 : 4
-- ------------------------------------------------
var volatile byte   I2C1STAT1                 at { 0x1E5 }
var volatile bit    I2C1STAT1_RXBF            at I2C1STAT1 : 0
var volatile bit    I2C1STAT1_CLRBF           at I2C1STAT1 : 2
var volatile bit    I2C1STAT1_RXRE            at I2C1STAT1 : 3
var volatile bit    I2C1STAT1_TXBE            at I2C1STAT1 : 5
var volatile bit    I2C1STAT1_TXWE            at I2C1STAT1 : 7
-- ------------------------------------------------
var volatile byte   I2C1CON0                  at { 0x1E6 }
var volatile bit*3  I2C1CON0_MODE             at I2C1CON0 : 0
var volatile bit    I2C1CON0_MDR              at I2C1CON0 : 3
var volatile bit    I2C1CON0_CSTR             at I2C1CON0 : 4
var volatile bit    I2C1CON0_S                at I2C1CON0 : 5
var volatile bit    I2C1CON0_RSEN             at I2C1CON0 : 6
var volatile bit    I2C1CON0_EN               at I2C1CON0 : 7
var volatile bit    I2C1CON0_MODE0            at I2C1CON0 : 0
var volatile bit    I2C1CON0_MODE1            at I2C1CON0 : 1
var volatile bit    I2C1CON0_MODE2            at I2C1CON0 : 2
var volatile bit    I2C1CON0_I2CEN            at I2C1CON0 : 7
-- ------------------------------------------------
var volatile byte   I2C1CON1                  at { 0x1E7 }
var volatile bit    I2C1CON1_CSD              at I2C1CON1 : 0
var volatile bit    I2C1CON1_TXU              at I2C1CON1 : 1
var volatile bit    I2C1CON1_RXO              at I2C1CON1 : 2
var volatile bit    I2C1CON1_P                at I2C1CON1 : 3
var volatile bit    I2C1CON1_ACKT             at I2C1CON1 : 4
var volatile bit    I2C1CON1_ACKSTAT          at I2C1CON1 : 5
var volatile bit    I2C1CON1_ACKDT            at I2C1CON1 : 6
var volatile bit    I2C1CON1_ACKCNT           at I2C1CON1 : 7
-- ------------------------------------------------
var volatile byte   I2C1CON2                  at { 0x1E8 }
var volatile bit*2  I2C1CON2_BFRET            at I2C1CON2 : 0
var volatile bit*2  I2C1CON2_SDAHT            at I2C1CON2 : 2
var volatile bit    I2C1CON2_ABD              at I2C1CON2 : 4
var volatile bit    I2C1CON2_GCEN             at I2C1CON2 : 6
var volatile bit    I2C1CON2_ACNT             at I2C1CON2 : 7
var volatile bit    I2C1CON2_BFRET0           at I2C1CON2 : 0
var volatile bit    I2C1CON2_BFRET1           at I2C1CON2 : 1
var volatile bit    I2C1CON2_SDAHT0           at I2C1CON2 : 2
var volatile bit    I2C1CON2_SDAHT1           at I2C1CON2 : 3
-- ------------------------------------------------
var volatile byte   I2C1CON3                  at { 0x1E9 }
var volatile bit*2  I2C1CON3_ACNTMD           at I2C1CON3 : 0
var volatile bit*2  I2C1CON3_FME              at I2C1CON3 : 2
var volatile bit    I2C1CON3_BFREDR           at I2C1CON3 : 4
var volatile bit    I2C1CON3_ACNTMD0          at I2C1CON3 : 0
var volatile bit    I2C1CON3_ACNTMD1          at I2C1CON3 : 1
var volatile bit    I2C1CON3_FME0             at I2C1CON3 : 2
var volatile bit    I2C1CON3_FME1             at I2C1CON3 : 3
-- ------------------------------------------------
var volatile byte   I2C1PIR                   at { 0x1EA }
var volatile bit    I2C1PIR_SCIF              at I2C1PIR : 0
var volatile bit    I2C1PIR_RSCIF             at I2C1PIR : 1
var volatile bit    I2C1PIR_PCIF              at I2C1PIR : 2
var volatile bit    I2C1PIR_ADRIF             at I2C1PIR : 3
var volatile bit    I2C1PIR_WRIF              at I2C1PIR : 4
var volatile bit    I2C1PIR_ACKTIF            at I2C1PIR : 6
var volatile bit    I2C1PIR_CNTIF             at I2C1PIR : 7
var volatile bit    I2C1PIR_SC1IF             at I2C1PIR : 0
var volatile bit    I2C1PIR_RSC1IF            at I2C1PIR : 1
var volatile bit    I2C1PIR_PC1IF             at I2C1PIR : 2
var volatile bit    I2C1PIR_ADR1IF            at I2C1PIR : 3
var volatile bit    I2C1PIR_WR1IF             at I2C1PIR : 4
var volatile bit    I2C1PIR_ACKT1IF           at I2C1PIR : 6
var volatile bit    I2C1PIR_CNT1IF            at I2C1PIR : 7
-- ------------------------------------------------
var volatile byte   I2C1PIE                   at { 0x1EB }
var volatile bit    I2C1PIE_SCIE              at I2C1PIE : 0
var volatile bit    I2C1PIE_RSCIE             at I2C1PIE : 1
var volatile bit    I2C1PIE_PCIE              at I2C1PIE : 2
var volatile bit    I2C1PIE_ADRIE             at I2C1PIE : 3
var volatile bit    I2C1PIE_WRIE              at I2C1PIE : 4
var volatile bit    I2C1PIE_ACKTIE            at I2C1PIE : 6
var volatile bit    I2C1PIE_CNTIE             at I2C1PIE : 7
var volatile bit    I2C1PIE_SC1IE             at I2C1PIE : 0
var volatile bit    I2C1PIE_RSC1IE            at I2C1PIE : 1
var volatile bit    I2C1PIE_PC1IE             at I2C1PIE : 2
var volatile bit    I2C1PIE_ADR1IE            at I2C1PIE : 3
var volatile bit    I2C1PIE_WR1IE             at I2C1PIE : 4
var volatile bit    I2C1PIE_ACKT1IE           at I2C1PIE : 6
var volatile bit    I2C1PIE_CNT1IE            at I2C1PIE : 7
-- ------------------------------------------------
var volatile byte   I2C1ERR                   at { 0x1EC }
var volatile bit    I2C1ERR_NACKIE            at I2C1ERR : 0
var volatile bit    I2C1ERR_BCLIE             at I2C1ERR : 1
var volatile bit    I2C1ERR_BTOIE             at I2C1ERR : 2
var volatile bit    I2C1ERR_NACKIF            at I2C1ERR : 4
var volatile bit    I2C1ERR_BCLIF             at I2C1ERR : 5
var volatile bit    I2C1ERR_BTOIF             at I2C1ERR : 6
var volatile bit    I2C1ERR_NACK1IE           at I2C1ERR : 0
var volatile bit    I2C1ERR_BCL1IE            at I2C1ERR : 1
var volatile bit    I2C1ERR_BTO1IE            at I2C1ERR : 2
var volatile bit    I2C1ERR_NACK1IF           at I2C1ERR : 4
var volatile bit    I2C1ERR_BCL1IF            at I2C1ERR : 5
var volatile bit    I2C1ERR_BTO1IF            at I2C1ERR : 6
-- ------------------------------------------------
var volatile word   I2C1CNT                   at { 0x1ED }
-- ------------------------------------------------
var volatile byte   I2C1CNTL                  at { 0x1ED }
var volatile bit    I2C1CNTL_CNT0             at I2C1CNTL : 0
var volatile bit    I2C1CNTL_CNT1             at I2C1CNTL : 1
var volatile bit    I2C1CNTL_CNT2             at I2C1CNTL : 2
var volatile bit    I2C1CNTL_CNT3             at I2C1CNTL : 3
var volatile bit    I2C1CNTL_CNT4             at I2C1CNTL : 4
var volatile bit    I2C1CNTL_CNT5             at I2C1CNTL : 5
var volatile bit    I2C1CNTL_CNT6             at I2C1CNTL : 6
var volatile bit    I2C1CNTL_CNT7             at I2C1CNTL : 7
var volatile bit    I2C1CNTL_I2C1CNT0         at I2C1CNTL : 0
var volatile bit    I2C1CNTL_I2C1CNT1         at I2C1CNTL : 1
var volatile bit    I2C1CNTL_I2C1CNT2         at I2C1CNTL : 2
var volatile bit    I2C1CNTL_I2C1CNT3         at I2C1CNTL : 3
var volatile bit    I2C1CNTL_I2C1CNT4         at I2C1CNTL : 4
var volatile bit    I2C1CNTL_I2C1CNT5         at I2C1CNTL : 5
var volatile bit    I2C1CNTL_I2C1CNT6         at I2C1CNTL : 6
var volatile bit    I2C1CNTL_I2C1CNT7         at I2C1CNTL : 7
-- ------------------------------------------------
var volatile byte   I2C1CNTH                  at { 0x1EE }
var volatile bit    I2C1CNTH_CNT8             at I2C1CNTH : 0
var volatile bit    I2C1CNTH_CNT9             at I2C1CNTH : 1
var volatile bit    I2C1CNTH_CNT10            at I2C1CNTH : 2
var volatile bit    I2C1CNTH_CNT11            at I2C1CNTH : 3
var volatile bit    I2C1CNTH_CNT12            at I2C1CNTH : 4
var volatile bit    I2C1CNTH_CNT13            at I2C1CNTH : 5
var volatile bit    I2C1CNTH_CNT14            at I2C1CNTH : 6
var volatile bit    I2C1CNTH_CNT15            at I2C1CNTH : 7
var volatile bit    I2C1CNTH_I2C1CNT8         at I2C1CNTH : 0
var volatile bit    I2C1CNTH_I2C1CNT9         at I2C1CNTH : 1
var volatile bit    I2C1CNTH_I2C1CNT10        at I2C1CNTH : 2
var volatile bit    I2C1CNTH_I2C1CNT11        at I2C1CNTH : 3
var volatile bit    I2C1CNTH_I2C1CNT12        at I2C1CNTH : 4
var volatile bit    I2C1CNTH_I2C1CNT13        at I2C1CNTH : 5
var volatile bit    I2C1CNTH_I2C1CNT14        at I2C1CNTH : 6
var volatile bit    I2C1CNTH_I2C1CNT15        at I2C1CNTH : 7
-- ------------------------------------------------
var volatile byte   I2C1RXB                   at { 0x1EF }
-- ------------------------------------------------
var volatile byte   I2C1TXB                   at { 0x1F0 }
-- ------------------------------------------------
var volatile byte   I2C1ADB0                  at { 0x1F1 }
-- ------------------------------------------------
var volatile byte   I2C1ADB1                  at { 0x1F2 }
-- ------------------------------------------------
var volatile byte   I2C1ADR0                  at { 0x1F3 }
-- ------------------------------------------------
var volatile byte   I2C1ADR1                  at { 0x1F4 }
var volatile bit*7  I2C1ADR1_ADR              at I2C1ADR1 : 1
-- ------------------------------------------------
var volatile byte   I2C1ADR2                  at { 0x1F5 }
-- ------------------------------------------------
var volatile byte   I2C1ADR3                  at { 0x1F6 }
var volatile bit*7  I2C1ADR3_ADR              at I2C1ADR3 : 1
-- ------------------------------------------------
var volatile byte   I2C1BTO                   at { 0x1F7 }
var volatile bit*6  I2C1BTO_TOTIME            at I2C1BTO : 0
var volatile bit    I2C1BTO_TOBY32            at I2C1BTO : 6
var volatile bit    I2C1BTO_TOREC             at I2C1BTO : 7
var volatile bit    I2C1BTO_TOTIME0           at I2C1BTO : 0
var volatile bit    I2C1BTO_TOTIME1           at I2C1BTO : 1
var volatile bit    I2C1BTO_TOTIME2           at I2C1BTO : 2
var volatile bit    I2C1BTO_TOTIME3           at I2C1BTO : 3
var volatile bit    I2C1BTO_TOTIME4           at I2C1BTO : 4
var volatile bit    I2C1BTO_TOTIME5           at I2C1BTO : 5
-- ------------------------------------------------
var volatile byte   I2C1BAUD                  at { 0x1F8 }
-- ------------------------------------------------
var volatile byte   I2C1CLK                   at { 0x1F9 }
var volatile bit*4  I2C1CLK_CLK               at I2C1CLK : 0
var volatile bit*4  I2C1CLK_I2CCLK            at I2C1CLK : 0
var volatile bit    I2C1CLK_CLK0              at I2C1CLK : 0
var volatile bit    I2C1CLK_CLK1              at I2C1CLK : 1
var volatile bit    I2C1CLK_CLK2              at I2C1CLK : 2
var volatile bit    I2C1CLK_CLK3              at I2C1CLK : 3
var volatile bit    I2C1CLK_I2CCLK0           at I2C1CLK : 0
var volatile bit    I2C1CLK_I2CCLK1           at I2C1CLK : 1
var volatile bit    I2C1CLK_I2CCLK2           at I2C1CLK : 2
var volatile bit    I2C1CLK_I2CCLK3           at I2C1CLK : 3
-- ------------------------------------------------
var volatile byte   I2C1BTOC                  at { 0x1FA }
var volatile bit*3  I2C1BTOC_BTOC             at I2C1BTOC : 0
var volatile bit*3  I2C1BTOC_I2CBTOC          at I2C1BTOC : 0
var volatile bit    I2C1BTOC_BTOC0            at I2C1BTOC : 0
var volatile bit    I2C1BTOC_BTOC1            at I2C1BTOC : 1
var volatile bit    I2C1BTOC_BTOC2            at I2C1BTOC : 2
var volatile bit    I2C1BTOC_I2CBTOC0         at I2C1BTOC : 0
var volatile bit    I2C1BTOC_I2CBTOC1         at I2C1BTOC : 1
var volatile bit    I2C1BTOC_I2CBTOC2         at I2C1BTOC : 2
-- ------------------------------------------------
var volatile byte   FVRCON                    at { 0x201 }
var volatile bit*2  FVRCON_ADFVR              at FVRCON : 0
var volatile bit    FVRCON_TSRNG              at FVRCON : 4
var volatile bit    FVRCON_TSEN               at FVRCON : 5
var volatile bit    FVRCON_RDY                at FVRCON : 6
var volatile bit    FVRCON_EN                 at FVRCON : 7
var volatile bit    FVRCON_ADFVR0             at FVRCON : 0
var volatile bit    FVRCON_ADFVR1             at FVRCON : 1
var volatile bit    FVRCON_FVRRDY             at FVRCON : 6
var volatile bit    FVRCON_FVREN              at FVRCON : 7
-- ------------------------------------------------
var volatile byte   HLVDCON0                  at { 0x202 }
var volatile bit    HLVDCON0_INTL             at HLVDCON0 : 0
var volatile bit    HLVDCON0_INTH             at HLVDCON0 : 1
var volatile bit    HLVDCON0_RDY              at HLVDCON0 : 4
var volatile bit    HLVDCON0_OUT              at HLVDCON0 : 5
var volatile bit    HLVDCON0_EN               at HLVDCON0 : 7
var volatile bit    HLVDCON0_HLVDINTL         at HLVDCON0 : 0
var volatile bit    HLVDCON0_HLVDINTH         at HLVDCON0 : 1
var volatile bit    HLVDCON0_HLVDRDY          at HLVDCON0 : 4
var volatile bit    HLVDCON0_HLVDOUT          at HLVDCON0 : 5
var volatile bit    HLVDCON0_HLVDEN           at HLVDCON0 : 7
-- ------------------------------------------------
var volatile byte   HLVDCON1                  at { 0x203 }
var volatile bit*4  HLVDCON1_SEL              at HLVDCON1 : 0
var volatile bit    HLVDCON1_SEL0             at HLVDCON1 : 0
var volatile bit    HLVDCON1_SEL1             at HLVDCON1 : 1
var volatile bit    HLVDCON1_SEL2             at HLVDCON1 : 2
var volatile bit    HLVDCON1_SEL3             at HLVDCON1 : 3
var volatile bit    HLVDCON1_HLVDSEL0         at HLVDCON1 : 0
var volatile bit    HLVDCON1_HLVDSEL1         at HLVDCON1 : 1
var volatile bit    HLVDCON1_HLVDSEL2         at HLVDCON1 : 2
var volatile bit    HLVDCON1_HLVDSEL3         at HLVDCON1 : 3
-- ------------------------------------------------
var volatile word   ADLTH                     at { 0x215 }
-- ------------------------------------------------
var volatile byte   ADLTHL                    at { 0x215 }
var volatile bit    ADLTHL_ADLTH0             at ADLTHL : 0
var volatile bit    ADLTHL_ADLTH1             at ADLTHL : 1
var volatile bit    ADLTHL_ADLTH2             at ADLTHL : 2
var volatile bit    ADLTHL_ADLTH3             at ADLTHL : 3
var volatile bit    ADLTHL_ADLTH4             at ADLTHL : 4
var volatile bit    ADLTHL_ADLTH5             at ADLTHL : 5
var volatile bit    ADLTHL_ADLTH6             at ADLTHL : 6
var volatile bit    ADLTHL_ADLTH7             at ADLTHL : 7
var volatile bit    ADLTHL_LTH0               at ADLTHL : 0
var volatile bit    ADLTHL_LTH1               at ADLTHL : 1
var volatile bit    ADLTHL_LTH2               at ADLTHL : 2
var volatile bit    ADLTHL_LTH3               at ADLTHL : 3
var volatile bit    ADLTHL_LTH4               at ADLTHL : 4
var volatile bit    ADLTHL_LTH5               at ADLTHL : 5
var volatile bit    ADLTHL_LTH6               at ADLTHL : 6
var volatile bit    ADLTHL_LTH7               at ADLTHL : 7
-- ------------------------------------------------
var volatile byte   ADLTHH                    at { 0x216 }
var volatile bit    ADLTHH_ADLTH8             at ADLTHH : 0
var volatile bit    ADLTHH_ADLTH9             at ADLTHH : 1
var volatile bit    ADLTHH_ADLTH10            at ADLTHH : 2
var volatile bit    ADLTHH_ADLTH11            at ADLTHH : 3
var volatile bit    ADLTHH_ADLTH12            at ADLTHH : 4
var volatile bit    ADLTHH_ADLTH13            at ADLTHH : 5
var volatile bit    ADLTHH_ADLTH14            at ADLTHH : 6
var volatile bit    ADLTHH_ADLTH15            at ADLTHH : 7
var volatile bit    ADLTHH_LTH8               at ADLTHH : 0
var volatile bit    ADLTHH_LTH9               at ADLTHH : 1
var volatile bit    ADLTHH_LTH10              at ADLTHH : 2
var volatile bit    ADLTHH_LTH11              at ADLTHH : 3
var volatile bit    ADLTHH_LTH12              at ADLTHH : 4
var volatile bit    ADLTHH_LTH13              at ADLTHH : 5
var volatile bit    ADLTHH_LTH14              at ADLTHH : 6
var volatile bit    ADLTHH_LTH15              at ADLTHH : 7
-- ------------------------------------------------
var volatile word   ADUTH                     at { 0x217 }
-- ------------------------------------------------
var volatile byte   ADUTHL                    at { 0x217 }
var volatile bit    ADUTHL_ADUTH0             at ADUTHL : 0
var volatile bit    ADUTHL_ADUTH1             at ADUTHL : 1
var volatile bit    ADUTHL_ADUTH2             at ADUTHL : 2
var volatile bit    ADUTHL_ADUTH3             at ADUTHL : 3
var volatile bit    ADUTHL_ADUTH4             at ADUTHL : 4
var volatile bit    ADUTHL_ADUTH5             at ADUTHL : 5
var volatile bit    ADUTHL_ADUTH6             at ADUTHL : 6
var volatile bit    ADUTHL_ADUTH7             at ADUTHL : 7
var volatile bit    ADUTHL_UTH0               at ADUTHL : 0
var volatile bit    ADUTHL_UTH1               at ADUTHL : 1
var volatile bit    ADUTHL_UTH2               at ADUTHL : 2
var volatile bit    ADUTHL_UTH3               at ADUTHL : 3
var volatile bit    ADUTHL_UTH4               at ADUTHL : 4
var volatile bit    ADUTHL_UTH5               at ADUTHL : 5
var volatile bit    ADUTHL_UTH6               at ADUTHL : 6
var volatile bit    ADUTHL_UTH7               at ADUTHL : 7
-- ------------------------------------------------
var volatile byte   ADUTHH                    at { 0x218 }
var volatile bit    ADUTHH_ADUTH8             at ADUTHH : 0
var volatile bit    ADUTHH_ADUTH9             at ADUTHH : 1
var volatile bit    ADUTHH_ADUTH10            at ADUTHH : 2
var volatile bit    ADUTHH_ADUTH11            at ADUTHH : 3
var volatile bit    ADUTHH_ADUTH12            at ADUTHH : 4
var volatile bit    ADUTHH_ADUTH13            at ADUTHH : 5
var volatile bit    ADUTHH_ADUTH14            at ADUTHH : 6
var volatile bit    ADUTHH_ADUTH15            at ADUTHH : 7
var volatile bit    ADUTHH_UTH8               at ADUTHH : 0
var volatile bit    ADUTHH_UTH9               at ADUTHH : 1
var volatile bit    ADUTHH_UTH10              at ADUTHH : 2
var volatile bit    ADUTHH_UTH11              at ADUTHH : 3
var volatile bit    ADUTHH_UTH12              at ADUTHH : 4
var volatile bit    ADUTHH_UTH13              at ADUTHH : 5
var volatile bit    ADUTHH_UTH14              at ADUTHH : 6
var volatile bit    ADUTHH_UTH15              at ADUTHH : 7
-- ------------------------------------------------
var volatile word   ADERR                     at { 0x219 }
-- ------------------------------------------------
var volatile byte   ADERRL                    at { 0x219 }
var volatile bit    ADERRL_ADERR0             at ADERRL : 0
var volatile bit    ADERRL_ADERR1             at ADERRL : 1
var volatile bit    ADERRL_ADERR2             at ADERRL : 2
var volatile bit    ADERRL_ADERR3             at ADERRL : 3
var volatile bit    ADERRL_ADERR4             at ADERRL : 4
var volatile bit    ADERRL_ADERR5             at ADERRL : 5
var volatile bit    ADERRL_ADERR6             at ADERRL : 6
var volatile bit    ADERRL_ADERR7             at ADERRL : 7
var volatile bit    ADERRL_ERR0               at ADERRL : 0
var volatile bit    ADERRL_ERR1               at ADERRL : 1
var volatile bit    ADERRL_ERR2               at ADERRL : 2
var volatile bit    ADERRL_ERR3               at ADERRL : 3
var volatile bit    ADERRL_ERR4               at ADERRL : 4
var volatile bit    ADERRL_ERR5               at ADERRL : 5
var volatile bit    ADERRL_ERR6               at ADERRL : 6
var volatile bit    ADERRL_ERR7               at ADERRL : 7
-- ------------------------------------------------
var volatile byte   ADERRH                    at { 0x21A }
var volatile bit    ADERRH_ADERR8             at ADERRH : 0
var volatile bit    ADERRH_ADERR9             at ADERRH : 1
var volatile bit    ADERRH_ADERR10            at ADERRH : 2
var volatile bit    ADERRH_ADERR11            at ADERRH : 3
var volatile bit    ADERRH_ADERR12            at ADERRH : 4
var volatile bit    ADERRH_ADERR13            at ADERRH : 5
var volatile bit    ADERRH_ADERR14            at ADERRH : 6
var volatile bit    ADERRH_ADERR15            at ADERRH : 7
var volatile bit    ADERRH_ERR8               at ADERRH : 0
var volatile bit    ADERRH_ERR9               at ADERRH : 1
var volatile bit    ADERRH_ERR10              at ADERRH : 2
var volatile bit    ADERRH_ERR11              at ADERRH : 3
var volatile bit    ADERRH_ERR12              at ADERRH : 4
var volatile bit    ADERRH_ERR13              at ADERRH : 5
var volatile bit    ADERRH_ERR14              at ADERRH : 6
var volatile bit    ADERRH_ERR15              at ADERRH : 7
-- ------------------------------------------------
var volatile word   ADSTPT                    at { 0x21B }
-- ------------------------------------------------
var volatile byte   ADSTPTL                   at { 0x21B }
var volatile bit    ADSTPTL_ADSTPT0           at ADSTPTL : 0
var volatile bit    ADSTPTL_ADSTPT1           at ADSTPTL : 1
var volatile bit    ADSTPTL_ADSTPT2           at ADSTPTL : 2
var volatile bit    ADSTPTL_ADSTPT3           at ADSTPTL : 3
var volatile bit    ADSTPTL_ADSTPT4           at ADSTPTL : 4
var volatile bit    ADSTPTL_ADSTPT5           at ADSTPTL : 5
var volatile bit    ADSTPTL_ADSTPT6           at ADSTPTL : 6
var volatile bit    ADSTPTL_ADSTPT7           at ADSTPTL : 7
var volatile bit    ADSTPTL_STPT0             at ADSTPTL : 0
var volatile bit    ADSTPTL_STPT1             at ADSTPTL : 1
var volatile bit    ADSTPTL_STPT2             at ADSTPTL : 2
var volatile bit    ADSTPTL_STPT3             at ADSTPTL : 3
var volatile bit    ADSTPTL_STPT4             at ADSTPTL : 4
var volatile bit    ADSTPTL_STPT5             at ADSTPTL : 5
var volatile bit    ADSTPTL_STPT6             at ADSTPTL : 6
var volatile bit    ADSTPTL_STPT7             at ADSTPTL : 7
-- ------------------------------------------------
var volatile byte   ADSTPTH                   at { 0x21C }
var volatile bit    ADSTPTH_ADSTPT8           at ADSTPTH : 0
var volatile bit    ADSTPTH_ADSTPT9           at ADSTPTH : 1
var volatile bit    ADSTPTH_ADSTPT10          at ADSTPTH : 2
var volatile bit    ADSTPTH_ADSTPT11          at ADSTPTH : 3
var volatile bit    ADSTPTH_ADSTPT12          at ADSTPTH : 4
var volatile bit    ADSTPTH_ADSTPT13          at ADSTPTH : 5
var volatile bit    ADSTPTH_ADSTPT14          at ADSTPTH : 6
var volatile bit    ADSTPTH_ADSTPT15          at ADSTPTH : 7
var volatile bit    ADSTPTH_STPT8             at ADSTPTH : 0
var volatile bit    ADSTPTH_STPT9             at ADSTPTH : 1
var volatile bit    ADSTPTH_STPT10            at ADSTPTH : 2
var volatile bit    ADSTPTH_STPT11            at ADSTPTH : 3
var volatile bit    ADSTPTH_STPT12            at ADSTPTH : 4
var volatile bit    ADSTPTH_STPT13            at ADSTPTH : 5
var volatile bit    ADSTPTH_STPT15            at ADSTPTH : 6
var volatile bit    ADSTPTH_STPT16            at ADSTPTH : 7
-- ------------------------------------------------
var volatile word   ADFLTR                    at { 0x21D }
-- ------------------------------------------------
var volatile byte   ADFLTRL                   at { 0x21D }
var volatile bit    ADFLTRL_ADFLTR0           at ADFLTRL : 0
var volatile bit    ADFLTRL_ADFLTR1           at ADFLTRL : 1
var volatile bit    ADFLTRL_ADFLTR2           at ADFLTRL : 2
var volatile bit    ADFLTRL_ADFLTR3           at ADFLTRL : 3
var volatile bit    ADFLTRL_ADFLTR4           at ADFLTRL : 4
var volatile bit    ADFLTRL_ADFLTR5           at ADFLTRL : 5
var volatile bit    ADFLTRL_ADFLTR6           at ADFLTRL : 6
var volatile bit    ADFLTRL_ADFLTR7           at ADFLTRL : 7
var volatile bit    ADFLTRL_FLTR0             at ADFLTRL : 0
var volatile bit    ADFLTRL_FLTR1             at ADFLTRL : 1
var volatile bit    ADFLTRL_FLTR2             at ADFLTRL : 2
var volatile bit    ADFLTRL_FLTR3             at ADFLTRL : 3
var volatile bit    ADFLTRL_FLTR4             at ADFLTRL : 4
var volatile bit    ADFLTRL_FLTR5             at ADFLTRL : 5
var volatile bit    ADFLTRL_FLTR6             at ADFLTRL : 6
var volatile bit    ADFLTRL_FLTR7             at ADFLTRL : 7
-- ------------------------------------------------
var volatile byte   ADFLTRH                   at { 0x21E }
var volatile bit    ADFLTRH_ADFLTR8           at ADFLTRH : 0
var volatile bit    ADFLTRH_ADFLTR9           at ADFLTRH : 1
var volatile bit    ADFLTRH_ADFLTR10          at ADFLTRH : 2
var volatile bit    ADFLTRH_ADFLTR11          at ADFLTRH : 3
var volatile bit    ADFLTRH_ADFLTR12          at ADFLTRH : 4
var volatile bit    ADFLTRH_ADFLTR13          at ADFLTRH : 5
var volatile bit    ADFLTRH_ADFLTR14          at ADFLTRH : 6
var volatile bit    ADFLTRH_ADFLTR15          at ADFLTRH : 7
var volatile bit    ADFLTRH_FLTR8             at ADFLTRH : 0
var volatile bit    ADFLTRH_FLTR9             at ADFLTRH : 1
var volatile bit    ADFLTRH_FLTR10            at ADFLTRH : 2
var volatile bit    ADFLTRH_FLTR11            at ADFLTRH : 3
var volatile bit    ADFLTRH_FLTR12            at ADFLTRH : 4
var volatile bit    ADFLTRH_FLTR13            at ADFLTRH : 5
var volatile bit    ADFLTRH_FLTR14            at ADFLTRH : 6
var volatile bit    ADFLTRH_FLTR15            at ADFLTRH : 7
-- ------------------------------------------------
var volatile word   ADACC                     at { 0x21F }
-- ------------------------------------------------
var volatile byte   ADACCL                    at { 0x21F }
var volatile bit    ADACCL_ADACC0             at ADACCL : 0
var volatile bit    ADACCL_ADACC1             at ADACCL : 1
var volatile bit    ADACCL_ADACC2             at ADACCL : 2
var volatile bit    ADACCL_ADACC3             at ADACCL : 3
var volatile bit    ADACCL_ADACC4             at ADACCL : 4
var volatile bit    ADACCL_ADACC5             at ADACCL : 5
var volatile bit    ADACCL_ADACC6             at ADACCL : 6
var volatile bit    ADACCL_ADACC7             at ADACCL : 7
var volatile bit    ADACCL_ACC0               at ADACCL : 0
var volatile bit    ADACCL_ACC1               at ADACCL : 1
var volatile bit    ADACCL_ACC2               at ADACCL : 2
var volatile bit    ADACCL_ACC3               at ADACCL : 3
var volatile bit    ADACCL_ACC4               at ADACCL : 4
var volatile bit    ADACCL_ACC5               at ADACCL : 5
var volatile bit    ADACCL_ACC6               at ADACCL : 6
var volatile bit    ADACCL_ACC7               at ADACCL : 7
-- ------------------------------------------------
var volatile byte   ADACCH                    at { 0x220 }
var volatile bit    ADACCH_ADACC8             at ADACCH : 0
var volatile bit    ADACCH_ADACC9             at ADACCH : 1
var volatile bit    ADACCH_ADACC10            at ADACCH : 2
var volatile bit    ADACCH_ADACC11            at ADACCH : 3
var volatile bit    ADACCH_ADACC12            at ADACCH : 4
var volatile bit    ADACCH_ADACC13            at ADACCH : 5
var volatile bit    ADACCH_ADACC14            at ADACCH : 6
var volatile bit    ADACCH_ADACC15            at ADACCH : 7
var volatile bit    ADACCH_ACC8               at ADACCH : 0
var volatile bit    ADACCH_ACC9               at ADACCH : 1
var volatile bit    ADACCH_ACC10              at ADACCH : 2
var volatile bit    ADACCH_ACC11              at ADACCH : 3
var volatile bit    ADACCH_ACC12              at ADACCH : 4
var volatile bit    ADACCH_ACC13              at ADACCH : 5
var volatile bit    ADACCH_ACC14              at ADACCH : 6
var volatile bit    ADACCH_ACC15              at ADACCH : 7
-- ------------------------------------------------
var volatile byte   ADCNT                     at { 0x222 }
var volatile bit    ADCNT_ADCNT0              at ADCNT : 0
var volatile bit    ADCNT_ADCNT1              at ADCNT : 1
var volatile bit    ADCNT_ADCNT2              at ADCNT : 2
var volatile bit    ADCNT_ADCNT3              at ADCNT : 3
var volatile bit    ADCNT_ADCNT4              at ADCNT : 4
var volatile bit    ADCNT_ADCNT5              at ADCNT : 5
var volatile bit    ADCNT_ADCNT6              at ADCNT : 6
var volatile bit    ADCNT_ADCNT7              at ADCNT : 7
var volatile bit    ADCNT_CNT0                at ADCNT : 0
var volatile bit    ADCNT_CNT1                at ADCNT : 1
var volatile bit    ADCNT_CNT2                at ADCNT : 2
var volatile bit    ADCNT_CNT3                at ADCNT : 3
var volatile bit    ADCNT_CNT4                at ADCNT : 4
var volatile bit    ADCNT_CNT5                at ADCNT : 5
var volatile bit    ADCNT_CNT6                at ADCNT : 6
var volatile bit    ADCNT_CNT7                at ADCNT : 7
-- ------------------------------------------------
var volatile byte   ADRPT                     at { 0x223 }
var volatile bit    ADRPT_ADRPT0              at ADRPT : 0
var volatile bit    ADRPT_ADRPT1              at ADRPT : 1
var volatile bit    ADRPT_ADRPT2              at ADRPT : 2
var volatile bit    ADRPT_ADRPT3              at ADRPT : 3
var volatile bit    ADRPT_ADRPT4              at ADRPT : 4
var volatile bit    ADRPT_ADRPT5              at ADRPT : 5
var volatile bit    ADRPT_ADRPT6              at ADRPT : 6
var volatile bit    ADRPT_ADRPT7              at ADRPT : 7
var volatile bit    ADRPT_RPT0                at ADRPT : 0
var volatile bit    ADRPT_RPT1                at ADRPT : 1
var volatile bit    ADRPT_RPT2                at ADRPT : 2
var volatile bit    ADRPT_RPT3                at ADRPT : 3
var volatile bit    ADRPT_RPT4                at ADRPT : 4
var volatile bit    ADRPT_RPT5                at ADRPT : 5
var volatile bit    ADRPT_RPT6                at ADRPT : 6
var volatile bit    ADRPT_RPT7                at ADRPT : 7
-- ------------------------------------------------
var volatile word   ADPREV                    at { 0x224 }
-- ------------------------------------------------
var volatile byte   ADPREVL                   at { 0x224 }
var volatile bit    ADPREVL_ADPREV0           at ADPREVL : 0
var volatile bit    ADPREVL_ADPREV1           at ADPREVL : 1
var volatile bit    ADPREVL_ADPREV2           at ADPREVL : 2
var volatile bit    ADPREVL_ADPREV3           at ADPREVL : 3
var volatile bit    ADPREVL_ADPREV4           at ADPREVL : 4
var volatile bit    ADPREVL_ADPREV5           at ADPREVL : 5
var volatile bit    ADPREVL_ADPREV6           at ADPREVL : 6
var volatile bit    ADPREVL_ADPREV7           at ADPREVL : 7
var volatile bit    ADPREVL_PREV0             at ADPREVL : 0
var volatile bit    ADPREVL_PREV1             at ADPREVL : 1
var volatile bit    ADPREVL_PREV2             at ADPREVL : 2
var volatile bit    ADPREVL_PREV3             at ADPREVL : 3
var volatile bit    ADPREVL_PREV4             at ADPREVL : 4
var volatile bit    ADPREVL_PREV5             at ADPREVL : 5
var volatile bit    ADPREVL_PREV6             at ADPREVL : 6
var volatile bit    ADPREVL_PREV7             at ADPREVL : 7
-- ------------------------------------------------
var volatile byte   ADPREVH                   at { 0x225 }
var volatile bit    ADPREVH_ADPREV8           at ADPREVH : 0
var volatile bit    ADPREVH_ADPREV9           at ADPREVH : 1
var volatile bit    ADPREVH_ADPREV10          at ADPREVH : 2
var volatile bit    ADPREVH_ADPREV11          at ADPREVH : 3
var volatile bit    ADPREVH_ADPREV12          at ADPREVH : 4
var volatile bit    ADPREVH_ADPREV13          at ADPREVH : 5
var volatile bit    ADPREVH_ADPREV14          at ADPREVH : 6
var volatile bit    ADPREVH_ADPREV15          at ADPREVH : 7
var volatile bit    ADPREVH_PREV8             at ADPREVH : 0
var volatile bit    ADPREVH_PREV9             at ADPREVH : 1
var volatile bit    ADPREVH_PREV10            at ADPREVH : 2
var volatile bit    ADPREVH_PREV11            at ADPREVH : 3
var volatile bit    ADPREVH_PREV12            at ADPREVH : 4
var volatile bit    ADPREVH_PREV13            at ADPREVH : 5
var volatile bit    ADPREVH_PREV14            at ADPREVH : 6
var volatile bit    ADPREVH_PREV15            at ADPREVH : 7
-- ------------------------------------------------
var volatile word   ADRES                     at { 0x226 }
-- ------------------------------------------------
var volatile byte   ADRESL                    at { 0x226 }
var volatile bit    ADRESL_ADRES0             at ADRESL : 0
var volatile bit    ADRESL_ADRES1             at ADRESL : 1
var volatile bit    ADRESL_ADRES2             at ADRESL : 2
var volatile bit    ADRESL_ADRES3             at ADRESL : 3
var volatile bit    ADRESL_ADRES4             at ADRESL : 4
var volatile bit    ADRESL_ADRES5             at ADRESL : 5
var volatile bit    ADRESL_ADRES6             at ADRESL : 6
var volatile bit    ADRESL_ADRES7             at ADRESL : 7
var volatile bit    ADRESL_RES0               at ADRESL : 0
var volatile bit    ADRESL_RES1               at ADRESL : 1
var volatile bit    ADRESL_RES2               at ADRESL : 2
var volatile bit    ADRESL_RES3               at ADRESL : 3
var volatile bit    ADRESL_RES4               at ADRESL : 4
var volatile bit    ADRESL_RES5               at ADRESL : 5
var volatile bit    ADRESL_RES6               at ADRESL : 6
var volatile bit    ADRESL_RES7               at ADRESL : 7
-- ------------------------------------------------
var volatile byte   ADRESH                    at { 0x227 }
var volatile bit    ADRESH_ADRES8             at ADRESH : 0
var volatile bit    ADRESH_ADRES9             at ADRESH : 1
var volatile bit    ADRESH_ADRES10            at ADRESH : 2
var volatile bit    ADRESH_ADRES11            at ADRESH : 3
var volatile bit    ADRESH_ADRES12            at ADRESH : 4
var volatile bit    ADRESH_ADRES13            at ADRESH : 5
var volatile bit    ADRESH_ADRES14            at ADRESH : 6
var volatile bit    ADRESH_ADRES15            at ADRESH : 7
var volatile bit    ADRESH_RES8               at ADRESH : 0
var volatile bit    ADRESH_RES9               at ADRESH : 1
var volatile bit    ADRESH_RES10              at ADRESH : 2
var volatile bit    ADRESH_RES11              at ADRESH : 3
var volatile bit    ADRESH_RES12              at ADRESH : 4
var volatile bit    ADRESH_RES13              at ADRESH : 5
var volatile bit    ADRESH_RES14              at ADRESH : 6
var volatile bit    ADRESH_RES15              at ADRESH : 7
-- ------------------------------------------------
var volatile byte   ADPCH                     at { 0x228 }
var volatile bit*6  ADPCH_PCH                 at ADPCH : 0
var volatile bit    ADPCH_ADPCH0              at ADPCH : 0
var volatile bit    ADPCH_ADPCH1              at ADPCH : 1
var volatile bit    ADPCH_ADPCH2              at ADPCH : 2
var volatile bit    ADPCH_ADPCH3              at ADPCH : 3
var volatile bit    ADPCH_ADPCH4              at ADPCH : 4
var volatile bit    ADPCH_ADPCH5              at ADPCH : 5
-- ------------------------------------------------
var volatile byte   ADNCH                     at { 0x229 }
var volatile bit*6  ADNCH_NCH                 at ADNCH : 0
var volatile bit    ADNCH_ADNCH0              at ADNCH : 0
var volatile bit    ADNCH_ADNCH1              at ADNCH : 1
var volatile bit    ADNCH_ADNCH2              at ADNCH : 2
var volatile bit    ADNCH_ADNCH3              at ADNCH : 3
var volatile bit    ADNCH_ADNCH4              at ADNCH : 4
var volatile bit    ADNCH_ADNCH5              at ADNCH : 5
-- ------------------------------------------------
var volatile word   ADACQ                     at { 0x22A }
-- ------------------------------------------------
var volatile byte   ADACQL                    at { 0x22A }
var volatile bit    ADACQL_ADACQ0             at ADACQL : 0
var volatile bit    ADACQL_ADACQ1             at ADACQL : 1
var volatile bit    ADACQL_ADACQ2             at ADACQL : 2
var volatile bit    ADACQL_ADACQ3             at ADACQL : 3
var volatile bit    ADACQL_ADACQ4             at ADACQL : 4
var volatile bit    ADACQL_ADACQ5             at ADACQL : 5
var volatile bit    ADACQL_ADACQ6             at ADACQL : 6
var volatile bit    ADACQL_ADACQ7             at ADACQL : 7
var volatile bit    ADACQL_ACQ0               at ADACQL : 0
var volatile bit    ADACQL_ACQ1               at ADACQL : 1
var volatile bit    ADACQL_ACQ2               at ADACQL : 2
var volatile bit    ADACQL_ACQ3               at ADACQL : 3
var volatile bit    ADACQL_ACQ4               at ADACQL : 4
var volatile bit    ADACQL_ACQ5               at ADACQL : 5
var volatile bit    ADACQL_ACQ6               at ADACQL : 6
var volatile bit    ADACQL_ACQ7               at ADACQL : 7
-- ------------------------------------------------
var volatile byte   ADACQH                    at { 0x22B }
var volatile bit*5  ADACQH_ACQ                at ADACQH : 0
var volatile bit    ADACQH_ADACQ8             at ADACQH : 0
var volatile bit    ADACQH_ADACQ9             at ADACQH : 1
var volatile bit    ADACQH_ADACQ10            at ADACQH : 2
var volatile bit    ADACQH_ADACQ11            at ADACQH : 3
var volatile bit    ADACQH_ADACQ12            at ADACQH : 4
var volatile bit*5  ADACQH_ADACQ              at ADACQH : 0
var volatile bit    ADACQH_ACQ8               at ADACQH : 0
var volatile bit    ADACQH_ACQ9               at ADACQH : 1
var volatile bit    ADACQH_ACQ10              at ADACQH : 2
var volatile bit    ADACQH_ACQ11              at ADACQH : 3
var volatile bit    ADACQH_ACQ12              at ADACQH : 4
-- ------------------------------------------------
var volatile byte   ADCAP                     at { 0x22C }
var volatile bit*5  ADCAP_CAP                 at ADCAP : 0
var volatile bit    ADCAP_ADCAP0              at ADCAP : 0
var volatile bit    ADCAP_ADCAP1              at ADCAP : 1
var volatile bit    ADCAP_ADCAP2              at ADCAP : 2
var volatile bit    ADCAP_ADCAP3              at ADCAP : 3
var volatile bit    ADCAP_ADCAP4              at ADCAP : 4
-- ------------------------------------------------
var volatile word   ADPRE                     at { 0x22D }
-- ------------------------------------------------
var volatile byte   ADPREL                    at { 0x22D }
var volatile bit    ADPREL_PRE0               at ADPREL : 0
var volatile bit    ADPREL_PRE1               at ADPREL : 1
var volatile bit    ADPREL_PRE2               at ADPREL : 2
var volatile bit    ADPREL_PRE3               at ADPREL : 3
var volatile bit    ADPREL_PRE4               at ADPREL : 4
var volatile bit    ADPREL_PRE5               at ADPREL : 5
var volatile bit    ADPREL_PRE6               at ADPREL : 6
var volatile bit    ADPREL_PRE7               at ADPREL : 7
var volatile bit    ADPREL_ADPRE0             at ADPREL : 0
var volatile bit    ADPREL_ADPRE1             at ADPREL : 1
var volatile bit    ADPREL_ADPRE2             at ADPREL : 2
var volatile bit    ADPREL_ADPRE3             at ADPREL : 3
var volatile bit    ADPREL_ADPRE4             at ADPREL : 4
var volatile bit    ADPREL_ADPRE5             at ADPREL : 5
var volatile bit    ADPREL_ADPRE6             at ADPREL : 6
var volatile bit    ADPREL_ADPRE7             at ADPREL : 7
-- ------------------------------------------------
var volatile byte   ADPREH                    at { 0x22E }
var volatile bit*5  ADPREH_PRE                at ADPREH : 0
var volatile bit    ADPREH_PRE8               at ADPREH : 0
var volatile bit    ADPREH_PRE9               at ADPREH : 1
var volatile bit    ADPREH_PRE10              at ADPREH : 2
var volatile bit    ADPREH_PRE11              at ADPREH : 3
var volatile bit    ADPREH_PRE12              at ADPREH : 4
var volatile bit*5  ADPREH_ADPRE              at ADPREH : 0
var volatile bit    ADPREH_ADPRE8             at ADPREH : 0
var volatile bit    ADPREH_ADPRE9             at ADPREH : 1
var volatile bit    ADPREH_ADPRE10            at ADPREH : 2
var volatile bit    ADPREH_ADPRE11            at ADPREH : 3
var volatile bit    ADPREH_ADPRE12            at ADPREH : 4
-- ------------------------------------------------
var volatile byte   ADCON0                    at { 0x22F }
var volatile bit    ADCON0_GO                 at ADCON0 : 0
var volatile bit*2  ADCON0_FM                 at ADCON0 : 2
var volatile bit    ADCON0_CS                 at ADCON0 : 4
var volatile bit    ADCON0_CONT               at ADCON0 : 6
var volatile bit    ADCON0_ON                 at ADCON0 : 7
var volatile bit    ADCON0_ADGO               at ADCON0 : 0
var volatile bit*2  ADCON0_ADFM               at ADCON0 : 2
var volatile bit    ADCON0_ADCS               at ADCON0 : 4
var volatile bit    ADCON0_ADCONT             at ADCON0 : 6
var volatile bit    ADCON0_ADON               at ADCON0 : 7
var volatile bit    ADCON0_DONE               at ADCON0 : 0
var volatile bit    ADCON0_FM0                at ADCON0 : 2
var volatile bit    ADCON0_GO_NDONE           at ADCON0 : 0
var volatile bit    ADCON0_ADFM0              at ADCON0 : 2
-- ------------------------------------------------
var volatile byte   ADCON1                    at { 0x230 }
var volatile bit    ADCON1_DSEN               at ADCON1 : 0
var volatile bit    ADCON1_PCSC               at ADCON1 : 1
var volatile bit    ADCON1_GPOL               at ADCON1 : 5
var volatile bit    ADCON1_IPEN               at ADCON1 : 6
var volatile bit    ADCON1_PPOL               at ADCON1 : 7
var volatile bit    ADCON1_ADDSEN             at ADCON1 : 0
var volatile bit    ADCON1_ADPCSC             at ADCON1 : 1
var volatile bit    ADCON1_ADGPOL             at ADCON1 : 5
var volatile bit    ADCON1_ADIPEN             at ADCON1 : 6
var volatile bit    ADCON1_ADPPOL             at ADCON1 : 7
-- ------------------------------------------------
var volatile byte   ADCON2                    at { 0x231 }
var volatile bit*3  ADCON2_MD                 at ADCON2 : 0
var volatile bit    ADCON2_ACLR               at ADCON2 : 3
var volatile bit*3  ADCON2_CRS                at ADCON2 : 4
var volatile bit    ADCON2_PSIS               at ADCON2 : 7
var volatile bit    ADCON2_ADMD0              at ADCON2 : 0
var volatile bit    ADCON2_ADMD1              at ADCON2 : 1
var volatile bit    ADCON2_ADMD2              at ADCON2 : 2
var volatile bit    ADCON2_ADACLR             at ADCON2 : 3
var volatile bit    ADCON2_ADCRS0             at ADCON2 : 4
var volatile bit    ADCON2_ADCRS1             at ADCON2 : 5
var volatile bit    ADCON2_ADCRS2             at ADCON2 : 6
var volatile bit    ADCON2_ADPSIS             at ADCON2 : 7
var volatile bit*3  ADCON2_ADMD               at ADCON2 : 0
var volatile bit*3  ADCON2_ADCRS              at ADCON2 : 4
var volatile bit    ADCON2_MD0                at ADCON2 : 0
var volatile bit    ADCON2_MD1                at ADCON2 : 1
var volatile bit    ADCON2_MD2                at ADCON2 : 2
var volatile bit    ADCON2_CRS0               at ADCON2 : 4
var volatile bit    ADCON2_CRS1               at ADCON2 : 5
var volatile bit    ADCON2_CRS2               at ADCON2 : 6
-- ------------------------------------------------
var volatile byte   ADCON3                    at { 0x232 }
var volatile bit*3  ADCON3_TMD                at ADCON3 : 0
var volatile bit    ADCON3_SOI                at ADCON3 : 3
var volatile bit*3  ADCON3_CALC               at ADCON3 : 4
var volatile bit    ADCON3_ADTMD0             at ADCON3 : 0
var volatile bit    ADCON3_ADTMD1             at ADCON3 : 1
var volatile bit    ADCON3_ADTMD2             at ADCON3 : 2
var volatile bit    ADCON3_ADSOI              at ADCON3 : 3
var volatile bit    ADCON3_ADCALC0            at ADCON3 : 4
var volatile bit    ADCON3_ADCALC1            at ADCON3 : 5
var volatile bit    ADCON3_ADCALC2            at ADCON3 : 6
var volatile bit*3  ADCON3_ADTMD              at ADCON3 : 0
var volatile bit*3  ADCON3_ADCALC             at ADCON3 : 4
var volatile bit    ADCON3_TMD0               at ADCON3 : 0
var volatile bit    ADCON3_TMD1               at ADCON3 : 1
var volatile bit    ADCON3_TMD2               at ADCON3 : 2
var volatile bit    ADCON3_CALC0              at ADCON3 : 4
var volatile bit    ADCON3_CALC1              at ADCON3 : 5
var volatile bit    ADCON3_CALC2              at ADCON3 : 6
-- ------------------------------------------------
var volatile byte   ADSTAT                    at { 0x233 }
var volatile bit*3  ADSTAT_STAT               at ADSTAT : 0
var volatile bit    ADSTAT_MATH               at ADSTAT : 4
var volatile bit    ADSTAT_LTHR               at ADSTAT : 5
var volatile bit    ADSTAT_UTHR               at ADSTAT : 6
var volatile bit    ADSTAT_AOV                at ADSTAT : 7
var volatile bit    ADSTAT_ADSTAT0            at ADSTAT : 0
var volatile bit    ADSTAT_ADSTAT1            at ADSTAT : 1
var volatile bit    ADSTAT_ADSTAT2            at ADSTAT : 2
var volatile bit    ADSTAT_ADMATH             at ADSTAT : 4
var volatile bit    ADSTAT_ADLTHR             at ADSTAT : 5
var volatile bit    ADSTAT_ADUTHR             at ADSTAT : 6
var volatile bit    ADSTAT_ADAOV              at ADSTAT : 7
var volatile bit*3  ADSTAT_ADSTAT             at ADSTAT : 0
var volatile bit    ADSTAT_ADOV               at ADSTAT : 7
var volatile bit    ADSTAT_STAT0              at ADSTAT : 0
var volatile bit    ADSTAT_STAT1              at ADSTAT : 1
var volatile bit    ADSTAT_STAT2              at ADSTAT : 2
var volatile bit    ADSTAT_OV                 at ADSTAT : 7
-- ------------------------------------------------
var volatile byte   ADREF                     at { 0x234 }
var volatile bit*4  ADREF_PREF                at ADREF : 0
var volatile bit*4  ADREF_NREF                at ADREF : 4
var volatile bit*4  ADREF_ADPREF              at ADREF : 0
var volatile bit*4  ADREF_ADNREF              at ADREF : 4
var volatile bit    ADREF_PREF0               at ADREF : 0
var volatile bit    ADREF_PREF1               at ADREF : 1
var volatile bit    ADREF_NREF0               at ADREF : 4
var volatile bit    ADREF_ADPREF0             at ADREF : 0
var volatile bit    ADREF_ADPREF1             at ADREF : 1
var volatile bit    ADREF_ADNREF0             at ADREF : 4
-- ------------------------------------------------
var volatile byte   ADACT                     at { 0x235 }
var volatile bit*6  ADACT_ACT                 at ADACT : 0
var volatile bit    ADACT_ADACT0              at ADACT : 0
var volatile bit    ADACT_ADACT1              at ADACT : 1
var volatile bit    ADACT_ADACT2              at ADACT : 2
var volatile bit    ADACT_ADACT3              at ADACT : 3
var volatile bit    ADACT_ADACT4              at ADACT : 4
var volatile bit    ADACT_ADACT5              at ADACT : 5
var volatile bit*6  ADACT_ADACT               at ADACT : 0
var volatile bit    ADACT_ACT0                at ADACT : 0
var volatile bit    ADACT_ACT1                at ADACT : 1
var volatile bit    ADACT_ACT2                at ADACT : 2
var volatile bit    ADACT_ACT3                at ADACT : 3
var volatile bit    ADACT_ACT4                at ADACT : 4
var volatile bit    ADACT_ACT5                at ADACT : 5
-- ------------------------------------------------
var volatile byte   ADCLK                     at { 0x236 }
var volatile bit*6  ADCLK_CS                  at ADCLK : 0
var volatile bit    ADCLK_ADCS0               at ADCLK : 0
var volatile bit    ADCLK_ADCS1               at ADCLK : 1
var volatile bit    ADCLK_ADCS2               at ADCLK : 2
var volatile bit    ADCLK_ADCS3               at ADCLK : 3
var volatile bit    ADCLK_ADCS4               at ADCLK : 4
var volatile bit    ADCLK_ADCS5               at ADCLK : 5
var volatile bit*6  ADCLK_ADCS                at ADCLK : 0
var volatile bit    ADCLK_CS0                 at ADCLK : 0
var volatile bit    ADCLK_CS1                 at ADCLK : 1
var volatile bit    ADCLK_CS2                 at ADCLK : 2
var volatile bit    ADCLK_CS3                 at ADCLK : 3
var volatile bit    ADCLK_CS4                 at ADCLK : 4
var volatile bit    ADCLK_CS5                 at ADCLK : 5
-- ------------------------------------------------
var volatile byte   ADCG1A                    at { 0x237 }
var volatile bit    ADCG1A_CGA0               at ADCG1A : 0
var volatile bit    ADCG1A_CGA1               at ADCG1A : 1
var volatile bit    ADCG1A_CGA2               at ADCG1A : 2
var volatile bit    ADCG1A_CGA4               at ADCG1A : 4
var volatile bit    ADCG1A_CGA5               at ADCG1A : 5
-- ------------------------------------------------
var volatile byte   ADCG1C                    at { 0x239 }
var volatile bit    ADCG1C_CGC0               at ADCG1C : 0
var volatile bit    ADCG1C_CGC1               at ADCG1C : 1
var volatile bit    ADCG1C_CGC3               at ADCG1C : 3
var volatile bit    ADCG1C_CGC4               at ADCG1C : 4
var volatile bit    ADCG1C_CGC5               at ADCG1C : 5
var volatile bit    ADCG1C_CGC6               at ADCG1C : 6
var volatile bit    ADCG1C_CGC7               at ADCG1C : 7
-- ------------------------------------------------
var volatile byte   PMD0                      at { 0x300 }
var volatile bit    PMD0_DMA1MD               at PMD0 : 0
var volatile bit    PMD0_DMA2MD               at PMD0 : 1
var volatile bit    PMD0_DMA3MD               at PMD0 : 2
var volatile bit    PMD0_DMA4MD               at PMD0 : 3
var volatile bit    PMD0_CRCMD                at PMD0 : 5
var volatile bit    PMD0_SCANMD               at PMD0 : 6
var volatile bit    PMD0_SYSCMD               at PMD0 : 7
-- ------------------------------------------------
var volatile byte   PMD1                      at { 0x301 }
var volatile bit    PMD1_ACTMD                at PMD1 : 0
var volatile bit    PMD1_PORTWMD              at PMD1 : 1
var volatile bit    PMD1_IOCMD                at PMD1 : 2
var volatile bit    PMD1_CLKRMD               at PMD1 : 3
var volatile bit    PMD1_TMR0MD               at PMD1 : 4
var volatile bit    PMD1_TMR1MD               at PMD1 : 5
var volatile bit    PMD1_TMR2MD               at PMD1 : 6
var volatile bit    PMD1_TMR4MD               at PMD1 : 7
-- ------------------------------------------------
var volatile byte   PMD2                      at { 0x302 }
var volatile bit    PMD2_TU16AMD              at PMD2 : 0
var volatile bit    PMD2_TU16BMD              at PMD2 : 1
var volatile bit    PMD2_CCP1MD               at PMD2 : 2
var volatile bit    PMD2_CCP2MD               at PMD2 : 3
var volatile bit    PMD2_PWM1MD               at PMD2 : 4
var volatile bit    PMD2_PWM2MD               at PMD2 : 5
var volatile bit    PMD2_CWG1MD               at PMD2 : 6
var volatile bit    PMD2_CLC1MD               at PMD2 : 7
-- ------------------------------------------------
var volatile byte   PMD3                      at { 0x303 }
var volatile bit    PMD3_CLC2MD               at PMD3 : 0
var volatile bit    PMD3_CLC3MD               at PMD3 : 1
var volatile bit    PMD3_CLC4MD               at PMD3 : 2
var volatile bit    PMD3_U1MD                 at PMD3 : 3
var volatile bit    PMD3_U2MD                 at PMD3 : 4
var volatile bit    PMD3_SPI1MD               at PMD3 : 5
var volatile bit    PMD3_I2C1MD               at PMD3 : 6
var volatile bit    PMD3_I3C1MD               at PMD3 : 7
-- ------------------------------------------------
var volatile byte   PMD4                      at { 0x304 }
var volatile bit    PMD4_FVRMD                at PMD4 : 1
var volatile bit    PMD4_HLVDMD               at PMD4 : 2
var volatile bit    PMD4_ADCMD                at PMD4 : 3
-- ------------------------------------------------
var volatile byte   RC0FEAT                   at { 0x312 }
var volatile bit*3  RC0FEAT_SYSBUF            at RC0FEAT : 0
var volatile bit*3  RC0FEAT_I3CBUF            at RC0FEAT : 3
var volatile bit*2  RC0FEAT_SLEW              at RC0FEAT : 6
-- ------------------------------------------------
var volatile byte   RC1FEAT                   at { 0x313 }
var volatile bit*3  RC1FEAT_SYSBUF            at RC1FEAT : 0
var volatile bit*3  RC1FEAT_I3CBUF            at RC1FEAT : 3
var volatile bit*2  RC1FEAT_SLEW              at RC1FEAT : 6
-- ------------------------------------------------
var volatile byte   RC4FEAT                   at { 0x315 }
var volatile bit*2  RC4FEAT_SYSBUF            at RC4FEAT : 0
var volatile bit*2  RC4FEAT_SLEW              at RC4FEAT : 6
-- ------------------------------------------------
var volatile byte   RC5FEAT                   at { 0x316 }
var volatile bit*2  RC5FEAT_SYSBUF            at RC5FEAT : 0
var volatile bit*2  RC5FEAT_SLEW              at RC5FEAT : 6
-- ------------------------------------------------
var volatile byte   RA0PPS                    at { 0x319 }
-- ------------------------------------------------
var volatile byte   RA1PPS                    at { 0x31A }
-- ------------------------------------------------
var volatile byte   RA2PPS                    at { 0x31B }
-- ------------------------------------------------
var volatile byte   RA4PPS                    at { 0x31D }
-- ------------------------------------------------
var volatile byte   RA5PPS                    at { 0x31E }
-- ------------------------------------------------
var volatile byte   RC0PPS                    at { 0x329 }
-- ------------------------------------------------
var volatile byte   RC1PPS                    at { 0x32A }
-- ------------------------------------------------
var volatile byte   RC3PPS                    at { 0x32C }
-- ------------------------------------------------
var volatile byte   RC4PPS                    at { 0x32D }
-- ------------------------------------------------
var volatile byte   RC5PPS                    at { 0x32E }
-- ------------------------------------------------
var volatile byte   PPSLOCK                   at { 0x351 }
var volatile bit    PPSLOCK_PPSLOCKED         at PPSLOCK : 0
-- ------------------------------------------------
var volatile byte   INT0PPS                   at { 0x352 }
-- ------------------------------------------------
var volatile byte   INT1PPS                   at { 0x353 }
-- ------------------------------------------------
var volatile byte   INT2PPS                   at { 0x354 }
-- ------------------------------------------------
var volatile byte   T0CKIPPS                  at { 0x355 }
-- ------------------------------------------------
var volatile byte   T1CKIPPS                  at { 0x356 }
-- ------------------------------------------------
var volatile byte   T1GPPS                    at { 0x357 }
-- ------------------------------------------------
var volatile byte   T2INPPS                   at { 0x360 }
-- ------------------------------------------------
var volatile byte   T4INPPS                   at { 0x361 }
-- ------------------------------------------------
var volatile byte   TUIN0PPS                  at { 0x365 }
-- ------------------------------------------------
var volatile byte   TUIN1PPS                  at { 0x366 }
-- ------------------------------------------------
var volatile byte   CCP1PPS                   at { 0x369 }
-- ------------------------------------------------
var volatile byte   CCP2PPS                   at { 0x36A }
-- ------------------------------------------------
var volatile byte   STATUS_CSHAD              at { 0x373 }
var volatile bit    STATUS_CSHAD_C            at STATUS_CSHAD : 0
var volatile bit    STATUS_CSHAD_DC           at STATUS_CSHAD : 1
var volatile bit    STATUS_CSHAD_Z            at STATUS_CSHAD : 2
var volatile bit    STATUS_CSHAD_OV           at STATUS_CSHAD : 3
var volatile bit    STATUS_CSHAD_N            at STATUS_CSHAD : 4
var volatile bit    STATUS_CSHAD_NPD          at STATUS_CSHAD : 5
var volatile bit    STATUS_CSHAD_NTO          at STATUS_CSHAD : 6
var volatile bit    STATUS_CSHAD_PD           at STATUS_CSHAD : 5
var volatile bit    STATUS_CSHAD_TO           at STATUS_CSHAD : 6
-- ------------------------------------------------
var volatile byte   WREG_CSHAD                at { 0x374 }
-- ------------------------------------------------
var volatile byte   BSR_CSHAD                 at { 0x375 }
var volatile bit*6  BSR_CSHAD_BSR             at BSR_CSHAD : 0
-- ------------------------------------------------
var volatile byte   SHADCON                   at { 0x376 }
var volatile bit    SHADCON_SHADLO            at SHADCON : 0
-- ------------------------------------------------
var volatile byte   STATUS_SHAD               at { 0x377 }
var volatile bit    STATUS_SHAD_C             at STATUS_SHAD : 0
var volatile bit    STATUS_SHAD_DC            at STATUS_SHAD : 1
var volatile bit    STATUS_SHAD_Z             at STATUS_SHAD : 2
var volatile bit    STATUS_SHAD_OV            at STATUS_SHAD : 3
var volatile bit    STATUS_SHAD_N             at STATUS_SHAD : 4
var volatile bit    STATUS_SHAD_NPD           at STATUS_SHAD : 5
var volatile bit    STATUS_SHAD_NTO           at STATUS_SHAD : 6
var volatile bit    STATUS_SHAD_PD            at STATUS_SHAD : 5
var volatile bit    STATUS_SHAD_TO            at STATUS_SHAD : 6
-- ------------------------------------------------
var volatile byte   WREG_SHAD                 at { 0x378 }
-- ------------------------------------------------
var volatile byte   BSR_SHAD                  at { 0x379 }
var volatile bit*6  BSR_SHAD_BSR              at BSR_SHAD : 0
-- ------------------------------------------------
var volatile word   PCLAT_SHAD                at { 0x37A }
-- ------------------------------------------------
var volatile byte   PCLATH_SHAD               at { 0x37A }
-- ------------------------------------------------
var volatile byte   PCLATU_SHAD               at { 0x37B }
var volatile bit*5  PCLATU_SHAD_PCU           at PCLATU_SHAD : 0
-- ------------------------------------------------
var volatile word   FSR0_SHAD                 at { 0x37C }
-- ------------------------------------------------
var volatile byte   FSR0L_SHAD                at { 0x37C }
-- ------------------------------------------------
var volatile byte   FSR0H_SHAD                at { 0x37D }
var volatile bit*6  FSR0H_SHAD_FSR0H          at FSR0H_SHAD : 0
-- ------------------------------------------------
var volatile word   FSR1_SHAD                 at { 0x37E }
-- ------------------------------------------------
var volatile byte   FSR1L_SHAD                at { 0x37E }
-- ------------------------------------------------
var volatile byte   FSR1H_SHAD                at { 0x37F }
var volatile bit*6  FSR1H_SHAD_FSR1H          at FSR1H_SHAD : 0
-- ------------------------------------------------
var volatile word   FSR2_SHAD                 at { 0x380 }
-- ------------------------------------------------
var volatile byte   FSR2L_SHAD                at { 0x380 }
-- ------------------------------------------------
var volatile byte   FSR2H_SHAD                at { 0x381 }
var volatile bit*6  FSR2H_SHAD_FSR2H          at FSR2H_SHAD : 0
-- ------------------------------------------------
var volatile word   PROD_SHAD                 at { 0x382 }
-- ------------------------------------------------
var volatile byte   PRODL_SHAD                at { 0x382 }
-- ------------------------------------------------
var volatile byte   PRODH_SHAD                at { 0x383 }
-- ------------------------------------------------
var volatile byte   PWMIN0PPS                 at { 0x384 }
-- ------------------------------------------------
var volatile byte   PWMIN1PPS                 at { 0x385 }
-- ------------------------------------------------
var volatile byte   PWM1ERSPPS                at { 0x386 }
-- ------------------------------------------------
var volatile byte   PWM2ERSPPS                at { 0x387 }
-- ------------------------------------------------
var volatile byte   CWG1PPS                   at { 0x399 }
-- ------------------------------------------------
var volatile byte   CLCIN0PPS                 at { 0x39D }
-- ------------------------------------------------
var volatile byte   CLCIN1PPS                 at { 0x39E }
-- ------------------------------------------------
var volatile byte   CLCIN2PPS                 at { 0x39F }
-- ------------------------------------------------
var volatile byte   CLCIN3PPS                 at { 0x3A0 }
-- ------------------------------------------------
var volatile byte   U1CTSPPS                  at { 0x3A1 }
-- ------------------------------------------------
var volatile byte   U1RXPPS                   at { 0x3A2 }
-- ------------------------------------------------
var volatile byte   U2CTSPPS                  at { 0x3A3 }
-- ------------------------------------------------
var volatile byte   U2RXPPS                   at { 0x3A4 }
-- ------------------------------------------------
var volatile byte   SPI1SCKPPS                at { 0x3A7 }
-- ------------------------------------------------
var volatile byte   SPI1SDIPPS                at { 0x3A8 }
-- ------------------------------------------------
var volatile byte   SPI1SSPPS                 at { 0x3A9 }
-- ------------------------------------------------
var volatile byte   I2C1SCLPPS                at { 0x3AD }
-- ------------------------------------------------
var volatile byte   I2C1SDAPPS                at { 0x3AE }
-- ------------------------------------------------
var volatile byte   ADACTPPS                  at { 0x3B1 }
-- ------------------------------------------------
var volatile byte   ANSELA                    at { 0x416 }
var volatile bit    ANSELA_ANSELA0            at ANSELA : 0
var volatile bit    ANSELA_ANSELA1            at ANSELA : 1
var volatile bit    ANSELA_ANSELA2            at ANSELA : 2
var volatile bit    ANSELA_ANSELA4            at ANSELA : 4
var volatile bit    ANSELA_ANSELA5            at ANSELA : 5
-- ------------------------------------------------
var volatile byte   WPUA                      at { 0x417 }
var volatile bit    WPUA_WPUA0                at WPUA : 0
var volatile bit    WPUA_WPUA1                at WPUA : 1
var volatile bit    WPUA_WPUA2                at WPUA : 2
var volatile bit    WPUA_WPUA3                at WPUA : 3
var volatile bit    WPUA_WPUA4                at WPUA : 4
var volatile bit    WPUA_WPUA5                at WPUA : 5
-- ------------------------------------------------
var volatile byte   ODCONA                    at { 0x418 }
var volatile bit    ODCONA_ODCA0              at ODCONA : 0
var volatile bit    ODCONA_ODCA1              at ODCONA : 1
var volatile bit    ODCONA_ODCA2              at ODCONA : 2
var volatile bit    ODCONA_ODCA4              at ODCONA : 4
var volatile bit    ODCONA_ODCA5              at ODCONA : 5
-- ------------------------------------------------
var volatile byte   SLRCONA                   at { 0x419 }
var volatile bit    SLRCONA_SLRA0             at SLRCONA : 0
var volatile bit    SLRCONA_SLRA1             at SLRCONA : 1
var volatile bit    SLRCONA_SLRA2             at SLRCONA : 2
var volatile bit    SLRCONA_SLRA4             at SLRCONA : 4
var volatile bit    SLRCONA_SLRA5             at SLRCONA : 5
-- ------------------------------------------------
var volatile byte   INLVLA                    at { 0x41A }
var volatile bit    INLVLA_INLVLA0            at INLVLA : 0
var volatile bit    INLVLA_INLVLA1            at INLVLA : 1
var volatile bit    INLVLA_INLVLA2            at INLVLA : 2
var volatile bit    INLVLA_INLVLA3            at INLVLA : 3
var volatile bit    INLVLA_INLVLA4            at INLVLA : 4
var volatile bit    INLVLA_INLVLA5            at INLVLA : 5
-- ------------------------------------------------
var volatile byte   IOCAP                     at { 0x41B }
var volatile bit    IOCAP_IOCAP0              at IOCAP : 0
var volatile bit    IOCAP_IOCAP1              at IOCAP : 1
var volatile bit    IOCAP_IOCAP2              at IOCAP : 2
var volatile bit    IOCAP_IOCAP3              at IOCAP : 3
var volatile bit    IOCAP_IOCAP4              at IOCAP : 4
var volatile bit    IOCAP_IOCAP5              at IOCAP : 5
-- ------------------------------------------------
var volatile byte   IOCAN                     at { 0x41C }
var volatile bit    IOCAN_IOCAN0              at IOCAN : 0
var volatile bit    IOCAN_IOCAN1              at IOCAN : 1
var volatile bit    IOCAN_IOCAN2              at IOCAN : 2
var volatile bit    IOCAN_IOCAN3              at IOCAN : 3
var volatile bit    IOCAN_IOCAN4              at IOCAN : 4
var volatile bit    IOCAN_IOCAN5              at IOCAN : 5
-- ------------------------------------------------
var volatile byte   IOCAF                     at { 0x41D }
var volatile bit    IOCAF_IOCAF0              at IOCAF : 0
var volatile bit    IOCAF_IOCAF1              at IOCAF : 1
var volatile bit    IOCAF_IOCAF2              at IOCAF : 2
var volatile bit    IOCAF_IOCAF3              at IOCAF : 3
var volatile bit    IOCAF_IOCAF4              at IOCAF : 4
var volatile bit    IOCAF_IOCAF5              at IOCAF : 5
-- ------------------------------------------------
var volatile byte   ANSELC                    at { 0x42A }
var volatile bit    ANSELC_ANSELC3            at ANSELC : 3
var volatile bit    ANSELC_ANSELC4            at ANSELC : 4
var volatile bit    ANSELC_ANSELC5            at ANSELC : 5
var volatile bit    ANSELC_ANSELC6            at ANSELC : 6
var volatile bit    ANSELC_ANSELC7            at ANSELC : 7
-- ------------------------------------------------
var volatile byte   WPUC                      at { 0x42B }
var volatile bit    WPUC_WPUC0                at WPUC : 0
var volatile bit    WPUC_WPUC1                at WPUC : 1
var volatile bit    WPUC_WPUC3                at WPUC : 3
var volatile bit    WPUC_WPUC4                at WPUC : 4
var volatile bit    WPUC_WPUC5                at WPUC : 5
var volatile bit    WPUC_WPUC6                at WPUC : 6
var volatile bit    WPUC_WPUC7                at WPUC : 7
-- ------------------------------------------------
var volatile byte   ODCONC                    at { 0x42C }
var volatile bit    ODCONC_ODCC0              at ODCONC : 0
var volatile bit    ODCONC_ODCC1              at ODCONC : 1
var volatile bit    ODCONC_ODCC3              at ODCONC : 3
var volatile bit    ODCONC_ODCC4              at ODCONC : 4
var volatile bit    ODCONC_ODCC5              at ODCONC : 5
var volatile bit    ODCONC_ODCC6              at ODCONC : 6
var volatile bit    ODCONC_ODCC7              at ODCONC : 7
-- ------------------------------------------------
var volatile byte   SLRCONC                   at { 0x42D }
var volatile bit    SLRCONC_SLRC0             at SLRCONC : 0
var volatile bit    SLRCONC_SLRC1             at SLRCONC : 1
var volatile bit    SLRCONC_SLRC3             at SLRCONC : 3
var volatile bit    SLRCONC_SLRC4             at SLRCONC : 4
var volatile bit    SLRCONC_SLRC5             at SLRCONC : 5
var volatile bit    SLRCONC_SLRC6             at SLRCONC : 6
var volatile bit    SLRCONC_SLRC7             at SLRCONC : 7
-- ------------------------------------------------
var volatile byte   INLVLC                    at { 0x42E }
var volatile bit    INLVLC_INLVLC0            at INLVLC : 0
var volatile bit    INLVLC_INLVLC1            at INLVLC : 1
var volatile bit    INLVLC_INLVLC3            at INLVLC : 3
var volatile bit    INLVLC_INLVLC4            at INLVLC : 4
var volatile bit    INLVLC_INLVLC5            at INLVLC : 5
var volatile bit    INLVLC_INLVLC6            at INLVLC : 6
var volatile bit    INLVLC_INLVLC7            at INLVLC : 7
-- ------------------------------------------------
var volatile byte   IOCCP                     at { 0x42F }
var volatile bit    IOCCP_IOCCP0              at IOCCP : 0
var volatile bit    IOCCP_IOCCP1              at IOCCP : 1
var volatile bit    IOCCP_IOCCP3              at IOCCP : 3
var volatile bit    IOCCP_IOCCP4              at IOCCP : 4
var volatile bit    IOCCP_IOCCP5              at IOCCP : 5
var volatile bit    IOCCP_IOCCP6              at IOCCP : 6
var volatile bit    IOCCP_IOCCP7              at IOCCP : 7
-- ------------------------------------------------
var volatile byte   IOCCN                     at { 0x430 }
var volatile bit    IOCCN_IOCCN0              at IOCCN : 0
var volatile bit    IOCCN_IOCCN1              at IOCCN : 1
var volatile bit    IOCCN_IOCCN3              at IOCCN : 3
var volatile bit    IOCCN_IOCCN4              at IOCCN : 4
var volatile bit    IOCCN_IOCCN5              at IOCCN : 5
var volatile bit    IOCCN_IOCCN6              at IOCCN : 6
var volatile bit    IOCCN_IOCCN7              at IOCCN : 7
-- ------------------------------------------------
var volatile byte   IOCCF                     at { 0x431 }
var volatile bit    IOCCF_IOCCF0              at IOCCF : 0
var volatile bit    IOCCF_IOCCF1              at IOCCF : 1
var volatile bit    IOCCF_IOCCF3              at IOCCF : 3
var volatile bit    IOCCF_IOCCF4              at IOCCF : 4
var volatile bit    IOCCF_IOCCF5              at IOCCF : 5
var volatile bit    IOCCF_IOCCF6              at IOCCF : 6
var volatile bit    IOCCF_IOCCF7              at IOCCF : 7
-- ------------------------------------------------
var volatile byte   IOCWP                     at { 0x457 }
var volatile bit    IOCWP_IOCWP0              at IOCWP : 0
var volatile bit    IOCWP_IOCWP1              at IOCWP : 1
var volatile bit    IOCWP_IOCWP2              at IOCWP : 2
var volatile bit    IOCWP_IOCWP3              at IOCWP : 3
var volatile bit    IOCWP_IOCWP4              at IOCWP : 4
var volatile bit    IOCWP_IOCWP5              at IOCWP : 5
var volatile bit    IOCWP_IOCWP6              at IOCWP : 6
var volatile bit    IOCWP_IOCWP7              at IOCWP : 7
-- ------------------------------------------------
var volatile byte   IOCWN                     at { 0x458 }
var volatile bit    IOCWN_IOCWN0              at IOCWN : 0
var volatile bit    IOCWN_IOCWN1              at IOCWN : 1
var volatile bit    IOCWN_IOCWN2              at IOCWN : 2
var volatile bit    IOCWN_IOCWN3              at IOCWN : 3
var volatile bit    IOCWN_IOCWN4              at IOCWN : 4
var volatile bit    IOCWN_IOCWN5              at IOCWN : 5
var volatile bit    IOCWN_IOCWN6              at IOCWN : 6
var volatile bit    IOCWN_IOCWN7              at IOCWN : 7
-- ------------------------------------------------
var volatile byte   IOCWF                     at { 0x459 }
var volatile bit    IOCWF_IOCWF0              at IOCWF : 0
var volatile bit    IOCWF_IOCWF1              at IOCWF : 1
var volatile bit    IOCWF_IOCWF2              at IOCWF : 2
var volatile bit    IOCWF_IOCWF3              at IOCWF : 3
var volatile bit    IOCWF_IOCWF4              at IOCWF : 4
var volatile bit    IOCWF_IOCWF5              at IOCWF : 5
var volatile bit    IOCWF_IOCWF6              at IOCWF : 6
var volatile bit    IOCWF_IOCWF7              at IOCWF : 7
-- ------------------------------------------------
var volatile byte   IVTLOCK                   at { 0x460 }
var volatile bit    IVTLOCK_IVTLOCKED         at IVTLOCK : 0
-- ------------------------------------------------
var volatile byte   INTCON0                   at { 0x461 }
var volatile bit    INTCON0_INT0EDG           at INTCON0 : 0
var volatile bit    INTCON0_INT1EDG           at INTCON0 : 1
var volatile bit    INTCON0_INT2EDG           at INTCON0 : 2
var volatile bit    INTCON0_IPEN              at INTCON0 : 5
var volatile bit    INTCON0_GIEL              at INTCON0 : 6
var volatile bit    INTCON0_GIE               at INTCON0 : 7
var volatile bit    INTCON0_GIEH              at INTCON0 : 7
-- ------------------------------------------------
var volatile byte   INTCON1                   at { 0x462 }
var volatile bit*2  INTCON1_STAT              at INTCON1 : 6
var volatile bit    INTCON1_STAT0             at INTCON1 : 6
var volatile bit    INTCON1_STAT1             at INTCON1 : 7
-- ------------------------------------------------
var volatile byte*3 IVTAD                     at { 0x463 }
-- ------------------------------------------------
var volatile byte   IVTADL                    at { 0x463 }
-- ------------------------------------------------
var volatile byte   IVTADH                    at { 0x464 }
-- ------------------------------------------------
var volatile byte   IVTADU                    at { 0x465 }
var volatile bit*5  IVTADU_IVTADU             at IVTADU : 0
-- ------------------------------------------------
var volatile byte*3 IVTBASE                   at { 0x466 }
-- ------------------------------------------------
var volatile byte   IVTBASEL                  at { 0x466 }
-- ------------------------------------------------
var volatile byte   IVTBASEH                  at { 0x467 }
-- ------------------------------------------------
var volatile byte   IVTBASEU                  at { 0x468 }
var volatile bit*5  IVTBASEU_IVTBASEU         at IVTBASEU : 0
-- ------------------------------------------------
var volatile byte   PIR0                      at { 0x469 }
var volatile bit    PIR0_SWIF                 at PIR0 : 0
var volatile bit    PIR0_INT0IF               at PIR0 : 1
var volatile bit    PIR0_INT1IF               at PIR0 : 2
var volatile bit    PIR0_INT2IF               at PIR0 : 3
var volatile bit    PIR0_DMA1SCNTIF           at PIR0 : 4
var volatile bit    PIR0_DMA1DCNTIF           at PIR0 : 5
var volatile bit    PIR0_DMA1ORIF             at PIR0 : 6
var volatile bit    PIR0_DMA1AIF              at PIR0 : 7
-- ------------------------------------------------
var volatile byte   PIR1                      at { 0x46A }
var volatile bit    PIR1_DMA2SCNTIF           at PIR1 : 0
var volatile bit    PIR1_DMA2DCNTIF           at PIR1 : 1
var volatile bit    PIR1_DMA2ORIF             at PIR1 : 2
var volatile bit    PIR1_DMA2AIF              at PIR1 : 3
var volatile bit    PIR1_DMA3SCNTIF           at PIR1 : 4
var volatile bit    PIR1_DMA3DCNTIF           at PIR1 : 5
var volatile bit    PIR1_DMA3ORIF             at PIR1 : 6
var volatile bit    PIR1_DMA3AIF              at PIR1 : 7
-- ------------------------------------------------
var volatile byte   PIR2                      at { 0x46B }
var volatile bit    PIR2_DMA4SCNTIF           at PIR2 : 0
var volatile bit    PIR2_DMA4DCNTIF           at PIR2 : 1
var volatile bit    PIR2_DMA4ORIF             at PIR2 : 2
var volatile bit    PIR2_DMA4AIF              at PIR2 : 3
var volatile bit    PIR2_NVMIF                at PIR2 : 4
var volatile bit    PIR2_CRCIF                at PIR2 : 5
var volatile bit    PIR2_SCANIF               at PIR2 : 6
var volatile bit    PIR2_ACTIF                at PIR2 : 7
-- ------------------------------------------------
var volatile byte   PIR3                      at { 0x46C }
var volatile bit    PIR3_CSWIF                at PIR3 : 0
var volatile bit    PIR3_OSFIF                at PIR3 : 1
var volatile bit    PIR3_VDDIO2IF             at PIR3 : 2
var volatile bit    PIR3_IOCIF                at PIR3 : 4
var volatile bit    PIR3_TMR0IF               at PIR3 : 5
var volatile bit    PIR3_TMR1IF               at PIR3 : 6
var volatile bit    PIR3_TMR1GIF              at PIR3 : 7
-- ------------------------------------------------
var volatile byte   PIR4                      at { 0x46D }
var volatile bit    PIR4_TMR2IF               at PIR4 : 0
var volatile bit    PIR4_TMR4IF               at PIR4 : 1
var volatile bit    PIR4_TU16AIF              at PIR4 : 2
var volatile bit    PIR4_TU16BIF              at PIR4 : 3
var volatile bit    PIR4_CCP1IF               at PIR4 : 4
alias               PIR4_CCPIF                is PIR4_CCP1IF
var volatile bit    PIR4_CCP2IF               at PIR4 : 5
var volatile bit    PIR4_PWM1PIF              at PIR4 : 6
var volatile bit    PIR4_PWM1IF               at PIR4 : 7
-- ------------------------------------------------
var volatile byte   PIR5                      at { 0x46E }
var volatile bit    PIR5_PWM2PIF              at PIR5 : 0
var volatile bit    PIR5_PWM2IF               at PIR5 : 1
var volatile bit    PIR5_CWG1IF               at PIR5 : 2
var volatile bit    PIR5_CLC1IF               at PIR5 : 3
var volatile bit    PIR5_CLC2IF               at PIR5 : 4
var volatile bit    PIR5_CLC3IF               at PIR5 : 5
var volatile bit    PIR5_CLC4IF               at PIR5 : 6
var volatile bit    PIR5_IOCSRIF              at PIR5 : 7
-- ------------------------------------------------
var volatile byte   PIR6                      at { 0x46F }
var volatile bit    PIR6_U1RXIF               at PIR6 : 0
var volatile bit    PIR6_U1TXIF               at PIR6 : 1
var volatile bit    PIR6_U1IF                 at PIR6 : 2
var volatile bit    PIR6_U1EIF                at PIR6 : 3
var volatile bit    PIR6_U2RXIF               at PIR6 : 4
var volatile bit    PIR6_U2TXIF               at PIR6 : 5
var volatile bit    PIR6_U2IF                 at PIR6 : 6
var volatile bit    PIR6_U2EIF                at PIR6 : 7
-- ------------------------------------------------
var volatile byte   PIR7                      at { 0x470 }
var volatile bit    PIR7_SPI1RXIF             at PIR7 : 0
var volatile bit    PIR7_SPI1TXIF             at PIR7 : 1
var volatile bit    PIR7_SPI1IF               at PIR7 : 2
var volatile bit    PIR7_I2C1RXIF             at PIR7 : 3
var volatile bit    PIR7_I2C1TXIF             at PIR7 : 4
var volatile bit    PIR7_I2C1IF               at PIR7 : 5
var volatile bit    PIR7_I2C1EIF              at PIR7 : 6
-- ------------------------------------------------
var volatile byte   PIR8                      at { 0x471 }
var volatile bit    PIR8_I3C1RXIF             at PIR8 : 0
var volatile bit    PIR8_I3C1TXIF             at PIR8 : 1
var volatile bit    PIR8_I3C1IF               at PIR8 : 2
var volatile bit    PIR8_I3C1EIF              at PIR8 : 3
var volatile bit    PIR8_I3C1RIF              at PIR8 : 4
-- ------------------------------------------------
var volatile byte   PIR9                      at { 0x472 }
var volatile bit    PIR9_HLVDIF               at PIR9 : 5
var volatile bit    PIR9_ADIF                 at PIR9 : 6
var volatile bit    PIR9_ADTIF                at PIR9 : 7
-- ------------------------------------------------
var volatile byte   PIE0                      at { 0x473 }
var volatile bit    PIE0_SWIE                 at PIE0 : 0
var volatile bit    PIE0_INT0IE               at PIE0 : 1
var volatile bit    PIE0_INT1IE               at PIE0 : 2
var volatile bit    PIE0_INT2IE               at PIE0 : 3
var volatile bit    PIE0_DMA1SCNTIE           at PIE0 : 4
var volatile bit    PIE0_DMA1DCNTIE           at PIE0 : 5
var volatile bit    PIE0_DMA1ORIE             at PIE0 : 6
var volatile bit    PIE0_DMA1AIE              at PIE0 : 7
-- ------------------------------------------------
var volatile byte   PIE1                      at { 0x474 }
var volatile bit    PIE1_DMA2SCNTIE           at PIE1 : 0
var volatile bit    PIE1_DMA2DCNTIE           at PIE1 : 1
var volatile bit    PIE1_DMA2ORIE             at PIE1 : 2
var volatile bit    PIE1_DMA2AIE              at PIE1 : 3
var volatile bit    PIE1_DMA3SCNTIE           at PIE1 : 4
var volatile bit    PIE1_DMA3DCNTIE           at PIE1 : 5
var volatile bit    PIE1_DMA3ORIE             at PIE1 : 6
var volatile bit    PIE1_DMA3AIE              at PIE1 : 7
-- ------------------------------------------------
var volatile byte   PIE2                      at { 0x475 }
var volatile bit    PIE2_DMA4SCNTIE           at PIE2 : 0
var volatile bit    PIE2_DMA4DCNTIE           at PIE2 : 1
var volatile bit    PIE2_DMA4ORIE             at PIE2 : 2
var volatile bit    PIE2_DMA4AIE              at PIE2 : 3
var volatile bit    PIE2_NVMIE                at PIE2 : 4
var volatile bit    PIE2_CRCIE                at PIE2 : 5
var volatile bit    PIE2_SCANIE               at PIE2 : 6
var volatile bit    PIE2_ACTIE                at PIE2 : 7
-- ------------------------------------------------
var volatile byte   PIE3                      at { 0x476 }
var volatile bit    PIE3_CSWIE                at PIE3 : 0
var volatile bit    PIE3_OSFIE                at PIE3 : 1
var volatile bit    PIE3_VDDIO2IE             at PIE3 : 2
var volatile bit    PIE3_IOCIE                at PIE3 : 4
var volatile bit    PIE3_TMR0IE               at PIE3 : 5
var volatile bit    PIE3_TMR1IE               at PIE3 : 6
var volatile bit    PIE3_TMR1GIE              at PIE3 : 7
-- ------------------------------------------------
var volatile byte   PIE4                      at { 0x477 }
var volatile bit    PIE4_TMR2IE               at PIE4 : 0
var volatile bit    PIE4_TMR4IE               at PIE4 : 1
var volatile bit    PIE4_TU16AIE              at PIE4 : 2
var volatile bit    PIE4_TU16BIE              at PIE4 : 3
var volatile bit    PIE4_CCP1IE               at PIE4 : 4
alias               PIE4_CCPIE                is PIE4_CCP1IE
var volatile bit    PIE4_CCP2IE               at PIE4 : 5
var volatile bit    PIE4_PWM1PIE              at PIE4 : 6
var volatile bit    PIE4_PWM1IE               at PIE4 : 7
-- ------------------------------------------------
var volatile byte   PIE5                      at { 0x478 }
var volatile bit    PIE5_PWM2PIE              at PIE5 : 0
var volatile bit    PIE5_PWM2IE               at PIE5 : 1
var volatile bit    PIE5_CWG1IE               at PIE5 : 2
var volatile bit    PIE5_CLC1IE               at PIE5 : 3
var volatile bit    PIE5_CLC2IE               at PIE5 : 4
var volatile bit    PIE5_CLC3IE               at PIE5 : 5
var volatile bit    PIE5_CLC4IE               at PIE5 : 6
var volatile bit    PIE5_IOCSRIE              at PIE5 : 7
-- ------------------------------------------------
var volatile byte   PIE6                      at { 0x479 }
var volatile bit    PIE6_U1RXIE               at PIE6 : 0
var volatile bit    PIE6_U1TXIE               at PIE6 : 1
var volatile bit    PIE6_U1IE                 at PIE6 : 2
var volatile bit    PIE6_U1EIE                at PIE6 : 3
var volatile bit    PIE6_U2RXIE               at PIE6 : 4
var volatile bit    PIE6_U2TXIE               at PIE6 : 5
var volatile bit    PIE6_U2IE                 at PIE6 : 6
var volatile bit    PIE6_U2EIE                at PIE6 : 7
-- ------------------------------------------------
var volatile byte   PIE7                      at { 0x47A }
var volatile bit    PIE7_SPI1RXIE             at PIE7 : 0
var volatile bit    PIE7_SPI1TXIE             at PIE7 : 1
var volatile bit    PIE7_SPI1IE               at PIE7 : 2
var volatile bit    PIE7_I2C1RXIE             at PIE7 : 3
var volatile bit    PIE7_I2C1TXIE             at PIE7 : 4
var volatile bit    PIE7_I2C1IE               at PIE7 : 5
var volatile bit    PIE7_I2C1EIE              at PIE7 : 6
-- ------------------------------------------------
var volatile byte   PIE8                      at { 0x47B }
var volatile bit    PIE8_I3C1RXIE             at PIE8 : 0
var volatile bit    PIE8_I3C1TXIE             at PIE8 : 1
var volatile bit    PIE8_I3C1IE               at PIE8 : 2
var volatile bit    PIE8_I3C1EIE              at PIE8 : 3
var volatile bit    PIE8_I3C1RIE              at PIE8 : 4
-- ------------------------------------------------
var volatile byte   PIE9                      at { 0x47C }
var volatile bit    PIE9_HLVDIE               at PIE9 : 5
var volatile bit    PIE9_ADIE                 at PIE9 : 6
var volatile bit    PIE9_ADTIE                at PIE9 : 7
-- ------------------------------------------------
var volatile byte   IPR0                      at { 0x47D }
var volatile bit    IPR0_SWIP                 at IPR0 : 0
var volatile bit    IPR0_INT0IP               at IPR0 : 1
var volatile bit    IPR0_INT1IP               at IPR0 : 2
var volatile bit    IPR0_INT2IP               at IPR0 : 3
var volatile bit    IPR0_DMA1SCNTIP           at IPR0 : 4
var volatile bit    IPR0_DMA1DCNTIP           at IPR0 : 5
var volatile bit    IPR0_DMA1ORIP             at IPR0 : 6
var volatile bit    IPR0_DMA1AIP              at IPR0 : 7
-- ------------------------------------------------
var volatile byte   IPR1                      at { 0x47E }
var volatile bit    IPR1_DMA2SCNTIP           at IPR1 : 0
var volatile bit    IPR1_DMA2DCNTIP           at IPR1 : 1
var volatile bit    IPR1_DMA2ORIP             at IPR1 : 2
var volatile bit    IPR1_DMA2AIP              at IPR1 : 3
var volatile bit    IPR1_DMA3SCNTIP           at IPR1 : 4
var volatile bit    IPR1_DMA3DCNTIP           at IPR1 : 5
var volatile bit    IPR1_DMA3ORIP             at IPR1 : 6
var volatile bit    IPR1_DMA3AIP              at IPR1 : 7
-- ------------------------------------------------
var volatile byte   IPR2                      at { 0x47F }
var volatile bit    IPR2_DMA4SCNTIP           at IPR2 : 0
var volatile bit    IPR2_DMA4DCNTIP           at IPR2 : 1
var volatile bit    IPR2_DMA4ORIP             at IPR2 : 2
var volatile bit    IPR2_DMA4AIP              at IPR2 : 3
var volatile bit    IPR2_NVMIP                at IPR2 : 4
var volatile bit    IPR2_CRCIP                at IPR2 : 5
var volatile bit    IPR2_SCANIP               at IPR2 : 6
var volatile bit    IPR2_ACTIP                at IPR2 : 7
-- ------------------------------------------------
var volatile byte   IPR3                      at { 0x480 }
var volatile bit    IPR3_CSWIP                at IPR3 : 0
var volatile bit    IPR3_OSFIP                at IPR3 : 1
var volatile bit    IPR3_VDDIO2IP             at IPR3 : 2
var volatile bit    IPR3_IOCIP                at IPR3 : 4
var volatile bit    IPR3_TMR0IP               at IPR3 : 5
var volatile bit    IPR3_TMR1IP               at IPR3 : 6
var volatile bit    IPR3_TMR1GIP              at IPR3 : 7
-- ------------------------------------------------
var volatile byte   IPR4                      at { 0x481 }
var volatile bit    IPR4_TMR2IP               at IPR4 : 0
var volatile bit    IPR4_TMR4IP               at IPR4 : 1
var volatile bit    IPR4_TU16AIP              at IPR4 : 2
var volatile bit    IPR4_TU16BIP              at IPR4 : 3
var volatile bit    IPR4_CCP1IP               at IPR4 : 4
alias               IPR4_CCPIP                is IPR4_CCP1IP
var volatile bit    IPR4_CCP2IP               at IPR4 : 5
var volatile bit    IPR4_PWM1PIP              at IPR4 : 6
var volatile bit    IPR4_PWM1IP               at IPR4 : 7
-- ------------------------------------------------
var volatile byte   IPR5                      at { 0x482 }
var volatile bit    IPR5_PWM2PIP              at IPR5 : 0
var volatile bit    IPR5_PWM2IP               at IPR5 : 1
var volatile bit    IPR5_CWG1IP               at IPR5 : 2
var volatile bit    IPR5_CLC1IP               at IPR5 : 3
var volatile bit    IPR5_CLC2IP               at IPR5 : 4
var volatile bit    IPR5_CLC3IP               at IPR5 : 5
var volatile bit    IPR5_CLC4IP               at IPR5 : 6
var volatile bit    IPR5_IOCSRIP              at IPR5 : 7
-- ------------------------------------------------
var volatile byte   IPR6                      at { 0x483 }
var volatile bit    IPR6_U1RXIP               at IPR6 : 0
var volatile bit    IPR6_U1TXIP               at IPR6 : 1
var volatile bit    IPR6_U1IP                 at IPR6 : 2
var volatile bit    IPR6_U1EIP                at IPR6 : 3
var volatile bit    IPR6_U2RXIP               at IPR6 : 4
var volatile bit    IPR6_U2TXIP               at IPR6 : 5
var volatile bit    IPR6_U2IP                 at IPR6 : 6
var volatile bit    IPR6_U2EIP                at IPR6 : 7
-- ------------------------------------------------
var volatile byte   IPR7                      at { 0x484 }
var volatile bit    IPR7_SPI1RXIP             at IPR7 : 0
var volatile bit    IPR7_SPI1TXIP             at IPR7 : 1
var volatile bit    IPR7_SPI1IP               at IPR7 : 2
var volatile bit    IPR7_I2C1RXIP             at IPR7 : 3
var volatile bit    IPR7_I2C1TXIP             at IPR7 : 4
var volatile bit    IPR7_I2C1IP               at IPR7 : 5
var volatile bit    IPR7_I2C1EIP              at IPR7 : 6
-- ------------------------------------------------
var volatile byte   IPR8                      at { 0x485 }
var volatile bit    IPR8_I3C1RXIP             at IPR8 : 0
var volatile bit    IPR8_I3C1TXIP             at IPR8 : 1
var volatile bit    IPR8_I3C1IP               at IPR8 : 2
var volatile bit    IPR8_I3C1EIP              at IPR8 : 3
var volatile bit    IPR8_I3C1RIP              at IPR8 : 4
-- ------------------------------------------------
var volatile byte   IPR9                      at { 0x486 }
var volatile bit    IPR9_HLVDIP               at IPR9 : 5
var volatile bit    IPR9_ADIP                 at IPR9 : 6
var volatile bit    IPR9_ADTIP                at IPR9 : 7
-- ------------------------------------------------
var volatile byte   PORTA                     at { 0x487 }
var volatile bit    PORTA_RA0                 at PORTA : 0
var volatile bit    PORTA_RA1                 at PORTA : 1
var volatile bit    PORTA_RA2                 at PORTA : 2
var volatile bit    PORTA_RA3                 at PORTA : 3
var volatile bit    pin_A3                    at PORTA : 3
--
var volatile bit    PORTA_RA4                 at PORTA : 4
var volatile bit    PORTA_RA5                 at PORTA : 5
-- ------------------------------------------------
var volatile byte   PORTC                     at { 0x489 }
var volatile bit    PORTC_RC0                 at PORTC : 0
var volatile bit    PORTC_RC1                 at PORTC : 1
var volatile bit    PORTC_RC3                 at PORTC : 3
var volatile bit    PORTC_RC4                 at PORTC : 4
var volatile bit    PORTC_RC5                 at PORTC : 5
var volatile bit    PORTC_RC6                 at PORTC : 6
var volatile bit    PORTC_RC7                 at PORTC : 7
-- ------------------------------------------------
var volatile byte   TRISA                     at { 0x48D }
alias               PORTA_direction           is TRISA
--
procedure PORTA_low_direction'put(byte in x) is
   TRISA = (TRISA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low_direction'get() return byte is
   return (TRISA & 0x0F)
end function
--
procedure PORTA_high_direction'put(byte in x) is
   TRISA = (TRISA & 0x0F) | (x << 4)
end procedure
function PORTA_high_direction'get() return byte is
   return (TRISA >> 4)
end function
--
var volatile bit    TRISA_TRISA0              at TRISA : 0
var volatile bit    pin_A0_direction          at TRISA : 0
alias               pin_ANA0_direction        is pin_A0_direction
--
var volatile bit    TRISA_TRISA1              at TRISA : 1
var volatile bit    pin_A1_direction          at TRISA : 1
alias               pin_VREF_POS_direction    is pin_A1_direction
alias               pin_ANA1_direction        is pin_A1_direction
--
var volatile bit    TRISA_TRISA2              at TRISA : 2
var volatile bit    pin_A2_direction          at TRISA : 2
alias               pin_VREF_NEG_direction    is pin_A2_direction
alias               pin_ANA2_direction        is pin_A2_direction
--
var volatile bit    TRISA_TRISA4              at TRISA : 4
var volatile bit    pin_A4_direction          at TRISA : 4
alias               pin_CLKOUT_direction      is pin_A4_direction
alias               pin_OSC2_direction        is pin_A4_direction
alias               pin_SOSCO_direction       is pin_A4_direction
alias               pin_ANA4_direction        is pin_A4_direction
--
var volatile bit    TRISA_TRISA5              at TRISA : 5
var volatile bit    pin_A5_direction          at TRISA : 5
alias               pin_CLKIN_direction       is pin_A5_direction
alias               pin_OSC1_direction        is pin_A5_direction
alias               pin_SOSCI_direction       is pin_A5_direction
alias               pin_ANA5_direction        is pin_A5_direction
--
-- ------------------------------------------------
var volatile byte   TRISC                     at { 0x48F }
alias               PORTC_direction           is TRISC
--
procedure PORTC_low_direction'put(byte in x) is
   TRISC = (TRISC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low_direction'get() return byte is
   return (TRISC & 0x0F)
end function
--
procedure PORTC_high_direction'put(byte in x) is
   TRISC = (TRISC & 0x0F) | (x << 4)
end procedure
function PORTC_high_direction'get() return byte is
   return (TRISC >> 4)
end function
--
var volatile bit    TRISC_TRISC0              at TRISC : 0
var volatile bit    pin_C0_direction          at TRISC : 0
alias               pin_MVIO_VDDIO2_RC0_direction is pin_C0_direction
alias               pin_LV_I3C_RC0_direction  is pin_C0_direction
alias               pin_SMB_I2C_RC0_direction is pin_C0_direction
--
var volatile bit    TRISC_TRISC1              at TRISC : 1
var volatile bit    pin_C1_direction          at TRISC : 1
alias               pin_MVIO_VDDIO2_RC1_direction is pin_C1_direction
alias               pin_LV_I3C_RC1_direction  is pin_C1_direction
alias               pin_SMB_I2C_RC1_direction is pin_C1_direction
--
var volatile bit    TRISC_TRISC3              at TRISC : 3
var volatile bit    pin_C3_direction          at TRISC : 3
alias               pin_ANC3_direction        is pin_C3_direction
--
var volatile bit    TRISC_TRISC4              at TRISC : 4
var volatile bit    pin_C4_direction          at TRISC : 4
alias               pin_SMB_I2C_RC4_direction is pin_C4_direction
alias               pin_ANC4_direction        is pin_C4_direction
--
var volatile bit    TRISC_TRISC5              at TRISC : 5
var volatile bit    pin_C5_direction          at TRISC : 5
alias               pin_SMB_I2C_RC5_direction is pin_C5_direction
alias               pin_ANC5_direction        is pin_C5_direction
--
var volatile bit    TRISC_TRISC6              at TRISC : 6
var volatile bit    pin_C6_direction          at TRISC : 6
var volatile bit    TRISC_TRISC7              at TRISC : 7
var volatile bit    pin_C7_direction          at TRISC : 7
-- ------------------------------------------------
var volatile byte   LATA                      at { 0x493 }
--
procedure PORTA'put(byte in x at LATA) is
   pragma inline
end procedure
--
procedure PORTA_low'put(byte in x) is
   LATA = (LATA & 0xF0) | (x & 0x0F)
end procedure
function PORTA_low'get() return byte is
   return (PORTA & 0x0F)
end function
--
procedure PORTA_high'put(byte in x) is
   LATA = (LATA & 0x0F) | (x << 4)
end procedure
function PORTA_high'get() return byte is
   return (PORTA >> 4)
end function
--
var volatile bit    LATA_LATA0                at LATA : 0
var volatile bit    pin_A0                    at PORTA : 0
alias               pin_ANA0                  is pin_A0
--
procedure pin_A0'put(bit in x at LATA : 0) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA1                at LATA : 1
var volatile bit    pin_A1                    at PORTA : 1
alias               pin_VREF_POS              is pin_A1
alias               pin_ANA1                  is pin_A1
--
procedure pin_A1'put(bit in x at LATA : 1) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA2                at LATA : 2
var volatile bit    pin_A2                    at PORTA : 2
alias               pin_VREF_NEG              is pin_A2
alias               pin_ANA2                  is pin_A2
--
procedure pin_A2'put(bit in x at LATA : 2) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA4                at LATA : 4
var volatile bit    pin_A4                    at PORTA : 4
alias               pin_CLKOUT                is pin_A4
alias               pin_OSC2                  is pin_A4
alias               pin_SOSCO                 is pin_A4
alias               pin_ANA4                  is pin_A4
--
procedure pin_A4'put(bit in x at LATA : 4) is
   pragma inline
end procedure
--
var volatile bit    LATA_LATA5                at LATA : 5
var volatile bit    pin_A5                    at PORTA : 5
alias               pin_CLKIN                 is pin_A5
alias               pin_OSC1                  is pin_A5
alias               pin_SOSCI                 is pin_A5
alias               pin_ANA5                  is pin_A5
--
procedure pin_A5'put(bit in x at LATA : 5) is
   pragma inline
end procedure
--
-- ------------------------------------------------
var volatile byte   LATC                      at { 0x495 }
--
procedure PORTC'put(byte in x at LATC) is
   pragma inline
end procedure
--
procedure PORTC_low'put(byte in x) is
   LATC = (LATC & 0xF0) | (x & 0x0F)
end procedure
function PORTC_low'get() return byte is
   return (PORTC & 0x0F)
end function
--
procedure PORTC_high'put(byte in x) is
   LATC = (LATC & 0x0F) | (x << 4)
end procedure
function PORTC_high'get() return byte is
   return (PORTC >> 4)
end function
--
var volatile bit    LATC_LATC0                at LATC : 0
var volatile bit    pin_C0                    at PORTC : 0
alias               pin_MVIO_VDDIO2_RC0       is pin_C0
alias               pin_LV_I3C_RC0            is pin_C0
alias               pin_SMB_I2C_RC0           is pin_C0
--
procedure pin_C0'put(bit in x at LATC : 0) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC1                at LATC : 1
var volatile bit    pin_C1                    at PORTC : 1
alias               pin_MVIO_VDDIO2_RC1       is pin_C1
alias               pin_LV_I3C_RC1            is pin_C1
alias               pin_SMB_I2C_RC1           is pin_C1
--
procedure pin_C1'put(bit in x at LATC : 1) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC3                at LATC : 3
var volatile bit    pin_C3                    at PORTC : 3
alias               pin_ANC3                  is pin_C3
--
procedure pin_C3'put(bit in x at LATC : 3) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC4                at LATC : 4
var volatile bit    pin_C4                    at PORTC : 4
alias               pin_SMB_I2C_RC4           is pin_C4
alias               pin_ANC4                  is pin_C4
--
procedure pin_C4'put(bit in x at LATC : 4) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC5                at LATC : 5
var volatile bit    pin_C5                    at PORTC : 5
alias               pin_SMB_I2C_RC5           is pin_C5
alias               pin_ANC5                  is pin_C5
--
procedure pin_C5'put(bit in x at LATC : 5) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC6                at LATC : 6
var volatile bit    pin_C6                    at PORTC : 6
procedure pin_C6'put(bit in x at LATC : 6) is
   pragma inline
end procedure
--
var volatile bit    LATC_LATC7                at LATC : 7
var volatile bit    pin_C7                    at PORTC : 7
procedure pin_C7'put(bit in x at LATC : 7) is
   pragma inline
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTW                     at { 0x499 }
var volatile bit    PORTW_RW0                 at PORTW : 0
var volatile bit    PORTW_RW1                 at PORTW : 1
var volatile bit    PORTW_RW2                 at PORTW : 2
var volatile bit    PORTW_RW3                 at PORTW : 3
var volatile bit    PORTW_RW4                 at PORTW : 4
var volatile bit    PORTW_RW5                 at PORTW : 5
var volatile bit    PORTW_RW6                 at PORTW : 6
var volatile bit    PORTW_RW7                 at PORTW : 7
-- ------------------------------------------------
var volatile byte   LATW                      at { 0x49A }
--
procedure PORTW'put(byte in x at LATW) is
   pragma inline
end procedure
--
procedure PORTW_low'put(byte in x) is
   LATW = (LATW & 0xF0) | (x & 0x0F)
end procedure
function PORTW_low'get() return byte is
   return (PORTW & 0x0F)
end function
--
procedure PORTW_high'put(byte in x) is
   LATW = (LATW & 0x0F) | (x << 4)
end procedure
function PORTW_high'get() return byte is
   return (PORTW >> 4)
end function
--
var volatile bit    LATW_LATW0                at LATW : 0
var volatile bit    pin_W0                    at PORTW : 0
procedure pin_W0'put(bit in x at LATW : 0) is
   pragma inline
end procedure
--
var volatile bit    LATW_LATW1                at LATW : 1
var volatile bit    pin_W1                    at PORTW : 1
procedure pin_W1'put(bit in x at LATW : 1) is
   pragma inline
end procedure
--
var volatile bit    LATW_LATW2                at LATW : 2
var volatile bit    pin_W2                    at PORTW : 2
procedure pin_W2'put(bit in x at LATW : 2) is
   pragma inline
end procedure
--
var volatile bit    LATW_LATW3                at LATW : 3
var volatile bit    pin_W3                    at PORTW : 3
procedure pin_W3'put(bit in x at LATW : 3) is
   pragma inline
end procedure
--
var volatile bit    LATW_LATW4                at LATW : 4
var volatile bit    pin_W4                    at PORTW : 4
procedure pin_W4'put(bit in x at LATW : 4) is
   pragma inline
end procedure
--
var volatile bit    LATW_LATW5                at LATW : 5
var volatile bit    pin_W5                    at PORTW : 5
procedure pin_W5'put(bit in x at LATW : 5) is
   pragma inline
end procedure
--
var volatile bit    LATW_LATW6                at LATW : 6
var volatile bit    pin_W6                    at PORTW : 6
procedure pin_W6'put(bit in x at LATW : 6) is
   pragma inline
end procedure
--
var volatile bit    LATW_LATW7                at LATW : 7
var volatile bit    pin_W7                    at PORTW : 7
procedure pin_W7'put(bit in x at LATW : 7) is
   pragma inline
end procedure
--
-- ------------------------------------------------
var volatile byte   PORTWIN0                  at { 0x49B }
var volatile bit    PORTWIN0_IN0              at PORTWIN0 : 0
var volatile bit    PORTWIN0_IN1              at PORTWIN0 : 1
var volatile bit    PORTWIN0_IN2              at PORTWIN0 : 2
-- ------------------------------------------------
var volatile byte   PORTWIN1                  at { 0x49C }
var volatile bit    PORTWIN1_IN0              at PORTWIN1 : 0
var volatile bit    PORTWIN1_IN1              at PORTWIN1 : 1
var volatile bit    PORTWIN1_IN2              at PORTWIN1 : 2
-- ------------------------------------------------
var volatile byte   PORTWIN2                  at { 0x49D }
var volatile bit    PORTWIN2_IN0              at PORTWIN2 : 0
var volatile bit    PORTWIN2_IN1              at PORTWIN2 : 1
var volatile bit    PORTWIN2_IN2              at PORTWIN2 : 2
-- ------------------------------------------------
var volatile byte   PORTWIN3                  at { 0x49E }
var volatile bit    PORTWIN3_IN0              at PORTWIN3 : 0
var volatile bit    PORTWIN3_IN1              at PORTWIN3 : 1
var volatile bit    PORTWIN3_IN2              at PORTWIN3 : 2
-- ------------------------------------------------
var volatile byte   PORTWIN4                  at { 0x49F }
var volatile bit    PORTWIN4_IN0              at PORTWIN4 : 0
var volatile bit    PORTWIN4_IN1              at PORTWIN4 : 1
var volatile bit    PORTWIN4_IN2              at PORTWIN4 : 2
-- ------------------------------------------------
var volatile byte   PORTWIN5                  at { 0x4A0 }
var volatile bit    PORTWIN5_IN0              at PORTWIN5 : 0
var volatile bit    PORTWIN5_IN1              at PORTWIN5 : 1
var volatile bit    PORTWIN5_IN2              at PORTWIN5 : 2
-- ------------------------------------------------
var volatile byte   PORTWIN6                  at { 0x4A1 }
var volatile bit    PORTWIN6_IN0              at PORTWIN6 : 0
var volatile bit    PORTWIN6_IN1              at PORTWIN6 : 1
var volatile bit    PORTWIN6_IN2              at PORTWIN6 : 2
-- ------------------------------------------------
var volatile byte   PORTWIN7                  at { 0x4A2 }
var volatile bit    PORTWIN7_IN0              at PORTWIN7 : 0
var volatile bit    PORTWIN7_IN1              at PORTWIN7 : 1
var volatile bit    PORTWIN7_IN2              at PORTWIN7 : 2
-- ------------------------------------------------
var volatile byte   PORTWCLK                  at { 0x4A3 }
var volatile bit    PORTWCLK_CLK0             at PORTWCLK : 0
var volatile bit    PORTWCLK_CLK1             at PORTWCLK : 1
var volatile bit    PORTWCLK_CLK2             at PORTWCLK : 2
var volatile bit    PORTWCLK_CLK3             at PORTWCLK : 3
var volatile bit    PORTWCLK_CLK4             at PORTWCLK : 4
-- ------------------------------------------------
var volatile byte   PORTWDF                   at { 0x4A4 }
var volatile bit    PORTWDF_DF0               at PORTWDF : 0
var volatile bit    PORTWDF_DF1               at PORTWDF : 1
var volatile bit    PORTWDF_DF2               at PORTWDF : 2
var volatile bit    PORTWDF_DF3               at PORTWDF : 3
var volatile bit    PORTWDF_DF4               at PORTWDF : 4
var volatile bit    PORTWDF_DF5               at PORTWDF : 5
var volatile bit    PORTWDF_DF6               at PORTWDF : 6
var volatile bit    PORTWDF_DF7               at PORTWDF : 7
var volatile bit    PORTWDF_PWDF0             at PORTWDF : 0
var volatile bit    PORTWDF_PWDF1             at PORTWDF : 1
var volatile bit    PORTWDF_PWDF2             at PORTWDF : 2
var volatile bit    PORTWDF_PWDF3             at PORTWDF : 3
var volatile bit    PORTWDF_PWDF4             at PORTWDF : 4
var volatile bit    PORTWDF_PWDF5             at PORTWDF : 5
var volatile bit    PORTWDF_PWDF6             at PORTWDF : 6
var volatile bit    PORTWDF_PWDF7             at PORTWDF : 7
-- ------------------------------------------------
var volatile byte   PORTWCON                  at { 0x4A5 }
var volatile bit    PORTWCON_CLKEN            at PORTWCON : 0
-- ------------------------------------------------
var volatile byte   MVIOSTAT                  at { 0x4A6 }
var volatile bit    MVIOSTAT_VDDIO2RDY        at MVIOSTAT : 0
-- ------------------------------------------------
var volatile byte   STATUS                    at { 0x4D8 }
var volatile bit    STATUS_C                  at STATUS : 0
var volatile bit    STATUS_DC                 at STATUS : 1
var volatile bit    STATUS_Z                  at STATUS : 2
var volatile bit    STATUS_OV                 at STATUS : 3
var volatile bit    STATUS_N                  at STATUS : 4
var volatile bit    STATUS_PD                 at STATUS : 5
var volatile bit    STATUS_TO                 at STATUS : 6
var volatile byte   _status                   at { 0x4D8 }
const        byte   _c                        =  0
const        byte   _dc                       =  1
const        byte   _z                        =  2
const        byte   _ov                       =  3
const        byte   _n                        =  4
const        byte   _pd                       =  5
const        byte   _to                       =  6
const        byte   _banked                   =  1
const        byte   _access                   =  0
-- ------------------------------------------------
var volatile word   FSR2                      at { 0x4D9 }
-- ------------------------------------------------
var volatile byte   FSR2L                     at { 0x4D9 }
-- ------------------------------------------------
var volatile byte   FSR2H                     at { 0x4DA }
var volatile bit*6  FSR2H_FSR2H               at FSR2H : 0
-- ------------------------------------------------
var volatile byte   PLUSW2                    at { 0x4DB }
-- ------------------------------------------------
var volatile byte   PREINC2                   at { 0x4DC }
-- ------------------------------------------------
var volatile byte   POSTDEC2                  at { 0x4DD }
-- ------------------------------------------------
var volatile byte   POSTINC2                  at { 0x4DE }
-- ------------------------------------------------
var volatile byte   INDF2                     at { 0x4DF }
-- ------------------------------------------------
var volatile byte   BSR                       at { 0x4E0 }
var volatile bit*6  BSR_BSR                   at BSR : 0
var volatile byte   _bsr                      at { 0x4E0 }
-- ------------------------------------------------
var volatile word   FSR1                      at { 0x4E1 }
var volatile word   _fsr1                     at { 0x4E1 }
-- ------------------------------------------------
var volatile byte   FSR1L                     at { 0x4E1 }
var volatile byte   _fsr1l                    at { 0x4E1 }
-- ------------------------------------------------
var volatile byte   FSR1H                     at { 0x4E2 }
var volatile bit*6  FSR1H_FSR1H               at FSR1H : 0
var volatile byte   _fsr1h                    at { 0x4E2 }
-- ------------------------------------------------
var volatile byte   PLUSW1                    at { 0x4E3 }
-- ------------------------------------------------
var volatile byte   PREINC1                   at { 0x4E4 }
-- ------------------------------------------------
var volatile byte   POSTDEC1                  at { 0x4E5 }
-- ------------------------------------------------
var volatile byte   POSTINC1                  at { 0x4E6 }
-- ------------------------------------------------
var volatile byte   INDF1                     at { 0x4E7 }
-- ------------------------------------------------
var volatile byte   WREG                      at { 0x4E8 }
-- ------------------------------------------------
var volatile word   FSR0                      at { 0x4E9 }
var volatile word   _fsr0                     at { 0x4E9 }
-- ------------------------------------------------
var volatile byte   FSR0L                     at { 0x4E9 }
var volatile byte   _fsr0l                    at { 0x4E9 }
-- ------------------------------------------------
var volatile byte   FSR0H                     at { 0x4EA }
var volatile bit*6  FSR0H_FSR0H               at FSR0H : 0
var volatile byte   _fsr0h                    at { 0x4EA }
-- ------------------------------------------------
var volatile byte   PLUSW0                    at { 0x4EB }
-- ------------------------------------------------
var volatile byte   PREINC0                   at { 0x4EC }
-- ------------------------------------------------
var volatile byte   POSTDEC0                  at { 0x4ED }
-- ------------------------------------------------
var volatile byte   POSTINC0                  at { 0x4EE }
-- ------------------------------------------------
var volatile byte   INDF0                     at { 0x4EF }
var volatile byte   _ind                      at { 0x4EF }
-- ------------------------------------------------
var volatile byte   PCON0                     at { 0x4F0 }
var volatile bit    PCON0_NBOR                at PCON0 : 0
var volatile bit    PCON0_NPOR                at PCON0 : 1
var volatile bit    PCON0_NRI                 at PCON0 : 2
var volatile bit    PCON0_NRMCLR              at PCON0 : 3
var volatile bit    PCON0_NRWDT               at PCON0 : 4
var volatile bit    PCON0_NWDTWV              at PCON0 : 5
var volatile bit    PCON0_STKUNF              at PCON0 : 6
var volatile bit    PCON0_STKOVF              at PCON0 : 7
var volatile bit    PCON0_BOR                 at PCON0 : 0
var volatile bit    PCON0_POR                 at PCON0 : 1
var volatile bit    PCON0_RI                  at PCON0 : 2
var volatile bit    PCON0_RMCLR               at PCON0 : 3
var volatile bit    PCON0_RWDT                at PCON0 : 4
var volatile bit    PCON0_WDTWV               at PCON0 : 5
-- ------------------------------------------------
var volatile byte   PCON1                     at { 0x4F1 }
var volatile bit    PCON1_NRCM                at PCON1 : 0
var volatile bit    PCON1_NMEMV               at PCON1 : 1
var volatile bit    PCON1_NRVREG              at PCON1 : 2
var volatile bit    PCON1_NPORVDDIO2          at PCON1 : 3
var volatile bit    PCON1_RCM                 at PCON1 : 0
var volatile bit    PCON1_MEMV                at PCON1 : 1
var volatile bit    PCON1_RVREG               at PCON1 : 2
var volatile bit    PCON1_PORVDDIO2           at PCON1 : 3
-- ------------------------------------------------
var volatile byte   CPUDOZE                   at { 0x4F2 }
var volatile bit*3  CPUDOZE_DOZE              at CPUDOZE : 0
var volatile bit    CPUDOZE_DOE               at CPUDOZE : 4
var volatile bit    CPUDOZE_ROI               at CPUDOZE : 5
var volatile bit    CPUDOZE_DOZEN             at CPUDOZE : 6
var volatile bit    CPUDOZE_IDLEN             at CPUDOZE : 7
var volatile bit    CPUDOZE_DOZE0             at CPUDOZE : 0
var volatile bit    CPUDOZE_DOZE1             at CPUDOZE : 1
var volatile bit    CPUDOZE_DOZE2             at CPUDOZE : 2
-- ------------------------------------------------
var volatile word   PROD                      at { 0x4F3 }
-- ------------------------------------------------
var volatile byte   PRODL                     at { 0x4F3 }
-- ------------------------------------------------
var volatile byte   PRODH                     at { 0x4F4 }
-- ------------------------------------------------
var volatile byte   TABLAT                    at { 0x4F5 }
var volatile byte   _tablat                   at { 0x4F5 }
-- ------------------------------------------------
var volatile byte*3 TBLPTR                    at { 0x4F6 }
var volatile byte*3 _tblptr                   at { 0x4F6 }
-- ------------------------------------------------
var volatile byte   TBLPTRL                   at { 0x4F6 }
var volatile byte   _tblptrl                  at { 0x4F6 }
-- ------------------------------------------------
var volatile byte   TBLPTRH                   at { 0x4F7 }
var volatile byte   _tblptrh                  at { 0x4F7 }
-- ------------------------------------------------
var volatile byte   TBLPTRU                   at { 0x4F8 }
var volatile bit*6  TBLPTRU_TBLPTRU           at TBLPTRU : 0
var volatile byte   _tblptru                  at { 0x4F8 }
-- ------------------------------------------------
var volatile byte*3 PCLAT                     at { 0x4F9 }
var volatile byte*3 _pclat                    at { 0x4F9 }
-- ------------------------------------------------
var volatile byte   PCL                       at { 0x4F9 }
var volatile byte   _pcl                      at { 0x4F9 }
-- ------------------------------------------------
var volatile byte   PCLATH                    at { 0x4FA }
var volatile byte   _pclath                   at { 0x4FA }
-- ------------------------------------------------
var volatile byte   PCLATU                    at { 0x4FB }
var volatile bit*5  PCLATU_PCU                at PCLATU : 0
var volatile byte   _pclatu                   at { 0x4FB }
-- ------------------------------------------------
var volatile byte   STKPTR                    at { 0x4FC }
var volatile bit*7  STKPTR_STKPTR             at STKPTR : 0
-- ------------------------------------------------
var volatile byte*3 TOS                       at { 0x4FD }
-- ------------------------------------------------
var volatile byte   TOSL                      at { 0x4FD }
-- ------------------------------------------------
var volatile byte   TOSH                      at { 0x4FE }
-- ------------------------------------------------
var volatile byte   TOSU                      at { 0x4FF }
var volatile bit*5  TOSU_TOSU                 at TOSU : 0
--
-- ------------------------------------------------
-- Constants and procedures related to analog features
-- ------------------------------------------------


const byte ADC_ADCS_BITCOUNT  = 1
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Change analog I/O pins into digital I/O pins.
procedure analog_off() is
   pragma inline
   ANSELA = 0b0000_0000
   ANSELC = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Disable ADC module
procedure adc_off() is
   pragma inline
   ADCON0 = 0b0000_0000
   ADCON1 = 0b0000_0000
   ADCON2 = 0b0000_0000
end procedure
--
-- - - - - - - - - - - - - - - - - - - - - - - - - - -
-- Switch analog ports to digital mode when analog module(s) present.
procedure enable_digital_io() is
   pragma inline
   analog_off()
   adc_off()
end procedure
--
-- ------------------------------------------------
--    Miscellaneous information
-- ------------------------------------------------
--
const PPS_GROUP             = PPS_5
--
--    PPS OUTPUT constants
--
const byte PPS_NULL      = 0x00
const byte PPS_CLKR      = 0x01
const byte PPS_TMR0      = 0x02
const byte PPS_TU16A     = 0x03
const byte PPS_TU16B     = 0x04
const byte PPS_CCP1      = 0x05
const byte PPS_CCP2      = 0x06
const byte PPS_PWM11     = 0x07
const byte PPS_PWM12     = 0x08
const byte PPS_PWM21     = 0x09
const byte PPS_PWM22     = 0x0A
const byte PPS_CWG1A     = 0x0B
const byte PPS_CWG1B     = 0x0C
const byte PPS_CWG1C     = 0x0D
const byte PPS_CWG1D     = 0x0E
const byte PPS_CLC1OUT   = 0x0F
const byte PPS_CLC2OUT   = 0x10
const byte PPS_CLC3OUT   = 0x11
const byte PPS_CLC4OUT   = 0x12
const byte PPS_TX1       = 0x13
const byte PPS_RTS1      = 0x14
const byte PPS_TXDE1     = 0x15
const byte PPS_TX2       = 0x16
const byte PPS_RTS2      = 0x17
const byte PPS_TXDE2     = 0x18
const byte PPS_SCK1      = 0x19
const byte PPS_SDO1      = 0x1A
const byte PPS_SS1       = 0x1B
const byte PPS_SCL1      = 0x1C
const byte PPS_SDA1      = 0x1D
const byte PPS_ADGRDA    = 0x1E
const byte PPS_ADGRDB    = 0x1F
--
--
-- Free shared memory: 0x501-0x55F
--
-- ------------------------------------------------
--    Symbolic Fuse Definitions
-- ------------------------------------------------
--
-- CONFIG1 (0x300000)
--
pragma fuse_def OSC:0  0x7 {             -- External Oscillator Selection
       HS_8MHZ = 0x0                     -- HS (crystal oscillator) up to 8 MHz
       HS_16MHZ = 0x1                    -- HS (crystal oscillator) up to 16 MHz
       HS_24MHZ = 0x2                    -- HS (crystal oscillator) up to 24 MHz
       HS_32MHZ = 0x3                    -- HS (crystal oscillator) up to 32 MHz
       OFF = 0x4                         -- Oscillator not enabled
       ECL_NOCLKOUT = 0x5                -- EC (external clock) below 500 kHz
       ECM_NOCLKOUT = 0x6                -- EC (external clock) for 500 kHz to 8 MHz
       ECH_NOCLKOUT = 0x7                -- EC (external clock) above 8 MHz
       }
pragma fuse_def RSTOSC:0  0x70 {         -- Reset Oscillator Selection
       HFINTOSC_64MHZ = 0x0              -- HFINTOSC with HFFRQ = 64 MHz and CDIV = 1:1
       EXTOSC_4PLL = 0x20                -- EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
       SOSC = 0x40                       -- Secondary Oscillator
       LFINTOSC = 0x50                   -- Low-Frequency Oscillator
       HFINTOSC_1MHZ = 0x60              -- HFINTOSC with HFFRQ = 4 MHz and CDIV = 4:1
       EXTOSC = 0x70                     -- EXTOSC operating per FEXTOSC bits (device manufacturing default)
       }
--
-- CONFIG2 (0x300001)
--
pragma fuse_def CLKOUTEN:1  0x1 {        -- Clock out Enable bit
       DISABLED = 0x1                    -- CLKOUT function is disabled
       ENABLED = 0x0                     -- CLKOUT function is enabled
       }
pragma fuse_def PR1WAY:1  0x2 {          -- PRLOCKED One-Way Set Enable bit
       ENABLED = 0x2                     -- PRLOCKED bit can be cleared and set only once
       DISABLED = 0x0                    -- PRLOCKED bit can be set and cleared repeatedly
       }
pragma fuse_def BBEN:1  0x4 {            -- Boot Block enable bit
       DISABLED = 0x4                    -- User PFM code protection disabled
       ENABLED = 0x0                     -- User PFM code protection enabled
       }
pragma fuse_def CSWEN:1  0x8 {           -- Clock Switch Enable bit
       DISABLED = 0x0                    -- The NOSC and NDIV bits cannot be changed by user software
       ENABLED = 0x8                     -- Writing to NOSC and NDIV is allowed
       }
pragma fuse_def FCMEN:1  0x20 {          -- Fail-Safe Clock Monitor Enable bit
       DISABLED = 0x0                    -- Fail-Safe Clock Monitor disabled
       ENABLED = 0x20                    -- Fail-Safe Clock Monitor enabled
       }
pragma fuse_def FCMENP:1  0x40 {         -- Fail-Safe Clock Monitor - Primary XTAL Enable bit
       DISABLED = 0x0                    -- Fail-Safe Clock Monitor disabled
       ENABLED = 0x40                    -- Fail-Safe Clock Monitor enabled; timer will flag FSCMP bit and OSFIF interrupt on EXTOSC failure.
       }
pragma fuse_def FCMENS:1  0x80 {         -- Fail-Safe Clock Monitor - Secondary XTAL Enable bit
       DISABLED = 0x0                    -- Fail-Safe Clock Monitor Disabled
       ENABLED = 0x80                    -- Fail-Safe Clock Monitor enabled; timer will flag FSCMS bit and OSFIF interrupt on SOSC failure.
       }
--
-- CONFIG3 (0x300002)
--
pragma fuse_def MCLR:2  0x1 {            -- MCLR Enable bit
       EXTERNAL = 0x1                    -- If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR 
       INTERNAL = 0x0                    -- If LVP = 0, MCLR pin function is port defined function; If LVP =1, RE3 pin fuction is MCLR
       }
pragma fuse_def PWRTS:2  0x6 {           -- Power-up timer selection bits
       PWRT_OFF = 0x6                    -- PWRT is disabled
       PWRT_64 = 0x4                     -- PWRT set at 64ms
       PWRT_16 = 0x2                     -- PWRT set at 16ms
       PWRT_1 = 0x0                      -- PWRT set at 1ms
       }
pragma fuse_def MVECEN:2  0x8 {          -- Multi-vector enable bit
       ENABLED = 0x8                     -- Multi-vector enabled, Vector table used for interrupts
       DISABLED = 0x0                    -- Interrupt contoller does not use vector table to prioritze interrupts
       }
pragma fuse_def IVT1WAY:2  0x10 {        -- IVTLOCK bit One-way set enable bit
       ENABLED = 0x10                    -- IVTLOCKED bit can be cleared and set only once
       DISABLED = 0x0                    -- IVTLOCKED bit can be cleared and set repeatedly
       }
pragma fuse_def LPBOREN:2  0x20 {        -- Low Power BOR Enable bit
       DISABLED = 0x20                   -- Low-Power BOR disabled
       ENABLED = 0x0                     -- Low-Power BOR enabled
       }
pragma fuse_def BROWNOUT:2  0xC0 {       -- Brown-out Reset Enable bits
       ENABLED = 0xC0                    -- Brown-out Reset enabled , SBOREN bit is ignored
       BROWN_OUT_RESET_ENABLED_WHILE_RUNNING_DISABLED_IN_SLEEP_SBOREN_IS_IGNORED = 0x80 -- Brown-out Reset enabled while running, disabled in Sleep; SBOREN is ignored
       CONTROL = 0x40                    -- Brown-out Reset enabled according to SBOREN
       DISABLED = 0x0                    -- Brown-out Reset disabled
       }
--
-- CONFIG4 (0x300003)
--
pragma fuse_def VOLTAGE:3  0x3 {         -- Brown-out Reset Voltage Selection bits
       V19 = 0x3                         -- Brown-out Reset Voltage (VBOR) set to 1.9V
       V25 = 0x2                         -- Brown-out Reset Voltage (VBOR) set to 2.45V
       V27 = 0x1                         -- Brown-out Reset Voltage (VBOR) set to 2.7V
       V28 = 0x0                         -- Brown-out Reset Voltage (VBOR) set to 2.8V
       }
pragma fuse_def PPS1WAY:3  0x8 {         -- PPSLOCK bit One-Way Set Enable bit
       ENABLED = 0x8                     -- PPSLOCKED bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle
       DISABLED = 0x0                    -- PPSLOCKED bit can be set and cleared repeatedly (subject to the unlock sequence)
       }
pragma fuse_def STVR:3  0x10 {           -- Stack Full/Underflow Reset Enable bit
       ENABLED = 0x10                    -- Stack full/underflow will cause Reset
       DISABLED = 0x0                    -- Stack full/underflow will not cause Reset
       }
pragma fuse_def LVP:3  0x20 {            -- Low Voltage Programming Enable bit
       ENABLED = 0x20                    -- Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored
       DISABLED = 0x0                    -- HV on MCLR/VPP must be used for programming
       }
pragma fuse_def DEBUG:3  0x40 {          -- Debug enable bit
       DISABLED = 0x40                   -- Backround debugger disabled
       ENABLED = 0x0                     -- Background debugger enabled
       }
pragma fuse_def XINST:3  0x80 {          -- Extended Instruction Set Enable bit
       DISABLED = 0x80                   -- Extended Instruction Set and Indexed Addressing Mode disabled
--     ENABLED = 0x0                     -- NOTE: not supported by JALV2
       }
--
-- CONFIG5 (0x300004)
--
pragma fuse_def WDTCPS:4  0x1F {         -- WDT Period selection bits
       F32  = 0x0                        -- Divider ratio 1:32
       F64  = 0x1                        -- Divider ratio 1:64
       F128  = 0x2                       -- Divider ratio 1:128
       F256  = 0x3                       -- Divider ratio 1:256
       F512  = 0x4                       -- Divider ratio 1:512
       F1K = 0x5                         -- Divider ratio 1:1024
       F2K = 0x6                         -- Divider ratio 1:2048
       F4K = 0x7                         -- Divider ratio 1:4096
       F8K = 0x8                         -- Divider ratio 1:8192
       F16K = 0x9                        -- Divider ratio 1:16384
       F32K = 0xA                        -- Divider ratio 1:32768
       F64K = 0xB                        -- Divider ratio 1:65536
       F128K = 0xC                       -- Divider ratio 1:131072
       F256K = 0xD                       -- Divider ratio 1:262144
       F512K = 0xE                       -- Divider ratio 1:524299
       F1M = 0xF                         -- Divider ratio 1:1048576
       F2M = 0x10                        -- Divider ratio 1:2097152
       F4M = 0x11                        -- Divider ratio 1:4194304
       F8M = 0x12                        -- Divider ratio 1:8388608
       SOFTWARE = 0x1F                   -- Divider ratio 1:65536; software control of WDTPS
       }
pragma fuse_def WDT:4  0x60 {            -- WDT operating mode
       DISABLED = 0x0                    -- WDT Disabled; SEN is ignored
       WDT_ENABLED_DISABLED_BY_SEN_BIT = 0x20 -- WDT enabled/disabled by SEN bit
       RUNONLY = 0x40                    -- WDT enabled while sleep=0, suspended when sleep=1; SEN ignored
       ENABLED = 0x60                    -- WDT enabled regardless of sleep; SEN is ignored
       }
--
-- CONFIG6 (0x300005)
--
pragma fuse_def WDTCWS:5  0x7 {          -- WDT Window Select bits
       P88 = 0x0                         -- window delay = 87.5; no software control; keyed access required
       P75 = 0x1                         -- window delay = 75 percent of time; no software control; keyed access required
       P62 = 0x2                         -- window delay = 62.5 percent of time; no software control; keyed access required
       P50 = 0x3                         -- window delay = 50 percent of time; no software control; keyed access required
       P38 = 0x4                         -- window delay = 37.5 percent of time; no software control; keyed access required
       P25 = 0x5                         -- window delay = 25 percent of time; no software control; keyed access required
       P0 = 0x6                          -- window always open (100%); no software control; keyed access required
       SOFTWARE = 0x7                    -- window always open (100%); software control; keyed access not required
       }
pragma fuse_def WDTCCS:5  0x38 {         -- WDT input clock selector
       LFINTOSC = 0x0                    -- WDT reference clock is the 31.0 kHz LFINTOSC (when WDTE != 0b00)
       MFINTOSC = 0x8                    -- WDT reference clock is the 31.25kHz MFINTOSC output (when WDTE != 0b00)
       SOSC = 0x10                       -- WDT reference clock is SOSC (when WDTE != 0b00)
       SOFTWARE = 0x38                   -- Software Control (when WDTE != 0b00)
       }
--
-- CONFIG7 (0x300006)
--
pragma fuse_def VDDIO2MD:6  0x1 {        -- VDDIO2 supply mode bit
       STANDARD_OPERATING_RANGE_VDDIO2_1_62V = 0x1 -- Standard Operating Range (VDDIO2 >= 1.62V)
       LOW_VOLTAGE_OPERATING_RANGE_VDDIO2_1_62V = 0x0 -- Low-voltage Operating Range (VDDIO2 < 1.62V)
       }
--
-- CONFIG8 (0x300007)
--
pragma fuse_def BBSIZ:7  0xFF {          -- Boot Block Size Selection bits
       WSIZE_16384 = 0x7F                -- Boot Block size is 16384 words
       WSIZE_16256 = 0x7E                -- Boot Block size is 16256 words
       WSIZE_16128 = 0x7D                -- Boot Block size is 16128 words
       WSIZE_16000 = 0x7C                -- Boot Block size is 16000 words
       WSIZE_15872 = 0x7B                -- Boot Block size is 15872 words
       WSIZE_15744 = 0x7A                -- Boot Block size is 15744 words
       WSIZE_15616 = 0x79                -- Boot Block size is 15616 words
       WSIZE_15488 = 0x78                -- Boot Block size is 15488 words
       WSIZE_15360 = 0x77                -- Boot Block size is 15360 words
       WSIZE_15232 = 0x76                -- Boot Block size is 15232 words
       WSIZE_15104 = 0x75                -- Boot Block size is 15104 words
       WSIZE_14976 = 0x74                -- Boot Block size is 14976 words
       WSIZE_14848 = 0x73                -- Boot Block size is 14848 words
       WSIZE_14720 = 0x72                -- Boot Block size is 14720 words
       WSIZE_14592 = 0x71                -- Boot Block size is 14592 words
       WSIZE_14464 = 0x70                -- Boot Block size is 14464 words
       WSIZE_14336 = 0x6F                -- Boot Block size is 14336 words
       WSIZE_14208 = 0x6E                -- Boot Block size is 14208 words
       WSIZE_14080 = 0x6D                -- Boot Block size is 14080 words
       WSIZE_13952 = 0x6C                -- Boot Block size is 13952 words
       WSIZE_13824 = 0x6B                -- Boot Block size is 13824 words
       WSIZE_13696 = 0x6A                -- Boot Block size is 13696 words
       WSIZE_13568 = 0x69                -- Boot Block size is 13568 words
       WSIZE_13440 = 0x68                -- Boot Block size is 13440 words
       WSIZE_13312 = 0x67                -- Boot Block size is 13312 words
       WSIZE_13184 = 0x66                -- Boot Block size is 13184 words
       WSIZE_13056 = 0x65                -- Boot Block size is 13056 words
       WSIZE_12928 = 0x64                -- Boot Block size is 12928 words
       WSIZE_12800 = 0x63                -- Boot Block size is 12800 words
       WSIZE_12672 = 0x62                -- Boot Block size is 12672 words
       WSIZE_12544 = 0x61                -- Boot Block size is 12544 words
       WSIZE_12416 = 0x60                -- Boot Block size is 12416 words
       WSIZE_12288 = 0x5F                -- Boot Block size is 12288 words
       WSIZE_12160 = 0x5E                -- Boot Block size is 12160 words
       WSIZE_12032 = 0x5D                -- Boot Block size is 12032 words
       WSIZE_11904 = 0x5C                -- Boot Block size is 11904 words
       WSIZE_11776 = 0x5B                -- Boot Block size is 11776 words
       WSIZE_11648 = 0x5A                -- Boot Block size is 11648 words
       WSIZE_11520 = 0x59                -- Boot Block size is 11520 words
       WSIZE_11392 = 0x58                -- Boot Block size is 11392 words
       WSIZE_11264 = 0x57                -- Boot Block size is 11264 words
       WSIZE_11136 = 0x56                -- Boot Block size is 11136 words
       WSIZE_11008 = 0x55                -- Boot Block size is 11008 words
       WSIZE_10880 = 0x54                -- Boot Block size is 10880 words
       WSIZE_10752 = 0x53                -- Boot Block size is 10752 words
       WSIZE_10624 = 0x52                -- Boot Block size is 10624 words
       WSIZE_10496 = 0x51                -- Boot Block size is 10496 words
       WSIZE_10368 = 0x50                -- Boot Block size is 10368 words
       WSIZE_10240 = 0x4F                -- Boot Block size is 10240 words
       WSIZE_10112 = 0x4E                -- Boot Block size is 10112 words
       WSIZE_9984 = 0x4D                 -- Boot Block size is 9984 words
       WSIZE_9856 = 0x4C                 -- Boot Block size is 9856 words
       WSIZE_9728 = 0x4B                 -- Boot Block size is 9728 words
       WSIZE_9600 = 0x4A                 -- Boot Block size is 9600 words
       WSIZE_9472 = 0x49                 -- Boot Block size is 9472 words
       WSIZE_9344 = 0x48                 -- Boot Block size is 9344 words
       WSIZE_9216 = 0x47                 -- Boot Block size is 9216 words
       WSIZE_9088 = 0x46                 -- Boot Block size is 9088 words
       WSIZE_8960 = 0x45                 -- Boot Block size is 8960 words
       WSIZE_8832 = 0x44                 -- Boot Block size is 8832 words
       WSIZE_8704 = 0x43                 -- Boot Block size is 8704 words
       WSIZE_8576 = 0x42                 -- Boot Block size is 8576 words
       WSIZE_8448 = 0x41                 -- Boot Block size is 8448 words
       WSIZE_8320 = 0x40                 -- Boot Block size is 8320 words
       WSIZE_8192 = 0x3F                 -- Boot Block size is 8192 words
       WSIZE_8064 = 0x3E                 -- Boot Block size is 8064 words
       WSIZE_7936 = 0x3D                 -- Boot Block size is 7936 words
       WSIZE_7808 = 0x3C                 -- Boot Block size is 7808 words
       WSIZE_7680 = 0x3B                 -- Boot Block size is 7680 words
       WSIZE_7552 = 0x3A                 -- Boot Block size is 7552 words
       WSIZE_7424 = 0x39                 -- Boot Block size is 7424 words
       WSIZE_7296 = 0x38                 -- Boot Block size is 7296 words
       WSIZE_7168 = 0x37                 -- Boot Block size is 7168 words
       WSIZE_7040 = 0x36                 -- Boot Block size is 7040 words
       WSIZE_6912 = 0x35                 -- Boot Block size is 6912 words
       WSIZE_6784 = 0x34                 -- Boot Block size is 6784 words
       WSIZE_6656 = 0x33                 -- Boot Block size is 6656 words
       WSIZE_6528 = 0x32                 -- Boot Block size is 6528 words
       WSIZE_6400 = 0x31                 -- Boot Block size is 6400 words
       WSIZE_6272 = 0x30                 -- Boot Block size is 6272 words
       WSIZE_6144 = 0x2F                 -- Boot Block size is 6144 words
       WSIZE_6016 = 0x2E                 -- Boot Block size is 6016 words
       WSIZE_5888 = 0x2D                 -- Boot Block size is 5888 words
       WSIZE_5760 = 0x2C                 -- Boot Block size is 5760 words
       WSIZE_5632 = 0x2B                 -- Boot Block size is 5632 words
       WSIZE_5504 = 0x2A                 -- Boot Block size is 5504 words
       WSIZE_5376 = 0x29                 -- Boot Block size is 5376 words
       WSIZE_5248 = 0x28                 -- Boot Block size is 5248 words
       WSIZE_5120 = 0x27                 -- Boot Block size is 5120 words
       WSIZE_4992 = 0x26                 -- Boot Block size is 4992 words
       WSIZE_4864 = 0x25                 -- Boot Block size is 4864 words
       WSIZE_4736 = 0x24                 -- Boot Block size is 4736 words
       WSIZE_4608 = 0x23                 -- Boot Block size is 4608 words
       WSIZE_4480 = 0x22                 -- Boot Block size is 4480 words
       WSIZE_4352 = 0x21                 -- Boot Block size is 4352 words
       WSIZE_4224 = 0x20                 -- Boot Block size is 4224 words
       WSIZE_4096 = 0x1F                 -- Boot Block size is 4096 words
       WSIZE_3968 = 0x1E                 -- Boot Block size is 3968 words
       WSIZE_3840 = 0x1D                 -- Boot Block size is 3840 words
       WSIZE_3712 = 0x1C                 -- Boot Block size is 3712 words
       WSIZE_3584 = 0x1B                 -- Boot Block size is 3584 words
       WSIZE_3456 = 0x1A                 -- Boot Block size is 3456 words
       WSIZE_3328 = 0x19                 -- Boot Block size is 3328 words
       WSIZE_3200 = 0x18                 -- Boot Block size is 3200 words
       WSIZE_3072 = 0x17                 -- Boot Block size is 3072 words
       WSIZE_2944 = 0x16                 -- Boot Block size is 2944 words
       WSIZE_2816 = 0x15                 -- Boot Block size is 2816 words
       WSIZE_2688 = 0x14                 -- Boot Block size is 2688 words
       WSIZE_2560 = 0x13                 -- Boot Block size is 2560 words
       WSIZE_2432 = 0x12                 -- Boot Block size is 2432 words
       WSIZE_2304 = 0x11                 -- Boot Block size is 2304 words
       WSIZE_2176 = 0x10                 -- Boot Block size is 2176 words
       WSIZE_2048 = 0xF                  -- Boot Block size is 2048 words
       WSIZE_1920 = 0xE                  -- Boot Block size is 1920 words
       WSIZE_1792 = 0xD                  -- Boot Block size is 1792 words
       WSIZE_1664 = 0xC                  -- Boot Block size is 1664 words
       WSIZE_1536 = 0xB                  -- Boot Block size is 1536 words
       WSIZE_1408 = 0xA                  -- Boot Block size is 1408 words
       WSIZE_1280 = 0x9                  -- Boot Block size is 1280 words
       WSIZE_1152 = 0x8                  -- Boot Block size is 1152 words
       WSIZE_1024 = 0x7                  -- Boot Block size is 1024 words
       WSIZE_896 = 0x6                   -- Boot Block size is 896 words
       WSIZE_768 = 0x5                   -- Boot Block size is 768 words
       WSIZE_640 = 0x4                   -- Boot Block size is 640 words
       WSIZE_512 = 0x3                   -- Boot Block size is 512 words
       WSIZE_384 = 0x2                   -- Boot Block size is 384 words
       WSIZE_256 = 0x1                   -- Boot Block size is 256 words
       WSIZE_128 = 0x0                   -- Boot Block size is 128 words
       }
--
-- CONFIG10 (0x300008)
--
pragma fuse_def WRTB:8  0x1 {            -- Boot Block Write Protection bit
       DISABLED = 0x1                    -- Boot Block is not write-protected
       ENABLED = 0x0                     -- Boot Block is write-protected
       }
pragma fuse_def WRTC:8  0x2 {            -- Configuration Register Write Protection bit
       DISABLED = 0x2                    -- Configuration registers are not write-protected
       ENABLED = 0x0                     -- Configuration registers are write-protected
       }
pragma fuse_def WRTD:8  0x4 {            -- Data EEPROM Write Protection bit
       DISABLED = 0x4                    -- Data EEPROM is not write-protected
       ENABLED = 0x0                     -- Data EEPROM is write-protected
       }
pragma fuse_def WRTSAF:8  0x8 {          -- Storage Area Flash (SAF) Write Protection bit
       DISABLED = 0x8                    -- SAF is not write-protected
       ENABLED = 0x0                     -- SAF is write-protected
       }
pragma fuse_def WRTAPP:8  0x80 {         -- Application Block Write Protection bit
       DISABLED = 0x80                   -- Application Block is not write-protected
       ENABLED = 0x0                     -- Application Block is write-protected
       }
--
-- CONFIG11 (0x300009)
--
pragma fuse_def CP:9  0x1 {              -- User Program Flash Memory (PFM) Code Protection bit
       DISABLED = 0x1                    -- User PFM code protection is disabled
       ENABLED = 0x0                     -- User PFM code protection is enabled
       }
--
-- CONFIG12 (0x30000A)
--
pragma fuse_def CPD:10  0x1 {            -- Data EEPROM Code Protection bit
       DISABLED = 0x1                    -- Data EEPROM code protection is disabled
       ENABLED = 0x0                     -- Data EEPROM code protection is enabled
       }
--

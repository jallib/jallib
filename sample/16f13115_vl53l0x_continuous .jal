-- -----------------------------------------------------------------------------
-- Title: Sample and test program for the VL53L0X Time-of-Flight ranging sensor
-- Author: Rob Jansen, Copyright (c) 2025..2025, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sample and program showing how to use the VL53L0X Time-of-Flight 
--              ranging sensor using continuous mode.
--              This device is controlled via an IIC interface. The serial 
--              interface is used to show the result of the measurement. 
--              Although the IC does not operate at 5 Volt, the VL53L0X module 
--              does operate at 5 Volt and has on-board level shifters including
--              pull-up registers.
--              The distance is measured in mm and in mil.
--
-- Sources: Based on the vl53l0x-arduino: https://github.com/pololu/vl53l0x-arduino
--          Datasheet STMicroelectronics  VL53L0X DS11555 - Rev 6
--

include 16f13115                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000       -- oscillator frequency
pragma target OSC      OFF              -- internal oscillator
pragma target RSTOSC   HFINTOSC_32MHZ   -- select 32 MHz
pragma target CLKOUTEN DISABLED         -- no clock output
pragma target WDT      DISABLED         -- watchdog
pragma target BROWNOUT DISABLED         -- no brownout reset
pragma target FCMEN    DISABLED         -- no clock monitoring
pragma target CSWEN    ENABLED          -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED          -- low voltage programming
pragma target MCLR     EXTERNAL         -- external reset
OSCFRQ_FRQ = 0b101                      -- Fosc 32 MHz

; Enable weak pull up for all pins.
WPUA = 0b0011_1111       

enable_digital_io()
_usec_delay(100_000)

; Reassign pins for USART and IIC. 
include pps
pps_control_lock(FALSE)                
RA1PPS = PPS_SCK1 ; IIC SDL to A1.  Pin 6 of 8 pin DIP.
RA2PPS = PPS_SDA1 ; IIC SDA to A2.  Pin 5 of 8 pin DIP.
RA4PPS = PPS_TX1  ; USART TX to A4. Pin 3 of 8 pin DIP.
RX1PPS = RA5PPS   ; USART RX to A5. Pin 2 of 8 pin DIP.
pps_control_lock(TRUE)                 

; Setup uart for communication. 
alias pin_RX_direction is pin_A5_direction 
alias pin_TX_direction is pin_A4_direction 
const serial_hw_baudrate  = 115200  
include serial_hardware
serial_hw_init()
alias serial is serial_hw_data

include print
include delay

-- Define the IIC pins and initiaize the pin direction.
alias i2c_scl is pin_A1 
alias i2c_scl_direction is pin_A1_direction
alias i2c_sda is pin_A2
alias i2c_sda_direction is pin_A2_direction
const word _i2c_bus_speed = 1 -- 100 kHz. It can handle 400 kHz.
const bit  _i2c_level = TRUE  -- i2c levels (not SMB)
const word I2C_HARDWARE_TIMEOUT = 10_000 -- At least 10 ms to prevent hang-up.
include i2c_hardware  
i2c_initialize()
-- Now include the library.
include vl53l0x


-- Procedures.
procedure print_iic_address() is
   
   print_string(serial, "VL53L0X module IIC address is: 0x")
   print_byte_hex(serial, vl53l0x_get_iic_address())
   print_crlf(serial)

end procedure

; Print the timeout value.. 
procedure print_timeout() is

   print_string(serial, "Timeout occured.\r\n")
   print_string(serial, "Retry with at timeout value of: ")
   print_word_dec(serial, vl53l0x_get_timeout())
   print_string(serial, " ms.\r\n")

end procedure

-- Variables.
var word distance

-- If needed, change IIC address:
--- const NEW_IIC_ADDRESS = TRUE

-- ------------------------------ Main program ---------------------------------

print_crlf(serial)
print_string(serial, "Test program for the VL53L0X Time-of-Flight ranging sensor.\r\n")
print_string(serial, "Using continuous mode distance is measured in mm and in mil.\r\n")

if defined(NEW_IIC_ADDRESS) then
   -- Set the IIC address to a different address than the default 
   -- address VL53L0X_IIC_DEFAULT_ADDRESS.
   print_iic_address()
   -- Change address.
   vl53l0x_set_iic_address(0x54)
   -- Show the current IIC address.
   print_iic_address()
end if 

-- Initialize the VL53L0X library.
print_string(serial, "Initializing ...\r\n")
while !vl53l0x_init() loop
   serial = "."
   _usec_delay(250_000)
end loop 
print_string(serial, "Done!\r\n")

-- Use continuous mode and sample every 100 ms. Note that when a large value is 
-- used, it may be needed to increase the default timeout value.
vl53l0x_start_continuous(100)

forever loop 

   ; Start with measurement in mm.
   distance = vl53l0x_read_range_continuous_millimeters()
   if vl53l0x_timeout_occured() then
      print_timeout()
      ; Make timeout a bit bigger.
      vl53l0x_set_timeout(vl53l0x_get_timeout() + 10)
   else
      print_string(serial, "Range is in mm: ")
      print_word_dec(serial, distance)
      print_crlf(serial)
   end if 

   ; Now in mil.
   distance = vl53l0x_read_range_continuous_mil()
   if vl53l0x_timeout_occured() then
      print_timeout()
      ; Make timeout a bit bigger.
      vl53l0x_set_timeout(vl53l0x_get_timeout() + 10)
   else
      print_string(serial, "Range in mil: ")
      print_word_dec(serial, distance)
      print_crlf(serial)
   end if 
   print_crlf(serial)
 
end loop
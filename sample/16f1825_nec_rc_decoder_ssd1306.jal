-- -----------------------------------------------------------------------------
-- Title: Sample program for the NEC Remote Control Decoder using an SSD1306
-- Author: Rob Jansen, Copyright (c) 2023..2025, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sample program that shows NEC Remote Control commands on an 
--              SSD1306, controlled via an IIC interface using the external 
--              interrupt of the PIC.
--              An example is also included when using a local constant
--              IOC_VERSION to use the IOC instead of the external interrupt.
-- 
-- Notes:       The 38 kHz Infra Red receiver (active low) must be connected
--              to the external interrupt pin or the used IOC pin.
--           
include 16f1825                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset external
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all unused ports since some inputs are not connected
WPUA = 0b0011_1111       -- Weak pull-up on all pins.
WPUC = 0b0011_1111       -- Weak pull-up on all pins.
OPTION_REG_WPUEN = FALSE -- Enable Weak Pull-Up

enable_digital_io()      -- All pins digital IO
_usec_delay(250_000)     -- Give the hardware some time to stabilize.

const word _i2c_bus_speed = 4 -- 400kHz (set to 1 gives 100 kHz) 
const bit _i2c_level = TRUE   -- i2c levels (not SMB)
alias i2c_scl is pin_C0
alias i2c_scl_direction is pin_C0_direction
alias i2c_sda is pin_C1
alias i2c_sda_direction is pin_C1_direction 
include i2c_hardware
i2c_initialize()

-- Since this PIC does not have more than 1024 bytes of data memory we use
-- will write the text only mode.
const SSD1306_TEXT_ONLY = TRUE
include print

-- Font library.
include glcd_6x8_font
include glcd_font
glcd_font_use(FONT_6X8)

-- Include and initialize the GLCD lib. This will also initialize the
-- IIC interface.
include glcd_ssd1306
ssd1306_init()

-- Settings for the NEC Remote Control Decoder. The decoder uses timer 1
-- which must run at 1 MHz. We use Fosc/4 and a prescaler of 1:8 to 
-- get the 1 MHz timer 1 clock since the target clock is at 32 MHz.
-- Note: When a MHz clock cannot be obtained the user must use NEC_RC_SCALING.
T1CON_TMR1CS = 0b00 -- Clock source Fosc/4, gives 8 MHz.
T1CON_T1CKPS = 0b11 -- Prescaler 1:8, gives 1 MHz.
-- The following local constant is normally not required but is used here to 
-- demonstrate the use of the IOC version. If you comment this constant
-- out the Remote Control decoder will use the external interrupt (default).
const IOC_VERSION = TRUE
if defined(IOC_VERSION) then
   -- Set the IOC interrupt on both edges and define the and aliases 
   -- for the decoder routine. We use pin A5 in this example.
   IOCAP_IOCAP5 = TRUE -- Set ioc interrupt on positive edge
   IOCAN_IOCAN5 = TRUE -- Set ioc interrupt on negative edge.
   alias nec_rc_decoder_ioc_flag is IOCAF_IOCAF5
   -- Interupt pin using IOC.
   alias nec_rc_decoder_pin_direction is pin_a5_direction -- Pin 2 for 14 pin DIP
else
   -- Interupt pin using the external interrupt.
   alias nec_rc_decoder_pin_direction is pin_a2_direction -- Pin 11 for 14 pin DIP
end if 
-- Now we can include the library.
include nec_rc_decoder
nec_rc_decoder_init()

-- There is also an extended NEC Remote Control Protocol. In this 
-- sample program you can switch to this by defining the following 
-- local constant:
-- const USE_NEC_EXTENDED_PROTOCOL = TRUE
if defined(USE_NEC_EXTENDED_PROTOCOL) then
   nec_rc_set_protocol_extended()
end if

-- Constants.
const X_COORDINATE = 60

-- Variables.
var word repeat_counter = 0 
if defined(USE_NEC_EXTENDED_PROTOCOL) then
   var word address -- The extended protocol uses a 16 bit address.
else
   var byte address -- The standard protocol uses an 8 bit address.
end if 
var byte command

-- First clear the screen and prepare it.
ssd1306_clear_screen()
glcd_font_use(FONT_6X8)
ssd1306_goto(10,0)
print_string(glcd,"NEC REMOTE CONTROL")
   ssd1306_goto(15,1)
if defined(USE_NEC_EXTENDED_PROTOCOL) then
   print_string(glcd,"EXTENDED DECODER")
else
   print_string(glcd,"STANDARD DECODER")
end if
ssd1306_goto(0,3)
print_string(glcd, "Address:")
ssd1306_goto(0,4)
print_string(glcd, "Command:")
ssd1306_goto(0,5)
print_string(glcd, "Repeat:")

forever  loop 

   if nec_rc_message_received() then
      -- Reset repeat counter since this is a new message.
      repeat_counter = 0
      ssd1306_goto(X_COORDINATE,5)
      print_word_dec(glcd, repeat_counter)
      print_string(glcd, "      ")
      -- Print the (extended) address
      ssd1306_goto(X_COORDINATE,3)
      -- Reading the data will clear the received message flag.
      if defined(USE_NEC_EXTENDED_PROTOCOL) then
         nec_rc_get_data_extended(address, command)
         print_word_dec(glcd, address)
      else 
         nec_rc_get_data_standard(address, command)
         print_byte_dec(glcd, address)
      end if 
      -- Print the command.
      print_string(glcd, "   ")
      ssd1306_goto(X_COORDINATE,4)
      print_byte_dec(glcd, command)
      print_string(glcd, "   ")
   elsif nec_rc_repeat_received then
      -- Repeat message, increment repeat counter. Calling the function
      -- nec_rc_repeat_received will clear the repeat flag.
      repeat_counter = repeat_counter + 1
      ssd1306_goto(X_COORDINATE,5)
      print_word_dec(glcd, repeat_counter)
      print_string(glcd, "      ")
   end if 
   
end loop

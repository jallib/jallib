-- -----------------------------------------------------------------------------
-- Title: GLCD SSD1306 demo sample showing text and pixel based graphics.
-- Author: Rob Jansen, Copyright (c) 2020..2025, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demo program showing how to use GLCD SSD1306. It demonstrates
--              all features of the glcd_ssd1360.jal library. This sample shows 
--              both the text (font usage) features as well as the graphics 
--              features drawing a line, a boxe, a circle and an ellipse.
--              Last but not least it shows the drawing of images including
--              an animation of a charging battery.
--
-- Notes: A way to generate the image array from a png or jpg file: 
--        *) Go to: http://javl.github.io/image2cpp/
--        *) Upload your png of jpg file 
--        *) Canvas size: 128 x 64 or smaller, depending on your application
--        *) Background color: Black
--        *) Invert image colors: Yes (tick)
--        *) Scaling: scale to fit, keep proportions
--        *) Brightness: 128 or higher (what suits you best)
--        *) Code output format must be: Plain bytes
--        *) Draw mode must be: Vertical - 1 bit per pixel
--
--       For a text only version that uses IIC see the sample file
--       16f1825_glcd_ssd1306_font.jal.
--

include 16f18857
pragma target clock 20_000_000      -- oscillator frequency
pragma target OSC      HS           -- crystal or resonator
pragma target RSTOSC   EXT1X        -- power-up clock select: OSC
pragma target CLKOUTEN DISABLED     -- no clock output
pragma target WDT      DISABLED     -- watchdog
pragma target BROWNOUT DISABLED     -- no brownout reset
pragma target FCMEN    DISABLED     -- no clock monitoring
pragma target CSWEN    ENABLED      -- allow writing OSCCON1 NOSC and NDIV
pragma target LVP      ENABLED      -- use low voltage programming
pragma target MCLR     EXTERNAL     -- external reset 

-- This program uses the internal oscillator at 4 MHz.
;pragma target clock    4_000_000       -- oscillator frequency
--
;pragma target OSC      OFF                       -- internal oscillator
;pragma target RSTOSC   HFINT32                   -- select 32 MHz
;pragma target CLKOUTEN DISABLED                  -- no clock output
;pragma target WDT      DISABLED                  -- watchdog
;pragma target BROWNOUT DISABLED                  -- no brownout reset
;pragma target FCMEN    DISABLED                  -- no clock monitoring
;pragma target CSWEN    ENABLED                   -- allow writing OSCCON1 NOSC and NDIV
;pragma target LVP      ENABLED                   -- low voltage programming
;pragma target MCLR     EXTERNAL                  -- external reset
--
-- The configuration bit settings above are only a selection, sufficient
-- for this program. Other programs may need more or different settings.
--
;OSCFRQ_HFFRQ = 0b010                -- Fosc 32 -> 4 MHz
--

enable_digital_io()
-- Wait some time for the hardware to power up.
_usec_delay(100_000)

-- The default display resolution is 128 x 64. When using 128 x 32 define:
-- const SSD1306_Y_32_PIXELS = TRUE

-- In this sample program you can select between IIC or SPI communication.
-- const USE_IIC = TRUE -- When commenting this out, the program will use SPI.
if defined(USE_IIC) then
   -- Using IIC, include and initialize IIC.
   const word _i2c_bus_speed = 4 -- 400kHz (set to 1 gives 100 kHz) 
   const bit _i2c_level = TRUE   -- i2c levels (not SMB)
   alias i2c_scl is pin_C3
   alias i2c_scl_direction is pin_C3_direction -- Pin 14 of 28 pin DIP
   alias i2c_sda is pin_C4
   alias i2c_sda_direction is pin_C4_direction -- Pin 15 of 28 pin DIP  
   include i2c_hardware
   i2c_initialize()
else
   -- Using SPI.
   ; Define the required SPI pins.
   alias ssd1306_sck is pin_C3                     -- To D0 of SSD1306 
   alias ssd1306_sck_direction is pin_C3_direction -- Pin 14 of 28 pin DIP 
   alias ssd1306_sdo is pin_C4                     -- To D1 of SSD1306  
   alias ssd1306_sdo_direction is pin_C4_direction -- Pin 15 of 28 pin DIP   
   alias ssd1306_csn is pin_C2                     -- To CS of SSD1306  
   alias ssd1306_csn_direction is pin_C2_direction -- Pin 13 of 28 pin DIP  
   alias ssd1306_dc is pin_C1                      -- To DC of SSD1306 
   alias ssd1306_dc_direction is pin_C1_direction  -- Pin 12 of 28 pin DIP     
   -- The SPI version of the SSD1306 uses a hardware reset pin for its reset. 
   -- This optional feature can be used by defining the following:
   alias ssd1306_res is pin_c0                      -- To RES of SSD1306 
   alias ssd1306_res_direction is pin_c0_direction  -- Pin 11 of 28 pin DIP 

   -- You can use software SPI too by setting this constant.
   -- const SSD1306_SOFTWARE_SPI = TRUE 
   if !defined(SSD1306_SOFTWARE_SPI) then
      -- Using SPI hardware and initiallize.
      include spi_master_hw
      spi_init(SPI_MODE_00, SPI_RATE_FOSC_16)
   end if 
end if 

-- Set the pinning for the hardware pins of IIC or SPI. This is default but 
-- still needed for this chip. Do not use when using software SPI since it
-- the pins are then assigned for hardware SPI.
if !defined(SSD1306_SOFTWARE_SPI) then
   include pps
   pps_control_lock(FALSE)                
   RC4PPS = PPS_SDA1  -- SDA re-assigned to C4  (default)             
   RC3PPS = PPS_SCK1  -- SCK re-assigned to C3  (default)            
   pps_control_lock(TRUE)                 
end if

include delay
include print

-- Font libraries.
include glcd_6x8_font
include glcd_12x16_font
include glcd_font

-- Include and initialize the GLCD lib. This will also initialize the IIC or
-- SPI interface.
include glcd_ssd1306
ssd1306_init()

-- Definition of some images.
-- Marilyn Monroe 84 x 48
const byte marilyn[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x68, 0x38, 0x18, 0x18, 0x08, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x78, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xe8, 0x40, 0x00, 0x00, 0x20, 0xc0, 0xc0, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0x7e, 0x7e, 0xfe, 
	0x62, 0x63, 0x61, 0xc3, 0xc3, 0xc3, 0x86, 0x06, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0x10, 
	0x38, 0x18, 0x18, 0x30, 0x30, 0x30, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf4, 0x7c, 
	0xfc, 0xe0, 0xf7, 0x77, 0x3f, 0x3e, 0x38, 0xb0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc7, 0x03, 0x07, 0x3f, 0x03, 0x03, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x30, 0x30, 0x30, 0x60, 0x70, 0x70, 0xfc, 0xff, 
	0xc3, 0x00, 0x02, 0x02, 0x06, 0x06, 0x0c, 0x1c, 0x1c, 0x3e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x0b, 0x01, 0x81, 0xb0, 0x20, 0xf0, 0xe7, 0xf7, 0xef, 0x20, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x05, 0xf1, 0xf8, 0xf0, 
	0xfc, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0xf7, 0xf3, 0xf3, 0xf3, 0xf3, 0xf4, 0xe6, 
	0xee, 0xce, 0xfc, 0xfc, 0xf8, 0xf0, 0x00, 0x08, 0x00, 0xe0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0xdf, 0x98, 0xe2, 0x84, 0xff, 0xff, 0xfd, 0xbf, 
	0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 
	0xf7, 0x67, 0x4f, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x80, 0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0x04, 
	0x04, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x83, 0x81, 0xc0, 0x80, 0xc8, 0xe6, 0xf3, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 
	0x3f, 0x0f, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0x07, 0x06, 0x06, 0x06, 0x0f, 0x0f, 0x0f, 0x00, 0x07, 0x1f, 0x1f, 0x1f, 
	0x1f, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 
	0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 
	0x1f, 0x1f, 0x1f, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

-- JAL Logo 84 x 48
const byte jal_logo[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 
	0xc0, 0x40, 0x58, 0xf8, 0xfe, 0xf8, 0x9c, 0x9c, 0x94, 0xf4, 0x7c, 0xd4, 0xd4, 0x7c, 0x78, 0xc8, 
	0xcc, 0xac, 0x6c, 0xd8, 0xf0, 0x60, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xf0, 0x70, 0x5e, 0xcf, 
	0x83, 0x85, 0xce, 0x76, 0x1f, 0x8f, 0xc7, 0x43, 0x44, 0x1e, 0x34, 0x05, 0x08, 0x10, 0x20, 0x40, 
	0x60, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x23, 0x1c, 0x01, 0x83, 0x8f, 0xff, 0xff, 0xe3, 0xe0, 0xf0, 
	0xf0, 0xf0, 0x70, 0x70, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x62, 0x82, 0x01, 0x01, 0x71, 0xf1, 0x98, 0x98, 0xfc, 0xdc, 0xfc, 
	0xee, 0xfe, 0xfe, 0x7f, 0x7f, 0x3f, 0x1b, 0x1c, 0xdf, 0x8f, 0x06, 0x0c, 0x30, 0xc0, 0x80, 0x80, 
	0x80, 0xc0, 0xc0, 0xc0, 0x60, 0x60, 0x20, 0xb0, 0xf0, 0xf0, 0xf8, 0xfe, 0xfe, 0x7f, 0x7f, 0xff, 
	0xf7, 0xe7, 0xe7, 0xea, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x18, 0x38, 0xf8, 0xff, 
	0xfb, 0xff, 0x6f, 0x3f, 0x3f, 0x1d, 0x08, 0x00, 0x00, 0x00, 0xf0, 0x7e, 0x1f, 0x07, 0x03, 0x06, 
	0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x3f, 0x7f, 0xfd, 0xfa, 0xfd, 0xff, 0xff, 0xf3, 0xfb, 0xf9, 0xfd, 
	0xfc, 0xff, 0x7f, 0xff, 0xff, 0x3f, 0x7f, 0x7e, 0x7e, 0x7e, 0x1e, 0x1f, 0x07, 0x0f, 0x0f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x0f, 0x0f, 0x1c, 0x1c, 0xde, 0x5e, 0xde, 0x9c, 0x9c, 0x9c, 0x9c, 0x1f, 0x0f, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x0f, 0x07, 
	0x07, 0x01, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x01, 0x01, 0x03, 0x03, 0x03, 
	0x03, 0x07, 0x06, 0x07, 0x07, 0x0f, 0x07, 0x06, 0x07, 0x0f, 0x03, 0x0f, 0x0f, 0x0d, 0x0f, 0x0f, 
	0x06, 0x06, 0x00, 0x00, 0x1f, 0x1f, 0x0f, 0x01, 0x0f, 0x03, 0x00, 0x18, 0x19, 0x0f, 0x1e, 0x0e, 
	0x08, 0x1f, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}
-- Battery 0%, 84x48px
const byte battery_00[] = {
	0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xf8, 0x7c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x7c, 0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x0f, 
	0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x3c, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x3c, 0x3f, 0x1f, 
	0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

-- Battery 25%, 84x48px
const byte battery_25[] = {
	0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xf8, 0x7c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x7c, 0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x0f, 
	0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x3c, 0x78, 0x79, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x3c, 0x3f, 0x1f, 
	0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

-- Battery 50%, 84x48px
const byte battery_50[] = {
	0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xf8, 0x7c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x7c, 0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x0f, 
	0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x3c, 0x78, 0x79, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x3c, 0x3f, 0x1f, 
	0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

-- Battery 75%, 84x48px
const byte battery_75[] = {
	0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xf8, 0x7c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x7c, 0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x0f, 
	0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x3c, 0x78, 0x79, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x78, 0x78, 
	0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x78, 0x3c, 0x3f, 0x1f, 
	0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

-- Battery 100%, 84x48px
const byte battery_100[] = {
	0x00, 0x00, 0xe0, 0xf0, 0xf8, 0xf8, 0x7c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 
	0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x7c, 0xf8, 0xf8, 0xf0, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xfe, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0xe0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x0f, 0x0f, 
	0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x3c, 0x78, 0x79, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x79, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x78, 0x79, 0x79, 
	0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x79, 0x78, 0x78, 0x3c, 0x3f, 0x1f, 
	0x1f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

-- Image erase the full area of the image, 128x48px
const byte image_erase[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

-- Arrow, 24x24px
const byte arrow[] = {
	0xf8, 0xfc, 0x06, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x06, 
	0x86, 0xe6, 0x76, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 
	0x00, 0x07, 0x0f, 0x18, 0x0c, 0x0e, 0x06, 0x03, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 
	0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01
}

-- Envelope, 24x24px
const byte envelope[] = {
	0x00, 0x80, 0xc0, 0x60, 0x20, 0x30, 0x18, 0x0c, 0x0c, 0x06, 0x03, 0x03, 0x03, 0x03, 0x06, 0x0c, 
	0x0c, 0x18, 0x30, 0x20, 0x60, 0xc0, 0x80, 0x80, 0xff, 0x07, 0x06, 0x0c, 0x18, 0x18, 0x30, 0x60, 
	0xc0, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x60, 0x30, 0x18, 0x18, 0x0c, 0x06, 0x07, 0xff, 
	0xff, 0xe0, 0xe0, 0xf0, 0x98, 0x8c, 0x86, 0x83, 0x83, 0x81, 0x80, 0x80, 0x80, 0x80, 0x81, 0x83, 
	0x83, 0x86, 0x8c, 0x98, 0xf0, 0xe0, 0xe0, 0xff
}

-- Erase the space used by the images. It keeps the top lines 16 of the display.
procedure erase_image_space() is
   glcd_draw_image(image_erase,0,16,128,48)
   ssd1306_update_display()
end procedure

-- Draw the given image and wait some time.
procedure draw_an_image(byte in image[]) is
   erase_image_space() 
   glcd_draw_image(image,25,16,84,48)
   ssd1306_update_display()
   delay_1s(3)
end procedure

-- Show a battery charging.
procedure draw_battery_charging() is
   erase_image_space() 
 	for 3 loop
      glcd_draw_image(battery_00,30,16,84,48)
      ssd1306_update_display()
 	   _usec_delay(250_000)
      glcd_draw_image(battery_25,30,16,84,48)
      ssd1306_update_display()
 	   _usec_delay(250_000)
      glcd_draw_image(battery_50,30,16,84,48)
      ssd1306_update_display()
	   _usec_delay(250_000)
      glcd_draw_image(battery_75,30,16,84,48)
      ssd1306_update_display()
	   _usec_delay(250_000)
      glcd_draw_image(battery_100,30,16,84,48)
      ssd1306_update_display()
	   _usec_delay(250_000)
	end loop
end procedure


-- Show two icons drawn independently.
procedure draw_two_icons() is
   erase_image_space() 
	for 4 loop
      glcd_draw_image(envelope,30,25,24,24)
      ssd1306_update_display()
      _usec_delay(500_000)
      glcd_draw_image(arrow,70,25,24,24)
      ssd1306_update_display()
      _usec_delay(500_000)
      glcd_draw_image(envelope,70,25,24,24)
      ssd1306_update_display()
      _usec_delay(500_000)
      glcd_draw_image(arrow,30,25,24,24)
      ssd1306_update_display()
     _usec_delay(500_000)
	end loop
end procedure

-- Variable declaration.
var byte x

forever loop
 
   -- First write the demo text.
   ssd1306_clear_screen()
   glcd_font_use(FONT_6X8)
   ssd1306_goto(22,0)
   print_string(glcd,"JAL SSD1306")  
   ssd1306_goto(20,1)
   print_string(glcd,"Library Demo")
   ssd1306_goto(30,4)
   print_string(glcd,"2025-09-25")
   ssd1306_goto(15,5)
   print_string(glcd,"Text & Graphics")
   ssd1306_goto(32,6)
   print_string(glcd,"Font 6x8")
   delay_1s(3)

   -- Goto test. Show all corners.
   glcd_font_use(FONT_6X8)
   -- Top left.
   ssd1306_goto(0,0)
   glcd = "8"
   -- Top utmost right for this font size.
   ssd1306_goto(122,0) -- Font is 6 wide so places it to the most right position.
   glcd = "8"          -- at 122 .. 127.
   -- Bottom left.
   ssd1306_goto(0,7)
   glcd = "8"
   -- Bottom utmost right for this font size.
   ssd1306_goto(122,7) -- Font is 6 wide so places it to the most right position.       
   glcd = "8"          -- at 122 .. 127.
   delay_1s(3)

   ssd1306_clear_screen()
   ssd1306_goto(0,2)
   
   -- Show big font
   glcd_font_use(FONT_12X16)
   print_string(glcd,"Font 12*16" )
   delay_1s(3)

   -- Continue with 6X8 font.
   ssd1306_clear_screen()
   ssd1306_goto(0,0)
   glcd_font_use(FONT_6X8)
   print_string(glcd,"Font 6*8")
   delay_1s(1)

   ssd1306_goto(0,3)
   -- we'll print numbers starting with "0" in inverted format.
   x = 48
   -- numbers are printed inverted
   glcd_background_color = GLCD_BLACK
   while x <= 57 loop
      glcd = x
      delay_100ms(1)
      x = x + 1
   end loop

   ssd1306_goto(0,4)
   -- now print capital letters and small letters in normal format.
   x = 65  -- this is "A"
   -- not inverted (ie. normal)
   glcd_background_color = GLCD_WHITE
   while x <= 122 loop
      glcd = x
      delay_100ms(1)
      x = x + 1
   end loop
   delay_1s(3)

   ssd1306_goto(0,0)
   print_string(glcd,"Brightness Demo")

   -- Play with the contrast.
   for 255 using x loop
      ssd1306_set_contrast(x)
      _usec_delay(20_000)
   end loop

   -- Show some display features.
   ssd1306_goto(0,0)
   print_string(glcd,"All Segments On   ")
   delay_1s(3)
   ssd1306_display_all_on()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Resume Display    ")
   ssd1306_display_resume()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Inverse Display   ")
   ssd1306_display_inverse()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Normal Display    ")
   ssd1306_display_normal()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Display Off and On")
   delay_1s(2)
   ssd1306_display_off()
   delay_1s(2)
   ssd1306_display_on()
   delay_1s(2)
  
   -- Show some display scroll features.
   ssd1306_goto(0,0)
   print_string(glcd,"Scroll Right...   ")
   ssd1306_goto(0,1)
   print_string(glcd,"...and Left       ")
   delay_1s(2)
   ssd1306_start_scroll_right(0x00, 0x07)
   delay_1s(8)
   ssd1306_stop_scroll()
   delay_1s(1)
   ssd1306_start_scroll_left(0x00, 0x07)
   delay_1s(8)
   ssd1306_stop_scroll()
   delay_1s(2)

   -- Custom made vertical scroll. There is no automatic vertical scroll
   -- feature supported by the SSD1306 but we can use the set start line 
   -- function to create one.
   ssd1306_goto(0,0)
   print_string(glcd,"Scroll Up ...     ")
   ssd1306_goto(0,1)
   print_string(glcd,"...and Down       ")
   delay_1s(2)
   -- Up.
   for SSD1306_MAX_Y_PIXELS using x loop
     ssd1306_set_start_line(x)
     delay_1ms(50)
   end loop
   -- Down.
   delay_1s(3)
   x = SSD1306_MAX_Y_PIXELS -1 
   for SSD1306_MAX_Y_PIXELS loop
      ssd1306_set_start_line(x)
      x = x - 1
      delay_1ms(50)
   end loop
   delay_1s(2)
   -- Back to normal.
   ssd1306_set_start_line(0) 

   ssd1306_goto(0,0)
   print_string(glcd,"Scroll Diagonal...")
   ssd1306_goto(0,1)
   print_string(glcd,"...Right and Left ")
   delay_1s(2)
   ssd1306_start_scroll_diagonal_right(0x00, 0x07)
   delay_1s(5)
   ssd1306_stop_scroll()
   delay_1s(1)
   ssd1306_start_scroll_diagonal_left(0x00, 0x07)
   delay_1s(5)
   ssd1306_stop_scroll()
   delay_1s(3)

   -- Do some graphics stuff.
   ssd1306_clear_screen()
   ssd1306_goto(0,0)
   print_string(glcd,"Draw a Line       ")
   delay_1s(2)
   glcd_line(10,20,60,40)
   ssd1306_update_display()
   delay_1s(2)

   ssd1306_clear_screen()
   ssd1306_goto(0,0)
   print_string(glcd,"Draw a Box        ")
   delay_1s(2)
   glcd_box(20,20,80,60)
   ssd1306_update_display()
   delay_1s(2)

   ssd1306_clear_screen()
   ssd1306_goto(0,0)
   print_string(glcd,"Draw a Circle     ")
   delay_1s(2)
   glcd_circle(40,40,20)
   ssd1306_update_display()
   delay_1s(2)

   ssd1306_clear_screen()
   ssd1306_goto(0,0)
   print_string(glcd,"Draw an Ellipse   ")
   delay_1s(2)
   glcd_ellipse(40,30,30,10)
   ssd1306_update_display()
   delay_1s(2)

   -- Draw the images, one default, one inverted.
   ssd1306_clear_screen()
   ssd1306_goto(0,0)
   print_string(glcd,"Draw images       ")
   ssd1306_goto(0,1)
   print_string(glcd,"in normal mode    ")
   delay_1s(2)
	-- Start with default black color.
   glcd_pen_color = GLCD_BLACK
  	draw_an_image(jal_logo)
  	draw_an_image(marilyn)
  	-- Show the battery charging.
   draw_battery_charging()
     -- Show drawing 2 icons drawn independently.
   draw_two_icons()

   -- Now display the inverted image.
   ssd1306_goto(0,1)
   print_string(glcd,"in inverse mode   ")
   glcd_pen_color = GLCD_WHITE
   erase_image_space()
   delay_1s(2)
  	draw_an_image(jal_logo)
  	draw_an_image(marilyn)
  	-- Show the battery charging.
   draw_battery_charging()
     -- Show drawing 2 icons drawn independently.
   draw_two_icons()
   glcd_pen_color = GLCD_BLACK

end loop



-- -----------------------------------------------------------------------------
-- Title: Sample program for the DCF77 Decoder using an SSD1306.
-- Author: Rob Jansen, Copyright (c) 2023..2025, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Sample program that shows the operation of the DCF77 decoder 
--              library. The sample program shows a software clock with time,
--              date and day of the week which is synchronized with the 
--              information given by the DCF77 transmiter. 
--              An SSD1306 is used to display the information.
--              The DCF77 library uses timer 1 to measure the bit-times. This
--              timer must be set to overflow every 1 ms.
--
-- Note:        The PIC runs at a low internal clock of 4 MHz since the DCF77
--              signal has a low bitrate. This will also reduce the amonunt of
--              noise generated by the PIC and so increase sensitivity.
-- 
include 16f1825                 

-- This program uses the internal oscillator at 4 MHz.
pragma target clock    4_000_000       -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    DISABLED        -- No PLL
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      ENABLED         -- Low voltage programming
pragma target MCLR     EXTERNAL        -- Reset external
-- Set the internal clock frequency to 4 MHz.
OSCCON_IRCF   = 0b1101                 -- Set 4 MHz
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC

-- Enable weak pull up. Weak pull-up on the interrupt pin is not needed.
WPUA = 0b0011_1111       -- Weak pull-up on all pins.
WPUC = 0b0011_1111       -- Weak pull-up on all pins.
OPTION_REG_WPUEN = FALSE -- Enable Weak Pull-Up

enable_digital_io()      -- All pins digital IO
_usec_delay(250_000)     -- Give the hardware some time to stabilize.

-- We are using an SSD1306 with a SPI interface. Pin definition.
alias ssd1306_sck is pin_C0 -- This is pin DO on the module (SCK of PIC).
alias ssd1306_sck_direction is pin_C0_direction -- Pin 10 of 14 pin DIP.
alias ssd1306_sdo is pin_C2 -- This is pin D1 on the module (SDO of PIC).
alias ssd1306_sdo_direction is pin_C2_direction -- Pin 8 of 14 pin DIP. 
alias ssd1306_csn is pin_C4  -- This is pin CS on the module. 
alias ssd1306_csn_direction is pin_C4_direction  -- Pin 6 of 14 pin DIP. 
alias ssd1306_dc is pin_C1  -- This is pin DC on the module. 
alias ssd1306_dc_direction is pin_C1_direction -- Pin 9 of 14 pin DIP. 
alias ssd1306_rst is pin_C3  -- This is pin RES on the module.
alias ssd1306_rst_direction is pin_C3_direction  -- Pin 7 of 14 pin DIP. 
include spi_master_hw
spi_init(SPI_MODE_00, SPI_RATE_FOSC_16)
-- Since this PIC does not have more than 1024 bytes of data memory we use
-- the text only mode.
const SSD1306_TEXT_ONLY = TRUE

-- Font library.
include glcd_6x8_font
include glcd_font
glcd_font_use(FONT_6X8)
include print

-- Include and initialize the GLCD lib. This will also initialize the
-- SPI interface.
include glcd_ssd1306
ssd1306_init()

-- Settings for the DCF77 Decoder. The decoder uses timer 1 to get an overflow
-- interrupt every 1 ms. In this case we use Fosc/4 and a prescaler of 1:8 to 
-- get a 1 MHz timer 1 clock since the target clock is at 4 MHz.
T1CON_TMR1CS = 0b00 -- Clock source Fosc/4, gives 1 MHz.
T1CON_T1CKPS = 0b00 -- Prescaler 1:1, gives 1 MHz.
-- Set the timer reload value to get an overflow after 1 ms time.
const word DCF77_TIMER_1_RELOAD = 65535 - 1_000

-- The following local constant is normally not required but is used here to 
-- demonstrate the use of the IOC version. If you comment this constant
-- out the DCF77 decoder will use the external interrupt (default).
-- const IOC_VERSION = TRUE
if defined(IOC_VERSION) then
   -- Set the IOC interrupt on both edges and define the and aliases 
   -- for the decoder routine. We use pin A5 in this example.
   IOCAP_IOCAP5 = TRUE -- Set ioc interrupt on positive edge
   IOCAN_IOCAN5 = TRUE -- Set ioc interrupt on negative edge.
   alias dcf77_decoder_ioc_flag is IOCAF_IOCAF5
   -- Interupt pin using IOC.
   alias dcf77_decoder_pin_direction is pin_a5_direction -- Pin 2 for 14 pin DIP
else
   -- Interupt pin using the external interrupt.
   alias dcf77_decoder_pin_direction is pin_a2_direction -- Pin 11 for 14 pin DIP
end if 

-- Now we can include the DCF77 library.
include dcf77_decoder
dcf77_decoder_init()

-- Constants.
const X_COORDINATE = 65

-- Variables.
var word second_counter 
var byte hours, minutes, seconds
var byte day, month, year
var bit  second_passed


-- Timer 2 interrupt procedure. Sets a 1 second flag.
procedure timer_2_interrupt() is
   pragma interrupt

   if PIR1_TMR2IF then
      PIR1_TMR2IF = FALSE
      second_counter = second_counter + 1
      if (second_counter == 1_000) then
         second_counter = 0
         second_passed = TRUE
      end if 
   end if

end procedure


-- Print a decimal value always with leading zero's.
procedure print_decimal(byte in value) is
   if (value < 10) then
      glcd = "0"
   end if
   print_byte_dec(glcd, value)
end procedure


-- Print the given day of the week.
procedure print_day(byte in day) is

   case day of
      1: print_string(glcd, "Monday")
      2: print_string(glcd, "Tuesday")
      3: print_string(glcd, "Wednesday")
      4: print_string(glcd, "Thursday")
      5: print_string(glcd, "Friday")
      6: print_string(glcd, "Saturday")
      7: print_string(glcd, "Sunday")
   end case

end procedure


-- Main program starts here.
hours = 0
minutes = 0
seconds = 0

-- Make a timer that givea a signal of 1 second for the sofware clock. 
-- Use Timer 2. Register PR2 holds the PWM Timer Period using the following 
-- formula: Period = (PR2 + 1) * 4 * Tosc * prescale value * postscale value 
-- where Tosc = 1/Fosc and Fosc = 4 MHz. Setting the prescaler to 4 and PR2 
-- at 249: (249 + 1) * 4 * 1/4.000.000 * 4 * 1 = 1 ms. Period Cycle = 1 kHz.
T2CON_TMR2ON = FALSE
T2CON_T2OUTPS = 0b0000 -- Postscaler is 1:1 (no postscaling).
T2CON_T2CKPS = 0b01    -- Prescaler divide by 4
PR2 = 249 
PIE1_TMR2IE = TRUE
INTCON_PEIE = TRUE
T2CON_TMR2ON = TRUE

-- First clear the screen and prepare it.
ssd1306_clear_screen()
glcd_font_use(FONT_6X8)
ssd1306_goto(30,0)
print_string(glcd,"DCF77 CLOCK")
ssd1306_goto(0,3)
print_string(glcd, "Time     :")
ssd1306_goto(0,4)
print_string(glcd, "CET/CEST :")
ssd1306_goto(0,5)
print_string(glcd, "Day      :")
ssd1306_goto(0,6)
print_string(glcd, "Date     :")

forever loop 

   -- Run the software clock.
   if second_passed then
      second_passed = FALSE
      seconds = seconds + 1
      if (seconds == 60) then
         seconds = 0
         minutes = minutes + 1
         if (minutes == 60) then
            minutes = 0
            hours = hours + 1
            if (hours == 24) then
               hours = 0
            end if 
         end if 
      end if 
      -- Write the clock.
      ssd1306_goto(X_COORDINATE,3)
      print_decimal(hours)
      glcd = ":"
      print_decimal(minutes)
      glcd = ":"
      print_decimal(seconds)
   end if 

   -- See if we can synchronize our clock with the DCF77 time.
   if dcf77_message_received() then
      -- We only get hours and minutes, seconds are zero.
      seconds = 0
      hours = dcf77_get_hours()
      minutes = dcf77_get_minutes()

      -- Print the other DCF77 information.
      -- CET or CEST.
      ssd1306_goto(X_COORDINATE, 4)
      if dcf77_time_is_cet() then
         print_string(glcd, "CET")
      elsif dcf77_time_is_cest() then
         print_string(glcd, "CEST")
      end if 

      -- Day of the week.
      ssd1306_goto(X_COORDINATE, 5)
      print_day(dcf77_get_day_of_week())

      -- Date.
      ssd1306_goto(X_COORDINATE, 6)
      print_decimal(dcf77_get_day_of_month())
      glcd = "-"
      print_decimal(dcf77_get_month())
      print_string(glcd, "-20")
      print_decimal(dcf77_get_year_within_century())

   end if

end loop

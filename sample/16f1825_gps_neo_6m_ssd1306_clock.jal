-- -----------------------------------------------------------------------------
-- Title: Sample program for the GPS NEO-6M receiver showing a clock on the SSD1306
-- Author: Rob Jansen, Copyright (c) 2021..2025 all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demonstrates the feature of the GPS NEO-6M library showting the time
--              and date using the SSD1306 for the display.
--                 
-- Sources:
--
-- Notes: The GPS NEO 6M receiver uses a serial interface so at least one of the 
--        JAL serial hardware libraries must be included and initialized by the main program.       
--
include 16f1825                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset external
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all ports. 
WPUA = 0b0011_1111       
WPUC = 0b0011_1111       
OPTION_REG_WPUEN = FALSE 

enable_digital_io()
-- Give the hardware some time to stabilize.
_usec_delay(100_000)

-- Before including the GPS library, select a serial interface. You can select
-- from serial_hardware or serial_hardware2, this because the library captures 
-- and processes the data on an interrupt basis. Only USART reception is used
-- by the library. The main program can still use the USART for transmission.
alias pin_RX_direction is pin_RX_RC5_direction -- Pin 5 of 14 pin DIP to TX of GPS Module
alias pin_TX_direction is pin_TX_RC4_direction -- Pin 6 of 14 pin DIP to Computer
const serial_hw_baudrate = 9600                -- Module uses 9600 baud.
include serial_hardware                        -- Alternative for serial_hw_int_cts
serial_hw_init

-- Set-up required aliases for the GPS library.
alias gps_neo_6m_serial_data is serial_hw_data
alias GPS_NEO_6M_SERIAL_RX_INT_FLAG is PIR1_RCIF
alias GPS_NEO_6M_SERIAL_RX_INT_ENABLE is PIE1_RCIE
include gps_neo_6m
gps_neo_6m_init() 
include print

-- Define the pins for the SSD1306. In this case we define only the IIC
const word _i2c_bus_speed = 4 -- 400kHz (set to 1 gives 100 kHz) 
const bit _i2c_level = TRUE   -- i2c levels (not SMB)
alias i2c_scl is pin_C0
alias i2c_scl_direction is pin_C0_direction
alias i2c_sda is pin_C1
alias i2c_sda_direction is pin_C1_direction 
include i2c_hardware
i2c_initialize()

-- Since this PIC does not have more than 1024 bytes of data memory we use
-- will write the text only mode.
const SSD1306_TEXT_ONLY = TRUE

-- Font library.
include glcd_6x8_font
include glcd_font
glcd_font_use(FONT_6X8)

-- Include and initialize the GLCD lib. This will also initialize the IIC
-- interface.
include glcd_ssd1306
ssd1306_init()

-- Variables.
var byte hours, minutes, seconds
var byte date, month, year

-- Convert BDC to binary. Copied from rtc_common.jal
function bcd2bin(byte in bcd) return byte is
   var byte t                       -- intermediate value         
   t = (bcd >> 1) & 0b0111_1000     -- tens * 8
   return (bcd - t + (t >> 2))      -- bcd - tens*8 + tens*2
end function

-- Main program starts here.

-- Write some text.
ssd1306_clear_screen()
glcd_font_use(FONT_6X8)
ssd1306_goto(10,0)
print_string(glcd,"JAL GPS NEO-6M library SSD1306 Clock Demo")

forever loop

   -- Get the data and display it.
   if gps_neo_6m_data_available() then

      ssd1306_goto(10,3)
      gps_neo_6m_get_time(hours, minutes, seconds)
      -- Data is BCD, convert to binary before printing.
      print_byte_dec(glcd, bcd2bin(hours))
      print_string(glcd, ":")
      print_byte_dec(glcd, bcd2bin(minutes))
      print_string(glcd, ":")
      print_byte_dec(glcd, bcd2bin(seconds))

      ssd1306_goto(10,4)
      gps_neo_6m_get_date(date, month, year) 
      -- Data is BCD, convert to binary before printing.
      print_byte_dec(glcd, bcd2bin(date))
      print_string(glcd, "-")
      print_byte_dec(glcd, bcd2bin(month))
      print_string(glcd, "-")
      print_word_dec(glcd, word(bcd2bin(year))+2000)
   else
      -- No data yet.
      ssd1306_goto(10,3)
      print_string(glcd, "00:00:00")
      ssd1306_goto(10,4)
      print_string(glcd, "00-00-0000")
   end if 
 
end loop


-- -----------------------------------------------------------------------------
-- Title: GLCD SSD1306 demo sample showing text.
-- Author: Rob Jansen, Copyright (c) 2020..2025, all rights reserved.
-- Adapted-by:
-- Compiler: 2.5r9
--
-- This file is part of jallib (https://github.com/jallib/jallib)
-- Released under the ZLIB license (http://www.opensource.org/licenses/zlib-license.html)
--
-- Description: Demo program showing how to use GLCD SSD1306. It demonstrates
--              all features of the glcd_ssd1360.jal library. This sample shows 
--              the text (font usage). 
--
-- Note: For a full graphics version that uses SPI see the sample file
--       16f18857_glcd_ssd1306_font_graphics.jal.
--

include 16f1825                 

-- This program uses the internal oscillator at 32 MHz.
pragma target clock    32_000_000      -- oscillator frequency
pragma target OSC      INTOSC_NOCLKOUT -- Internal Clock
pragma target PLLEN    ENABLED         -- PLL on to get 32 MHz
pragma target WDT      DISABLED        -- No Watchdog
pragma target PWRTE    ENABLED         -- Power up timer enabled
pragma target BROWNOUT DISABLED        -- No brownout reset
pragma target FCMEN    DISABLED        -- No clock monitoring
pragma target IESO     DISABLED        -- int/ext osc. switch
pragma target LVP      DISABLED        -- No low voltage programming
pragma target MCLR     EXTERNAL        -- Reset internal
-- Set the internal clock frequency to 32 MHz.
OSCCON_IRCF   = 0b1110                 -- Set 32 MHz (uses 8 MHz source)
OSCCON_SCS    = 0b00                   -- Clock determined by FOSC (32 MHz)

-- Enable weak pull up for all unused ports since some inputs are not connected
WPUA = 0b0000_0111       -- Weak pull-up for unused pins.
WPUC = 0b0011_1000       -- Weak pull-up for unused pins.
OPTION_REG_WPUEN = FALSE -- Enable Weak Pull-Up

enable_digital_io()
-- Wait some time for the hardware to power up.
_usec_delay(100_000)

-- Since this PIC does not have more than 1024 bytes of data memory we use
-- will write the text only mode. This limits the font options to fonts that
-- are at most 8 pixels high. 
const SSD1306_TEXT_ONLY = TRUE

-- The default display resolution is 128 x 64. When using 128 x 32 define:
-- const SSD1306_Y_32_PIXELS = TRUE

-- In this sample program you can select between IIC or SPI communication.
const USE_IIC = TRUE -- When commenting this out, the program will use SPI.
if defined(USE_IIC) then
   -- Using IIC, include and initialize IIC.
   const word _i2c_bus_speed = 4 -- 400kHz (set to 1 gives 100 kHz) 
   const bit _i2c_level = TRUE   -- i2c levels (not SMB)
   alias i2c_scl is pin_C0
   alias i2c_scl_direction is pin_C0_direction
   alias i2c_sda is pin_C1
   alias i2c_sda_direction is pin_C1_direction 
   include i2c_hardware
   i2c_initialize()
else
   -- Using SPI.
   ; Define the required SPI pins.
   alias ssd1306_sck is pin_c0                      -- To D0 of SSD1306 
   alias ssd1306_sck_direction is pin_c0_direction  
   alias ssd1306_sdo is pin_c2                      -- To D1 of SSD1306  
   alias ssd1306_sdo_direction is pin_c2_direction  
   alias ssd1306_csn is pin_c3                      -- To CS of SSD1306  
   alias ssd1306_csn_direction is pin_c3_direction  
   alias ssd1306_dc is pin_c4                       -- To DC of SSD1306 
   alias ssd1306_dc_direction is pin_c4_direction    
   -- The SPI version of the SSD1306 uses a hardware reset pin for its reset. 
   -- This optional feature can be used by defining the following:
   alias ssd1306_res is pin_c5                      -- To RES of SSD1306 
   alias ssd1306_res_direction is pin_c5_direction

   -- You can use software SPI too by setting this constant.
   -- const SSD1306_SOFTWARE_SPI = TRUE 
   if !defined(SSD1306_SOFTWARE_SPI) then
      -- Using SPI hardware and initiallize.
      include spi_master_hw
      spi_init(SPI_MODE_00, SPI_RATE_FOSC_16)
   end if 
end if 

include delay
include print

-- Font libraries.
include glcd_6x8_font
include glcd_12x16_font
include glcd_font

-- Include and initialize the GLCD lib. This will also initialize the IIC
-- interface.
include glcd_ssd1306
ssd1306_init()

var byte x

forever loop

   -- First write the demo text.
   ssd1306_clear_screen()
   glcd_font_use(FONT_6X8)
   ssd1306_goto(22,0)
   print_string(glcd,"JAL SSD1306")  
   ssd1306_goto(20,1)
   print_string(glcd,"Library Demo")
   ssd1306_goto(30,4)
   print_string(glcd,"2025-09-25")
   ssd1306_goto(30,5)
   print_string(glcd,"Text only")
   ssd1306_goto(32,6)
   print_string(glcd,"Font 6x8")
   delay_1s(3)

   -- Goto test. Show all corners.
   glcd_font_use(FONT_6X8)
   -- Top left.
   ssd1306_goto(0,0)
   glcd = "8"
   -- Top utmost right for this font size.
   ssd1306_goto(122,0) -- Font is 6 wide so places it to the most right position.
   glcd = "8"          -- at 122 .. 127.
   -- Bottom left.
   ssd1306_goto(0,7)
   glcd = "8"
   -- Bottom utmost right for this font size.
   ssd1306_goto(122,7) -- Font is 6 wide so places it to the most right position.       
   glcd = "8"          -- at 122 .. 127.
   delay_1s(3)

   ssd1306_clear_screen()
   ssd1306_goto(0,2)
   
   -- Show big font
   glcd_font_use(FONT_12X16)
   print_string(glcd,"Font 12*16" )
   delay_1s(3)

   -- Continue with 6X8 font.
   ssd1306_clear_screen()
   ssd1306_goto(0,0)
   glcd_font_use(FONT_6X8)
   print_string(glcd,"Font 6*8")
   delay_1s(1)

   ssd1306_goto(0,3)
   -- we'll print numbers starting with "0" in inverted format.
   x = 48
   -- numbers are printed inverted
   glcd_background_color = GLCD_BLACK
   while x <= 57 loop
      glcd = x
      delay_100ms(1)
      x = x + 1
   end loop

   ssd1306_goto(0,4)
   -- now print capital letters and small letters in normal format.
   x = 65  -- this is "A"
   -- not inverted (ie. normal)
   glcd_background_color = GLCD_WHITE
   while x <= 122 loop
      glcd = x
      delay_100ms(1)
      x = x + 1
   end loop
   delay_1s(3)

   ssd1306_goto(0,0)
   print_string(glcd,"Brightness Demo")

   -- Play with the contrast.
   for 255 using x loop
      ssd1306_set_contrast(x)
      _usec_delay(20_000)
   end loop

   -- Show some display features.
   ssd1306_goto(0,0)
   print_string(glcd,"All Segments On   ")
   delay_1s(3)
   ssd1306_display_all_on()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Resume Display    ")
   ssd1306_display_resume()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Inverse Display   ")
   ssd1306_display_inverse()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Normal Display    ")
   ssd1306_display_normal()
   delay_1s(3)
   ssd1306_goto(0,0)
   print_string(glcd,"Display Off and On")
   delay_1s(2)
   ssd1306_display_off()
   delay_1s(2)
   ssd1306_display_on()
   delay_1s(2)
  
   -- Show some display scroll features.
   ssd1306_goto(0,0)
   print_string(glcd,"Scroll Right...   ")
   ssd1306_goto(0,1)
   print_string(glcd,"...and Left       ")
   delay_1s(2)
   ssd1306_start_scroll_right(0x00, 0x07)
   delay_1s(8)
   ssd1306_stop_scroll()
   delay_1s(1)
   ssd1306_start_scroll_left(0x00, 0x07)
   delay_1s(8)
   ssd1306_stop_scroll()
   delay_1s(2)
 
   -- Custom made vertical scroll. There is no automatic vertical scroll
   -- feature supported by the SSD1306 but we can use the set start line 
   -- function to create one.
   ssd1306_goto(0,0)
   print_string(glcd,"Scroll Up...      ")
   ssd1306_goto(0,1)
   print_string(glcd,"...and Down       ")
   delay_1s(2)
   -- Up.
   for SSD1306_MAX_Y_PIXELS using x loop
     ssd1306_set_start_line(x)
     delay_1ms(50)
   end loop
   -- Down.
   delay_1s(3)
   x = SSD1306_MAX_Y_PIXELS -1 
   for SSD1306_MAX_Y_PIXELS loop
      ssd1306_set_start_line(x)
      x = x - 1
      delay_1ms(50)
   end loop
   delay_1s(2)
   -- Back to normal.
   ssd1306_set_start_line(0) 

   ssd1306_goto(0,0)
   print_string(glcd,"Scroll Diagonal...")
   ssd1306_goto(0,1)
   print_string(glcd,"...Right and Left ")
   delay_1s(2)
   ssd1306_start_scroll_diagonal_right(0x00, 0x07)
   delay_1s(5)
   ssd1306_stop_scroll()
   delay_1s(1)
   ssd1306_start_scroll_diagonal_left(0x00, 0x07)
   delay_1s(5)
   ssd1306_stop_scroll()
   delay_1s(3)
   
end loop



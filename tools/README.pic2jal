

    P I C 2 J A L   Jallib device file generation, etc.

                  2017 - Rob Hamerling
                  2025 - Rob Jansen

=================================================================

Brief instructions for the generation of Jallib device files,
simple blink-a-led samples and related tasks.


            <=== preparations ===>

The process consists of a number of Python scripts.
You must have Python version 3.5 or newer installed on your system.
A reasonable knowledge of the Python programming language is desired
to be able to update one of more of the scripts, in particular the
script with which the device files are actually generated: pic2jal.py.
All Python scripts are commandline oriented. To handle Python
scripts you may prefer an IDE like PyCharm of JetBrains.

The latest version of MPLABX needs be installed, since the Jallib
device files are generated from one of its .jar archives.
This is the file 'crownking.edc.jar', the only source of information
required from MPLABX.

The provided scripts assume that you have diskspace for the output
of the scripts. Create a directory for this on any convenient place.
WARNING: Do not use this directory for the scripts. Install the
         pic2jal.zip package in a separate (dedicated) directory.

Depending on the script the follwing environment variables are needed
where (5) and (6) are specific for your installation:
      (1) 'PIC2JAL'        - path of the destination directory.
      (2) 'JALLIB'         - path to your local GitHub\Jallib directory.
      (3) 'JALCOMPILER'    - path to your JAL compiler
      (4) 'MPLABXINSTALL'  - path to your MPLABX installation
      (5) 'MPLABXVERSION'  - current version of MPLABX.
      (6) 'KDIFF3'         - path to your kdiff3 installation    

For all script, example bash file (Linux) and bat files (Windows) are
available that set the environment variables. These scripts all start
with 'do_....' with the name of the Python script in it. If an 
environment variable is not present, the related Python script will exit.
Adjust the environment variables in these bash files and bat files to 
your needs.

Depending on the access right settings of the destination of new files
and sub-directories you may have to run the scripts as root, super-user,
supervisor or administrator.


            <=== the generation process ===>

The following operations need be performed in a terminal- (commandline-)
session with the directory in which you installed the pic2jal package
as the current working directory.
NOTE: Where 'python3' is specified as command you may need to use 'python'!

   1. python3 mplabxtract.py (do_mplabxtract.sh and do_mplabxtract.bat)

      Extract the desired .pic (xml-)files from MPLABX .jar files.

   2. python3 xmltree.py (do_xmltree.sh and do_xmltree.bat)

      Create reformatted copies of XML files.
      The output is supposed to be better human readable.
      Requires the files extracted by step 1.

   3. python3 pinmap_create.py (do_pinmap_create.sh and do_pinmap_create.bat)

      Create a new pinmap.py file and a new pinaliases.json file.
      Requires the files extracted by step 1 and
      a previous version of pinmap.py (for exceptions).

   4. Copy the following file to your [PIC2JAL] directory:
         devicespecific.json

   5. python3 pic2jal.py (do_pic2jal.sh and do_pic2jal.bat)

      Create JalV2 device files in the [PIC2JAL]/device directory
      Requires files from steps 1, 3 and 4.

   6. python3 blink-a-led.py (do_blink_a_led.sh and do_blink_a_led.bat)

      Validate device files, generate, validate and compile
      blink-a-led samples. Put results in sub-directory 'blink'.
      Needs the device files of step 5, the script 'jallib.py'
      and the compiler.

 
            <=== all-in-one ===>

In stead of executing these steps one-by-one 'manually'
you may prefer to use the Python script 'all-in-one.py' by
using (Linux) do_all_in_one.sh or (Windows) do_all_in_one.bat
This script creates the destination directory if it doesn't exist
and removes its contents when it exists and then performs all
the operations listed above.
In addition it stores the screen output of the pic2jal and
blink-a-led scripts in corresponding '.log' files in the
[PIC2JAL] directory for further review.


            <=== results ===>

When all the scripts above are run successfully the destination directory
will contain the following (for example with MPLABX version 6.25):

   - [PIC2JAL].[MPLABXVERSION]   # path in environment variable
      - blink                    # generated blink-a-led samples
      - mplabx                   # (selected MPLABX version)
        - 16c5x                  # .pic (xml) files of 12-bits PICs
        - 16xxxx                 #  same of 14-bits PICs
        - 18xxxx                 #  same of 16 bits PICs
      - device                   # generated Jallib device files
      - xmltree                  # reformatted MPLABX .pic files
      blink-a-led.log            # log of the blink-a-led script
      devicespecific.json        # device specific parameters
      pic2jal.log                # log of the pic2jal script
      pinaliases.json            # pin aliases for device files
      pinmap.py                  # pins and their aliases ('raw')


When one or more of the additional scripts (see below) have been
executed then more directories or files may appear.

See below under "Updating Jallib at Github" for final destinations
of the new or updated files.


            <=== checking results ===>

In addition to the validation and compilation of device files by the
blink-a-led script some other scripts allow further checking of the
results:

   python3 comparejal.py (do_comparejal.sh and do_comparejal.bat)

      This script performs a line-by-line comparison of new and old device
      files. The header portion of the device files (which will certainly
      contain differences like a generation timestamp) is skipped!
      When a difference is detected the lines of new and old are shown on
      the screen and then you have the choice to ignore the difference or
      to perform a detailed visual comparison with the KDiff3 program.
      The comparejal script generates 2 files:
         - a log of results of the comparison (equal, unequal, new).
         - a commandfile with copy commands to replace changed device files
         and copy new device files to the 'old' directory.
      The script must be modified! The new device files are supposed to be
      in the destination directory used by the pic2jal.py script ("test"),
      but the path to 'old' device files differs most likely from the path
      specified in the provided script!

   python3 compilesamples.py (do_compilesamples.sh and do_compilesamples.bat)

      Script to compile all but the blink-a-led Jallib samples.
      For the samples and libraries a local copy of the Jallib repository
      (jallib-master) is used. The new device files are used in stead of
      those in the local Jallib copy.
      The include directory tree is traversed to collect all libraries
      (except device files) into a single directory ('lib').
      When any errors or warnings are reported the sample source and compiler
      output are stored in a 'log' directory. Without any issues these files
      are discarded.
      The script must be modified! The path to a local copy of Jallib
      differs likely from the path specified in the provided script.



            <=== additional scripts ===>
  Note RJ: Not updated using environment variables and not maintained.

Some additional scripts related to but not needed for the generation
of device files are provided for convenience with development and
maintenance of the pic2jal script in particular.

   python3 createdswikis.py

      Generate new Datasheet en Programming Specifications wikis:
      - Datasheet.md
      - PicGroups.md
      - ProgrammingSpecifications.md
      - PicPgmGroups.md
      Requires the files datasheet.list and devicespecific.json.
      The wikis are stored in the 'wiki' directory of your [PIC2JAL] directory.

   python3 wgetds.py

      Download a selection of datasheets from Microchip, or obtain size
      and last modified date of these (which is a good check to see
      if you have the latest versions!).
      The downloaded datasheets are stored in the 'picdatasheets' directory
      of your [PIC2JAL] diectory.
      Requires the file datasheet.list and the python 'requests' module
      being installed.
      NOTE: It is recommended to change the destination of the datasheets,
            since you will loose them when re-running the all-in-one script.

   python3 dsclean.py

      Remove obsolete versions of datasheets from the datasheets directory.
      Script might need modification for the specification of the path of
      the directory with datasheets.

   python3 ds <pictype>

      Script to search and display Datasheet or Programming Specifications
      of a specific PIC (specify complete pictype or the last part of it
      like 683 for a 12f683, or 25k42 for an 18f25k22, or directly the
      datasheet number (without suffix).
      It uses the datasheets and programming specifications
      wikis generated with the createdswikis script above and
      of course a directory with the .pdf files too.
      The script must be modified to match your systems setup!
      Note: It is an ordinary Python script without '.py' extension.
            It can be used as command when placed in the PATH or in the
            current working directory (or with Linux in the user's bin
            directory) and has the 'executable' attribute.
            With Windows ...?

   python3 multiedit.py

      Sample script to script to modify a batch of files.
      The script handles files in selected directories to modify
      pieces of text. The modification is hard coded, as well as the
      directory and file selection. Therefore the script must
      be modified if another selection or change has to be made.
      This script can be useful after a change in the device files,
      for example a new or modified keyword or symbolic value.

   python3 fusedef_all_keywords.py

      Script to collect all used keywords (names) and their occurences
      of configuration bits or bit-fields in the .pic files.
      Can be useful to detect 'synonyms' which may be reduced to
      a single keyword in the device files.

   python3 fusedef_analysis.py

      Script to collect the symbolic values and descriptions of a
      selection of fusedef keywords.
      The listing contains different views which allows analysis of
      the symbolic values of the fusedef keywords.
      This script is meant to simplify the 'normalization' of symbolic
      keyword values in the device files.
      See the 'normalize_fusedef_value' procedure in the pic2jal script.

   python3 pinlist.py

      Script to list the 'raw' pin definitions in the MPLABX .pic files.
      This can be helpful for maintenance of the pinmap_create script,
      for example to exclude pins or detect anomalies or errors.



            <=== updating Jallib at Github ===>

After generating device files, new blink samples and related files the changes
must be applied to Jallib at Github.
   - You need a local copy of Jallib:
      + create a directory 'jallib' and change-directory to it
      + git init
      + git clone http://github.com/jallib/jallib
      + git config --global user.name <name>
         (<name> is your github username)
   - Update CHANGELOG (devices, samples) when applicable (e.g. with new PICs)
   - Update TORELEASE when new PIC device files and blink-a-led samples have
     been tested sucessfully
   - Update devicefiles.html with the newly generated pps_group.html and
     maybe other changes.
   - Copy newly generated files and other updates to the appropriate places
     in your local copy of the Jallib repository.
     The following new or updated files may be involved:
         test/*               -> jallib/include/device
         blink/*              -> jallib/samples
         datasheets.list      -> jallib/tools
         devicespecific.json  -> jallib/tools
         pinmap.py            -> jallib/tools
         pinaliases.json      -> jallib/tools
         wiki/*               -> jallib/wiki
         changed scripts      -> jallib/tools
         devicefiles.html     -> jallib/doc/html
   - Prepare new and changed directories and files for commit (git add ...)
   - Commit the added files and/or directories (git commit ...)
   - Transfer the files to Github (git push ...).
These instructions assume you use the commandline-version of Git.
You may prefer to use a graphical Git client in stead of the commandline
version of the git utility, e.g. Git-cola or SmartGit.


            <=== notes ===>

- Some of the original Jallib scripts have as first optional argument 'PROD' or 'TEST'.
  This determines the destination of the generated files. In this package
  the PROD option is disabled to prevent accidentally updating (a local copy of) Jallib.
- The files datasheets.list and devicespecific.json are maintained by manual editing!
  Visit the site of Microchip regularly to see if new Datasheets or Programming
  Specifications have been published.
  Note: When a datasheet number changes from 5 to 8 digits don't forget to update
        not only datasheet.list but also the instances in devicespecific.json
        and possibly the ircf-dictionary in the blink-a-led script too.
- Check regularly the site of Microchip for new versions of MPLABX.
  With most new versions of MPLABX or with new PICs, the pic2jal.py script will have
  to be adapted to handle new PICs, sometimes also for changed features.
- For more user-related details read the full documentation: devicefiles.html.


